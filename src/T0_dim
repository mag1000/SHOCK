BC.c:	if (pnt_config->InterfaceNeighbourLeft==NO_NEIGHBOUR)
BC.c:	if (pnt_config->InterfaceNeighbourRight==NO_NEIGHBOUR)
BC.c:	if (pnt_config->InterfaceNeighbourBottom==NO_NEIGHBOUR)
BC.c:	if (pnt_config->InterfaceNeighbourTop==NO_NEIGHBOUR)
BC.c:		if (pnt_config->InterfaceNeighbourBehind==NO_NEIGHBOUR)
BC.c:		if (pnt_config->InterfaceNeighbourInFront==NO_NEIGHBOUR)
BC.c:	if(strcmp(pnt_config->BC_Left,pnt_config->BCWallViscous)==0)
BC.c:	else if(strcmp(pnt_config->BC_Left,pnt_config->BCWallInviscid)==0)
BC.c:	else if((strcmp(pnt_config->BC_Left,pnt_config->BCInflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Left,pnt_config->BCInflowSubsonic)==0)||
BC.c:			(strcmp(pnt_config->BC_Left,pnt_config->BCInflowSupersonic)==0))
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_isentrop_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_super)
BC.c:	else if((strcmp(pnt_config->BC_Left,pnt_config->BCOutflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Left,pnt_config->BCOutflowSubsonic)==0))
BC.c:		if(pnt_config->flag_BC_option_outflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_rudy_sub)
BC.c:	else if(strcmp(pnt_config->BC_Left,pnt_config->BCFarfield)==0)
BC.c:	else if(strcmp(pnt_config->BC_Left,pnt_config->BCWallViscousIsothermal)==0)
BC.c:	else if(strcmp(pnt_config->BC_Left,pnt_config->BCManufacturedSolution)==0)
BC.c:		printf("SHOCK: Error: Rank %d hat links weder Randbedingung noch Nachbar!\n",pnt_config->MPI_rank);
BC.c:	if(strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscous)==0)
BC.c:	else if(strcmp(pnt_config->BC_Bottom,pnt_config->BCWallInviscid)==0)
BC.c:	else if((strcmp(pnt_config->BC_Bottom,pnt_config->BCInflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Bottom,pnt_config->BCInflowSubsonic)==0)||
BC.c:			(strcmp(pnt_config->BC_Bottom,pnt_config->BCInflowSupersonic)==0))
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_isentrop_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_super)
BC.c:	else if((strcmp(pnt_config->BC_Bottom,pnt_config->BCOutflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Bottom,pnt_config->BCOutflowSubsonic)==0))
BC.c:		if(pnt_config->flag_BC_option_outflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_rudy_sub)
BC.c:	else if(strcmp(pnt_config->BC_Bottom,pnt_config->BCFarfield)==0)
BC.c:	else if(strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscousIsothermal)==0)
BC.c:	else if(strcmp(pnt_config->BC_Bottom,pnt_config->BCManufacturedSolution)==0)
BC.c:		printf("SHOCK: Error: Rank %d hat unten weder Randbedingung noch Nachbar!\n",pnt_config->MPI_rank);
BC.c://	else if(strcmp(pnt_config->BC_Bottom,pnt_config->BCInflowSupersonic)==0)
BC.c:	if(strcmp(pnt_config->BC_Behind,pnt_config->BCWallViscous)==0)
BC.c:	else if(strcmp(pnt_config->BC_Behind,pnt_config->BCWallInviscid)==0)
BC.c:	else if((strcmp(pnt_config->BC_Behind,pnt_config->BCInflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Behind,pnt_config->BCInflowSubsonic)==0)||
BC.c:			(strcmp(pnt_config->BC_Behind,pnt_config->BCInflowSupersonic)==0))
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_isentrop_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_super)
BC.c:	else if((strcmp(pnt_config->BC_Behind,pnt_config->BCOutflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Behind,pnt_config->BCOutflowSubsonic)==0))
BC.c:		if(pnt_config->flag_BC_option_outflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_rudy_sub)
BC.c:	else if(strcmp(pnt_config->BC_Behind,pnt_config->BCFarfield)==0)
BC.c:	else if(strcmp(pnt_config->BC_Behind,pnt_config->BCWallViscousIsothermal)==0)
BC.c:	else if(strcmp(pnt_config->BC_Behind,pnt_config->BCManufacturedSolution)==0)
BC.c:		printf("SHOCK: Error: Rank %d hat hinten weder Randbedingung noch Nachbar!\n",pnt_config->MPI_rank);
BC.c:	if(strcmp(pnt_config->BC_Right,pnt_config->BCWallViscous)==0)
BC.c:	else if(strcmp(pnt_config->BC_Right,pnt_config->BCWallInviscid)==0)
BC.c:	else if((strcmp(pnt_config->BC_Right,pnt_config->BCInflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Right,pnt_config->BCInflowSubsonic)==0)||
BC.c:			(strcmp(pnt_config->BC_Right,pnt_config->BCInflowSupersonic)==0))
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_isentrop_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_super)
BC.c:	else if((strcmp(pnt_config->BC_Right,pnt_config->BCOutflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Right,pnt_config->BCOutflowSubsonic)==0))
BC.c:		if(pnt_config->flag_BC_option_outflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_rudy_sub)
BC.c:	else if(strcmp(pnt_config->BC_Right,pnt_config->BCFarfield)==0)
BC.c:	else if(strcmp(pnt_config->BC_Right,pnt_config->BCWallViscousIsothermal)==0)
BC.c:	else if(strcmp(pnt_config->BC_Right,pnt_config->BCManufacturedSolution)==0)
BC.c:		printf("SHOCK: Error: Rank %d hat rechts weder Randbedingung noch Nachbar!\n",pnt_config->MPI_rank);
BC.c:	if(strcmp(pnt_config->BC_Top,pnt_config->BCWallViscous)==0)
BC.c:	else if(strcmp(pnt_config->BC_Top,pnt_config->BCWallInviscid)==0)
BC.c:	else if((strcmp(pnt_config->BC_Top,pnt_config->BCInflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Top,pnt_config->BCInflowSubsonic)==0)||
BC.c:			(strcmp(pnt_config->BC_Top,pnt_config->BCInflowSupersonic)==0))
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_isentrop_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_super)
BC.c:	else if((strcmp(pnt_config->BC_Top,pnt_config->BCOutflow)==0)||
BC.c:			(strcmp(pnt_config->BC_Top,pnt_config->BCOutflowSubsonic)==0))
BC.c:		if(pnt_config->flag_BC_option_outflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_rudy_sub)
BC.c:	else if(strcmp(pnt_config->BC_Top,pnt_config->BCFarfield)==0)
BC.c:	else if(strcmp(pnt_config->BC_Top,pnt_config->BCWallViscousIsothermal)==0)
BC.c:	else if(strcmp(pnt_config->BC_Top,pnt_config->BCManufacturedSolution)==0)
BC.c:		printf("SHOCK: Error: Rank %d hat oben weder Randbedingung noch Nachbar!\n",pnt_config->MPI_rank);
BC.c:	if(strcmp(pnt_config->BC_InFront,pnt_config->BCWallViscous)==0)
BC.c:	else if(strcmp(pnt_config->BC_InFront,pnt_config->BCWallInviscid)==0)
BC.c:	else if((strcmp(pnt_config->BC_InFront,pnt_config->BCInflow)==0)||
BC.c:			(strcmp(pnt_config->BC_InFront,pnt_config->BCInflowSubsonic)==0)||
BC.c:			(strcmp(pnt_config->BC_InFront,pnt_config->BCInflowSupersonic)==0))
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_isentrop_sub)
BC.c:		if(pnt_config->flag_BC_option_inflow_normal_super)
BC.c:	else if((strcmp(pnt_config->BC_InFront,pnt_config->BCOutflow)==0)||
BC.c:			(strcmp(pnt_config->BC_InFront,pnt_config->BCOutflowSubsonic)==0))
BC.c:		if(pnt_config->flag_BC_option_outflow_normal_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_riemann_sub)
BC.c:		if(pnt_config->flag_BC_option_outflow_rudy_sub)
BC.c:	else if(strcmp(pnt_config->BC_InFront,pnt_config->BCFarfield)==0)
BC.c:	else if(strcmp(pnt_config->BC_InFront,pnt_config->BCWallViscousIsothermal)==0)
BC.c:	else if(strcmp(pnt_config->BC_InFront,pnt_config->BCManufacturedSolution)==0)
BC.c:		printf("SHOCK: Error: Rank %d hat vorne weder Randbedingung noch Nachbar!\n",pnt_config->MPI_rank);
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c://				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c://				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c://				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c://				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c://				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:			pow(pnt_config->rho_inflow,(pnt_config->gammaNumber-1.0))-
BC.c:			pow(pnt_config->rho_inflow,pnt_config->gammaNumber)/pnt_config->p_inflow*
BC.c:			(pnt_config->gammaNumber-1.0)/pnt_config->gammaNumber*
BC.c:			pnt_config->gammaNumber*pnt_config->machNumber*pnt_config->machNumber*
BC.c:			,1.0/(pnt_config->gammaNumber-1.0));
BC.c:			pnt_config->p_inflow*pow(pnt_U->rho[ijk]/pnt_config->rho_inflow,pnt_config->gammaNumber);
BC.c:			pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:	pnt_U->c[ijk]=sqrt(pnt_config->Upsilon*
BC.c:			pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
BC.c:	cinf=1.0/pnt_config->machNumber;
BC.c:	pnt_U->u[ijk] = 0.5*(pnt_U->u[ijkSymmetry]+pnt_config->u_inflow)+(cinf-cii)/(pnt_config->gammaNumber-1.);
BC.c:	pnt_U->v[ijk] = pnt_config->v_inflow;
BC.c:	pnt_U->w[ijk] = pnt_config->w_inflow;
BC.c:	d__1 = (0.5*(cii+cinf)+0.25*(pnt_config->gammaNumber-1.)*(pnt_config->u_inflow-pnt_U->u[ijkSymmetry]))/cinf;
BC.c:	d__2 = 2./(pnt_config->gammaNumber-1.);
BC.c:	pnt_U->rho[ijk]= pnt_config->rho_inflow*rrr;
BC.c:	d__2 = 2.*pnt_config->gammaNumber/(pnt_config->gammaNumber-1.);
BC.c:	pnt_U->p[ijk]= pnt_config->p_inflow*rrr;
BC.c:	pnt_U->c[ijk]=sqrt(pnt_config->Upsilon*
BC.c:			pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
BC.c:			pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:	pnt_U->u[ijk]=pnt_config->u_inflow;
BC.c:	pnt_U->v[ijk]=pnt_config->v_inflow;
BC.c:	pnt_U->w[ijk]=pnt_config->w_inflow;
BC.c:	pnt_U->p[ijk]=pnt_config->p_inflow;
BC.c:	pnt_U->rho[ijk]=pnt_config->rho_inflow;
BC.c:			pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:	pnt_U->c[ijk]=sqrt(pnt_config->Upsilon*
BC.c:			pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
BC.c:	pnt_U->p[ijk]=pnt_config->p_inflow;
BC.c:	pnt_U->rho[ijk]=pnt_config->rho_inflow;
BC.c:	pnt_U->u[ijk]=pnt_config->u_inflow;
BC.c:	pnt_U->v[ijk]=pnt_config->v_inflow;
BC.c:	pnt_U->w[ijk]=pnt_config->w_inflow;
BC.c:			pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:	pnt_U->c[ijk]=sqrt(pnt_config->Upsilon*
BC.c:			pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
BC.c:	pnt_U->T[ijk]=pnt_config->p_inflow/pnt_config->rho_inflow;
BC.c:	pnt_U->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U->p[ijk]/pnt_U->rho[ijk],1.5)/
BC.c:			(pnt_U->p[ijk]/pnt_U->rho[ijk]+pnt_config->SutherlandConstant));
BC.c:	pnt_U->p[ijk]=pnt_config->p_out;
BC.c:	cinf=1.0/pnt_config->machNumber;
BC.c:	pnt_U->u[ijk] = 0.5*(pnt_U->u[ijkSymmetry]+pnt_config->u_inflow)-(cinf-cii)/(pnt_config->gammaNumber-1.);
BC.c:	d__1 = (0.5*(cii+cinf)-0.25*(pnt_config->gammaNumber-1.)*(pnt_config->u_inflow-pnt_U->u[ijkSymmetry]))/cii;
BC.c:	d__2 = 2./(pnt_config->gammaNumber-1.);
BC.c:	d__2 = 2.*pnt_config->gammaNumber/(pnt_config->gammaNumber-1.);
BC.c:	pnt_U->c[ijk]=sqrt(pnt_config->Upsilon*
BC.c:			pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
BC.c:			pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:			(pnt_U_lastStep->p[ijk]+pnt_config->AlphaNonRef*pnt_config->numericalTau*pnt_config->p_out+
BC.c:			pnt_U_lastStep->rho[ijk]*pnt_U_lastStep->c[ijkSymmetry]*(pnt_U->u[ijk]-pnt_U_lastStep->u[ijk])/pnt_config->Upsilon)
BC.c:			/(1.0+pnt_config->AlphaNonRef*pnt_config->numericalTau);
BC.c:	//pnt_U->u[ijk]=-pnt_U->u[ijkSymmetry]+2.0*(pnt_config->IBC_MovingActualPosition-pnt_config->IBC_MovingLastPosition)/pnt_config->numericalTau;
BC.c:	pnt_U->u[ijk]=(pnt_config->IBC_MovingActualPosition-pnt_config->IBC_MovingLastPosition)/pnt_config->numericalTau;
BC.c:				pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:	//pnt_U->u[ijk]=-pnt_U->u[ijkSymmetry]+2.0*(pnt_config->IBC_MovingActualPosition-pnt_config->IBC_MovingLastPosition)/pnt_config->numericalTau;
BC.c:	pnt_U->u[ijk]=(pnt_config->IBC_MovingActualPosition-pnt_config->IBC_MovingLastPosition)/pnt_config->numericalTau;
BC.c:				pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:	pnt_U->c[ijk]=sqrt(pnt_config->Upsilon*pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
BC.c:	pnt_U->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U->p[ijk]/pnt_U->rho[ijk],1.5)/
BC.c:	                (pnt_U->p[ijk]/pnt_U->rho[ijk]+pnt_config->SutherlandConstant));
BC.c:    pnt_config->Gamma[ijk]=1.0/((pnt_config->gammaNumber-1.0)*pow(pnt_config->machNumber,2.0)*pnt_config->reynoldsNumber*prandtl_local);			
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				x_shock = 1./6. + pnt_mesh->y[ijk]/tan(60.*MY_PI/180.) + pnt_config->time_dim * u_shock / sin(60.*MY_PI/180.);
BC.c:				pnt_U->p[ijk]=pnt_config->p_inflow;
BC.c:				pnt_U->rho[ijk]=pnt_config->rho_inflow;
BC.c:				pnt_U->u[ijk]=pnt_config->u_inflow;
BC.c:				pnt_U->v[ijk]=pnt_config->v_inflow;
BC.c:				pnt_U->w[ijk]=pnt_config->w_inflow;
BC.c:						pnt_U->p[ijk]/pnt_U->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
BC.c:				pnt_U->c[ijk]=sqrt(pnt_config->Upsilon*
BC.c:						pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
BC.c:				pnt_U->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U->p[ijk]/pnt_U->rho[ijk],1.5)/
BC.c:						(pnt_U->p[ijk]/pnt_U->rho[ijk]+pnt_config->SutherlandConstant));
BC.c:    pnt_config->Gamma[ijk]=1.0/((pnt_config->gammaNumber-1.0)*pow(pnt_config->machNumber,2.0)*pnt_config->reynoldsNumber*prandtl_local);			
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jStartReal;
BC.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kStartReal;
BC.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		int_symmetryIndex=pnt_config->int_jEndReal;
BC.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			int_symmetryIndex=pnt_config->int_kEndReal;
BC.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
BC.c:	int_symmetryIndex=pnt_config->int_iEndReal;
BC.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:	int_symmetryIndex=pnt_config->int_iStartReal;
BC.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
BC.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
BC.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
BC.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
BC.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Export.c:	sprintf(actual_file,"SnapShotGC_%d.dat",pnt_config->MPI_rank);
Export.c:		fprintf(file0,"zone t='1', i= %d, j= %d, f=point \n",pnt_config->int_iMeshPointsGhostCells,pnt_config->int_jMeshPointsGhostCells);
Export.c:		fprintf(file0,"zone t='1', i= %d, j= %d, k= %d, f=point \n",pnt_config->int_iMeshPointsGhostCells,pnt_config->int_jMeshPointsGhostCells,pnt_config->int_kMeshPointsGhostCells);
Export.c:	for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Export.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Export.c:			for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Export.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Export.c://	FLT *buffer = calloc(pnt_config->int_iStartGhosts * pnt_config->int_jStartGhosts, sizeof(FLT));
Export.c:	sprintf(foldername,"%sMetric/",pnt_config->chr_folder);
Export.c:	if (pnt_config->MPI_rank==0)
Export.c:	MPI_Barrier(pnt_config->MPI_comm);
Export.c:	sprintf(actual_file,"%s/Metric/MeshMetric_Zone%d.dat",pnt_config->chr_folder,(pnt_config->MPI_rank+1));
Export.c:	fprintf(file0,"zone t='1', k= %d, j= %d, i= %d, f=point \n",pnt_config->int_kMeshPointsGhostCells,pnt_config->int_jMeshPointsGhostCells,pnt_config->int_iMeshPointsGhostCells);
Export.c:	for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Export.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Export.c:			for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Export.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Export.c://	sprintf(actual_file,"%s/Metric/MeshExtrapolate_Zone%d.dat",pnt_config->chr_folder,(pnt_config->MPI_rank+1));
Export.c://	fprintf(file0,"zone t='1', k= %d, j= %d, i= %d, f=point \n",pnt_config->int_kMeshPointsGhostCells_extrapolate,pnt_config->int_jMeshPointsGhostCells_extrapolate,pnt_config->int_iMeshPointsGhostCells_extrapolate);
Export.c://	for (k=pnt_config->int_kStartGhosts_extrapolate; k <= pnt_config->int_kEndGhosts_extrapolate; k++)
Export.c://		for (j=pnt_config->int_jStartGhosts_extrapolate; j <= pnt_config->int_jEndGhosts_extrapolate; j++)
Export.c://			for (i=pnt_config->int_iStartGhosts_extrapolate; i <= pnt_config->int_iEndGhosts_extrapolate; i++)
Export.c://				ijk=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Export.c:	FLT time[pnt_config->int_TotalIterations];
Export.c:	char sn[pnt_config->int_TotalIterations][33];
Export.c:	char solname[pnt_config->int_TotalIterations*32+1];  /* need an extra byte for the terminating 0 */
Export.c:	for(t=0;t<pnt_config->int_TotalIterations;t++)
Export.c:		time[t]=pnt_config->start_Time+(FLT)(t+1)*pnt_config->int_IterationsBetweenSamples*
Export.c:				(pnt_config->L0_dim*pnt_config->numericalTau/pnt_config->u0_dim);
Export.c:		x[0] = pnt_config->PressureHistory_x_P_real[p_index];
Export.c:		y[0] = pnt_config->PressureHistory_y_P_real[p_index];
Export.c:		z[0] = pnt_config->PressureHistory_z_P_real[p_index];
Export.c:		icelldim=pnt_config->int_meshDimensions;
Export.c:		   cg_open(pnt_config->chr_PressureHistoryPath,CG_MODE_WRITE,&index_file);
Export.c:		   cg_open(pnt_config->chr_PressureHistoryPath,CG_MODE_MODIFY,&index_file);
Export.c:	   if (pnt_config->int_meshDimensions==3)
Export.c:	for(t=0;t<pnt_config->int_TotalIterations;t++)
Export.c:		p[0] = pnt_config->PressureHistory_pressure[p_index][t];
Export.c:		   nsteps=pnt_config->int_TotalIterations;
Export.c:		   nuse=pnt_config->int_TotalIterations;
Export.c:		   idata[1]=pnt_config->int_TotalIterations;
Export.c:	sprintf(actual_file,"%sPressureHistory_Points_Iteration%d.dat",pnt_config->chr_folder,(pnt_config->int_actualIteration-1));
Export.c:				pnt_config->chr_MeshFile);
Export.c:			(double)pnt_config->PressureHistory_x_P_real[p_index],
Export.c:			(double)pnt_config->PressureHistory_y_P_real[p_index],
Export.c:			(double)pnt_config->PressureHistory_z_P_real[p_index],
Export.c:			pnt_config->int_TotalIterations);
Export.c:	for(t=0;t<pnt_config->int_TotalIterations;t++)
Export.c:				(double)pnt_config->PressureHistory_time[t],
Export.c:				(double)pnt_config->PressureHistory_pressure[p_index][t]);
Export.c:	sprintf(actual_file,"%sVelocityHistory_Points_Iteration%d.dat",pnt_config->chr_folder,(pnt_config->int_actualIteration-1));
Export.c:				pnt_config->chr_MeshFile);
Export.c:			(double)pnt_config->VelocityHistory_x_P_real[p_index],
Export.c:			(double)pnt_config->VelocityHistory_y_P_real[p_index],
Export.c:			(double)pnt_config->VelocityHistory_z_P_real[p_index],
Export.c:			pnt_config->int_TotalIterations);
Export.c:	for(t=0;t<pnt_config->int_TotalIterations;t++)
Export.c:				(double)pnt_config->VelocityHistory_time[t],
Export.c:				(double)pnt_config->VelocityHistory_VelocityX[p_index][t],
Export.c:				(double)pnt_config->VelocityHistory_VelocityY[p_index][t],
Export.c:				(double)pnt_config->VelocityHistory_VelocityZ[p_index][t]);
Export.c://	FLT *buffer = calloc(pnt_config->int_iStartGhosts * pnt_config->int_jStartGhosts, sizeof(FLT));
Export.c:	sprintf(actual_file,"%s/NAN-Export_Zone%d.dat",pnt_config->chr_folder,(pnt_config->MPI_rank+1));
Export.c:	fprintf(file0,"zone t='1', k= %d, j= %d, i= %d, f=point \n",pnt_config->int_kMeshPointsGhostCells,pnt_config->int_jMeshPointsGhostCells,pnt_config->int_iMeshPointsGhostCells);
Export.c:	for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Export.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Export.c:			for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Export.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	pnt_config->int_meshDimensions=MESHDIMENSIONS;
Functions.c:	if(abs(pnt_config->int_initializeType)!=1)
Functions.c:		pnt_config->time_dim=0;
Functions.c:		pnt_config->int_StartIteration=0;
Functions.c:	pnt_config->int_actualIteration=pnt_config->int_StartIteration;
Functions.c:	pnt_config->int_EndIteration=pnt_config->int_StartIteration+pnt_config->int_TotalIterations;
Functions.c:	pnt_config->int_iMeshPoints=pnt_config->zonesize[0];
Functions.c:	pnt_config->int_jMeshPoints=pnt_config->zonesize[1];
Functions.c:	pnt_config->int_iMeshPointsGhostCells=pnt_config->int_iMeshPoints+(pnt_config->int_SpaceOrder+1);
Functions.c:	pnt_config->int_jMeshPointsGhostCells=pnt_config->int_jMeshPoints+(pnt_config->int_SpaceOrder+1);
Functions.c:		pnt_config->int_kMeshPoints=1;
Functions.c:		pnt_config->int_kMeshPointsGhostCells=1;
Functions.c:		pnt_config->int_kMeshPoints=pnt_config->zonesize[2];
Functions.c:		pnt_config->int_kMeshPointsGhostCells=pnt_config->zonesize[2]+(pnt_config->int_SpaceOrder+1);
Functions.c:	pnt_config->int_iStartGhosts=0;
Functions.c:	pnt_config->int_jStartGhosts=0;
Functions.c:	pnt_config->int_kStartGhosts=0;
Functions.c:	pnt_config->int_iEndGhosts=pnt_config->int_iStartGhosts+pnt_config->int_iMeshPoints+pnt_config->int_SpaceOrder;
Functions.c:	pnt_config->int_jEndGhosts=pnt_config->int_jStartGhosts+pnt_config->int_jMeshPoints+pnt_config->int_SpaceOrder;
Functions.c:	pnt_config->int_kEndGhosts=pnt_config->int_kStartGhosts+pnt_config->int_kMeshPoints+pnt_config->int_SpaceOrder;
Functions.c:	pnt_config->int_iStartReal=(pnt_config->int_SpaceOrder-1)/2+1;
Functions.c:	pnt_config->int_jStartReal=(pnt_config->int_SpaceOrder-1)/2+1;
Functions.c:	pnt_config->int_kStartReal=(pnt_config->int_SpaceOrder-1)/2+1;
Functions.c:	pnt_config->int_iEndReal=pnt_config->int_iStartReal+pnt_config->int_iMeshPoints-1;
Functions.c:	pnt_config->int_jEndReal=pnt_config->int_jStartReal+pnt_config->int_jMeshPoints-1;
Functions.c:	pnt_config->int_kEndReal=pnt_config->int_kStartReal+pnt_config->int_kMeshPoints-1;
Functions.c:	pnt_config->int_iMid=(int)(0.5*(pnt_config->int_iEndGhosts+pnt_config->int_iStartGhosts));
Functions.c:	pnt_config->int_jMid=(int)(0.5*(pnt_config->int_jEndGhosts+pnt_config->int_jStartGhosts));
Functions.c:	pnt_config->int_kMid=(int)(0.5*(pnt_config->int_kEndGhosts+pnt_config->int_kStartGhosts));
Functions.c:	pnt_config->ijkMid=pnt_config->int_iMid*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_jMid*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kMid;
Functions.c:		pnt_config->int_kStartReal=0;
Functions.c:		pnt_config->int_kEndReal=0;
Functions.c:		pnt_config->int_kStartGhosts=0;
Functions.c:		pnt_config->int_kEndGhosts=0;
Functions.c:		pnt_config->int_kMid=0;
Functions.c:	pnt_config->int_kStartReal_original=pnt_config->int_kStartReal;
Functions.c:	pnt_config->int_kEndReal_original=pnt_config->int_kEndReal;
Functions.c:	pnt_config->int_iStartReal_extrapolate=pnt_config->int_iStartReal+1;
Functions.c:	pnt_config->int_jStartReal_extrapolate=pnt_config->int_jStartReal+1;
Functions.c:	pnt_config->int_kStartReal_extrapolate=pnt_config->int_kStartReal+1;
Functions.c:	pnt_config->int_iEndReal_extrapolate=pnt_config->int_iEndReal+1;
Functions.c:	pnt_config->int_jEndReal_extrapolate=pnt_config->int_jEndReal+1;
Functions.c:	pnt_config->int_kEndReal_extrapolate=pnt_config->int_kEndReal+1;
Functions.c:	pnt_config->int_iStartGhosts_extrapolate=pnt_config->int_iStartGhosts;
Functions.c:	pnt_config->int_jStartGhosts_extrapolate=pnt_config->int_jStartGhosts;
Functions.c:	pnt_config->int_kStartGhosts_extrapolate=pnt_config->int_kStartGhosts;
Functions.c:	pnt_config->int_iEndGhosts_extrapolate=pnt_config->int_iEndGhosts+2;
Functions.c:	pnt_config->int_jEndGhosts_extrapolate=pnt_config->int_jEndGhosts+2;
Functions.c:	pnt_config->int_kEndGhosts_extrapolate=pnt_config->int_kEndGhosts+2;
Functions.c:	pnt_config->int_iMeshPointsGhostCells_extrapolate=pnt_config->int_iMeshPointsGhostCells+2;
Functions.c:	pnt_config->int_jMeshPointsGhostCells_extrapolate=pnt_config->int_jMeshPointsGhostCells+2;
Functions.c:	pnt_config->int_kMeshPointsGhostCells_extrapolate=pnt_config->int_kMeshPointsGhostCells+2;
Functions.c:		pnt_config->int_kStartReal_extrapolate=0;
Functions.c:		pnt_config->int_kEndReal_extrapolate=0;
Functions.c:		pnt_config->int_kStartGhosts_extrapolate=0;
Functions.c:		pnt_config->int_kEndGhosts_extrapolate=0;
Functions.c:		pnt_config->int_kMeshPointsGhostCells_extrapolate=1;
Functions.c:    pnt_config->Gamma=(FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:                pnt_config->Gamma[ijk]=1.0/((pnt_config->gammaNumber-1.0)*pow(pnt_config->machNumber,2.0)*pnt_config->reynoldsNumber*pnt_config->prandtlNumber);
Functions.c:	//	pnt_config->bufferSendFlowLeft = (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:	//	pnt_config->bufferSendFlowRight= (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:	//	pnt_config->bufferSendFlowBottom = (FLT *)calloc(5*pnt_config->int_iMeshPoints * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:	//	pnt_config->bufferSendFlowTop= (FLT *)calloc(5*pnt_config->int_iMeshPoints * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:	//	pnt_config->bufferRecieveFlowLeft = (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:	//	pnt_config->bufferRecieveFlowRight= (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:	//	pnt_config->bufferRecieveFlowBottom = (FLT *)calloc(5*pnt_config->int_iMeshPoints * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:	//	pnt_config->bufferRecieveFlowTop= (FLT *)calloc(5*pnt_config->int_iMeshPoints * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPoints,sizeof(FLT));
Functions.c:		pnt_config->bufferSendMeshLeft = (FLT *)calloc(13*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:		pnt_config->bufferSendMeshRight = (FLT *)calloc(13*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:		pnt_config->bufferSendMeshBottom = (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:		pnt_config->bufferSendMeshTop = (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:		pnt_config->bufferRecieveMeshLeft = (FLT *)calloc(13*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:		pnt_config->bufferRecieveMeshRight = (FLT *)calloc(13*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:		pnt_config->bufferRecieveMeshBottom = (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:		pnt_config->bufferRecieveMeshTop = (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsLeft = (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsRight= (FLT *)calloc(4*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsBottom = (FLT *)calloc(4*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsTop= (FLT *)calloc(4*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsLeft = (FLT *)calloc(4*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsRight= (FLT *)calloc(4*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsBottom = (FLT *)calloc(4*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsTop= (FLT *)calloc(4*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsLeft = (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsRight= (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsBottom = (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsTop= (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsLeft = (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsRight= (FLT *)calloc(5*((pnt_config->int_SpaceOrder+1)/2) * pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsBottom = (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsTop= (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2)*pnt_config->int_kMeshPointsGhostCells,sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsBehind = (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c:			pnt_config->bufferSendFlowWithGhostsInFront= (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsBehind = (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveFlowWithGhostsInFront= (FLT *)calloc(5*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c:			pnt_config->bufferSendMeshBehind = (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c:			pnt_config->bufferSendMeshInFront = (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveMeshBehind = (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c:			pnt_config->bufferRecieveMeshInFront= (FLT *)calloc(13*pnt_config->int_iMeshPointsGhostCells * pnt_config->int_jMeshPointsGhostCells * ((pnt_config->int_SpaceOrder+1)/2),sizeof(FLT));
Functions.c://		pnt_config->MPI_rankNeighbours= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_tag= (long *)calloc(pnt_config->NumberInterfaces, sizeof(long));
Functions.c:		for(i=0;i<pnt_config->NumberInterfaces;i++)
Functions.c:			if(pnt_config->MPI_rank<=pnt_config->MPI_rankNeighbours[i])
Functions.c:				pnt_config->MPI_tag[i]=0;
Functions.c:				for(k=0;k<2*pnt_config->int_meshDimensions;k++)
Functions.c:					pnt_config->MPI_tag[i]+=(pnt_config->RangeOfInterface[i][k]*MPI_tag_factor[k]);
Functions.c:				while(pnt_config->MPI_tag[i]>value_MPI_TAG_UB)
Functions.c:					pnt_config->MPI_tag[i]=pnt_config->MPI_tag[i]-value_MPI_TAG_UB;
Functions.c:				pnt_config->MPI_tag[i]=0;
Functions.c:				for(k=0;k<2*pnt_config->int_meshDimensions;k++)
Functions.c:					pnt_config->MPI_tag[i]+=(pnt_config->DonorRangeOfInterface[i][k]*MPI_tag_factor[k]);
Functions.c:				while(pnt_config->MPI_tag[i]>value_MPI_TAG_UB)
Functions.c:					pnt_config->MPI_tag[i]=pnt_config->MPI_tag[i]-value_MPI_TAG_UB;
Functions.c:				if ((pnt_config->MPI_tag[i]==pnt_config->MPI_tag[l])&&(pnt_config->MPI_rankNeighbours[i]==pnt_config->MPI_rankNeighbours[l]))
Functions.c:					printf("tag1/2: rank %d - partner %d - TAG: %ld\n",pnt_config->MPI_rank,pnt_config->MPI_rankNeighbours[l],pnt_config->MPI_tag[l]);
Functions.c:		pnt_config->MPI_intTransformation_IMax= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_JMax= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_KMax= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_IMax_Mesh= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_JMax_Mesh= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_KMax_Mesh= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_I0_I= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_I0_J= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_I0_K= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_J0_I= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_J0_J= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_J0_K= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_K0_I= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_K0_J= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_flag_K0_K= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_Offset_I= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_Offset_J= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_Offset_K= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_Offset_I_Ghosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_Offset_J_Ghosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransformation_Offset_K_Ghosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_dblTransformation_xi_x= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_xi_y= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_xi_z= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_eta_x= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_eta_y= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_eta_z= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_zeta_x= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_zeta_y= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		pnt_config->MPI_dblTransformation_zeta_z= (FLT *)calloc(pnt_config->NumberInterfaces, sizeof(FLT));
Functions.c:		//		pnt_config->MPI_charNeighbours= (char **)calloc(pnt_config->NumberInterfaces, sizeof(char*));
Functions.c:		for(i=0;i<pnt_config->NumberInterfaces;i++)
Functions.c:		//			pnt_config->RankNeighbours[i]= (int *)calloc(pnt_config->int_meshDimensions+1, sizeof(int));
Functions.c:		//			pnt_config->MPI_charNeighbours[i]= (char *)calloc(30, sizeof(char));
Functions.c:			pnt_config->MPI_dblTransformation_xi_x[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_y[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_z[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_x[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_y[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_z[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_zeta_x[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_zeta_y[i]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_zeta_z[i]=1.0;
Functions.c:		pnt_config->MPI_intTransferSizeMesh=(int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intTransferSizeFlow_WithGhosts=(int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_SendBufferMesh= (FLT **)calloc(pnt_config->NumberInterfaces, sizeof(FLT *));
Functions.c:		pnt_config->MPI_RecieveBufferMesh= (FLT **)calloc(pnt_config->NumberInterfaces, sizeof(FLT *));
Functions.c:		pnt_config->MPI_SendBufferFlowWithGhosts= (FLT **)calloc(pnt_config->NumberInterfaces, sizeof(FLT *));
Functions.c:		pnt_config->MPI_RecieveBufferFlowWithGhosts= (FLT **)calloc(pnt_config->NumberInterfaces, sizeof(FLT *));
Functions.c:		pnt_config->MPI_intIStartSend= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intIEndSend= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJStartSend= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJEndSend= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKStartSend= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKEndSend= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intIStartRecieve= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intIEndRecieve= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJStartRecieve= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJEndRecieve= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKStartRecieve= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKEndRecieve= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intIStartSend_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intIEndSend_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJStartSend_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJEndSend_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKStartSend_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKEndSend_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intIStartRecieve_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intIEndRecieve_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJStartRecieve_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intJEndRecieve_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKStartRecieve_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		pnt_config->MPI_intKEndRecieve_WithGhosts= (int *)calloc(pnt_config->NumberInterfaces, sizeof(int));
Functions.c:		for(i=0;i<pnt_config->NumberInterfaces;i++)
Functions.c:				if(i==pnt_config->InterfaceNeighbourLeft)
Functions.c:	//				pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshI;
Functions.c:	//				pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshI;
Functions.c:	//				pnt_config->MPI_SendBufferFlow[i]=pnt_config->bufferSendFlowI;
Functions.c:	//				pnt_config->MPI_RecieveBufferFlow[i]=pnt_config->bufferRecieveFlowI;
Functions.c:	//				pnt_config->MPI_SendBufferViscid[i]=pnt_config->bufferSendViscidI;
Functions.c:	//				pnt_config->MPI_RecieveBufferViscid[i]=pnt_config->bufferRecieveViscidI;
Functions.c:					pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshLeft;
Functions.c:					pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshLeft;
Functions.c:					pnt_config->MPI_SendBufferFlowWithGhosts[i]=pnt_config->bufferSendFlowWithGhostsLeft;
Functions.c:					pnt_config->MPI_RecieveBufferFlowWithGhosts[i]=pnt_config->bufferRecieveFlowWithGhostsLeft;
Functions.c:				   pnt_config->MPI_intIStartSend[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndSend[i]=pnt_config->int_iStartReal+((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intJStartSend[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndSend[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intKStartSend[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndSend[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartRecieve[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndRecieve[i]=pnt_config->int_iStartReal-1;
Functions.c:				   pnt_config->MPI_intJStartRecieve[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndRecieve[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intKStartRecieve[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndRecieve[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend_WithGhosts[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndSend_WithGhosts[i]=pnt_config->int_iStartReal+((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intJStartSend_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndSend_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartSend_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndSend_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:				   pnt_config->MPI_intIStartRecieve_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndRecieve_WithGhosts[i]=pnt_config->int_iStartReal-1;
Functions.c:				   pnt_config->MPI_intJStartRecieve_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndRecieve_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:					   pnt_config->MPI_intKStartSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:							   (pnt_config->int_SpaceOrder+1)/2*4*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*5*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:				   pnt_config->MPI_intTransferSizeMesh[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*13*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					if(i==pnt_config->InterfaceNeighbourRight)
Functions.c:	//				pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshI;
Functions.c:	//				pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshI;
Functions.c:	//				pnt_config->MPI_SendBufferFlow[i]=pnt_config->bufferSendFlowI;
Functions.c:	//				pnt_config->MPI_RecieveBufferFlow[i]=pnt_config->bufferRecieveFlowI;
Functions.c:	//				pnt_config->MPI_SendBufferViscid[i]=pnt_config->bufferSendViscidI;
Functions.c:	//				pnt_config->MPI_RecieveBufferViscid[i]=pnt_config->bufferRecieveViscidI;
Functions.c:					pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshRight;
Functions.c:					pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshRight;
Functions.c:					pnt_config->MPI_SendBufferFlowWithGhosts[i]=pnt_config->bufferSendFlowWithGhostsRight;
Functions.c:					pnt_config->MPI_RecieveBufferFlowWithGhosts[i]=pnt_config->bufferRecieveFlowWithGhostsRight;
Functions.c:				   pnt_config->MPI_intIStartSend[i]=pnt_config->int_iEndReal-((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intIEndSend[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intJStartSend[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndSend[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intKStartSend[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndSend[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartRecieve[i]=pnt_config->int_iEndReal+1;
Functions.c:				   pnt_config->MPI_intIEndRecieve[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartRecieve[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndRecieve[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intKStartRecieve[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndRecieve[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend_WithGhosts[i]=pnt_config->int_iEndReal-((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intIEndSend_WithGhosts[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intJStartSend_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndSend_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartSend_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndSend_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:				   pnt_config->MPI_intIStartRecieve_WithGhosts[i]=pnt_config->int_iEndReal+1;
Functions.c:				   pnt_config->MPI_intIEndRecieve_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartRecieve_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndRecieve_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:					   pnt_config->MPI_intKStartSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:					   					   (pnt_config->int_SpaceOrder+1)/2*4*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:					   					   (pnt_config->int_SpaceOrder+1)/2*5*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:				   pnt_config->MPI_intTransferSizeMesh[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*13*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					if(i==pnt_config->InterfaceNeighbourBottom)
Functions.c:	//				pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshJ;
Functions.c:	//				pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshJ;
Functions.c:	//				pnt_config->MPI_SendBufferFlow[i]=pnt_config->bufferSendFlowJ;
Functions.c:	//				pnt_config->MPI_RecieveBufferFlow[i]=pnt_config->bufferRecieveFlowJ;
Functions.c:	//				pnt_config->MPI_SendBufferViscid[i]=pnt_config->bufferSendViscidJ;
Functions.c:	//				pnt_config->MPI_RecieveBufferViscid[i]=pnt_config->bufferRecieveViscidJ;
Functions.c:					pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshBottom;
Functions.c:					pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshBottom;
Functions.c:					pnt_config->MPI_SendBufferFlowWithGhosts[i]=pnt_config->bufferSendFlowWithGhostsBottom;
Functions.c:					pnt_config->MPI_RecieveBufferFlowWithGhosts[i]=pnt_config->bufferRecieveFlowWithGhostsBottom;
Functions.c:				   pnt_config->MPI_intJStartSend[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndSend[i]=pnt_config->int_jStartReal+((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intIStartSend[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndSend[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intKStartSend[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndSend[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intJStartRecieve[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndRecieve[i]=pnt_config->int_jStartReal-1;
Functions.c:				   pnt_config->MPI_intIStartRecieve[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndRecieve[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intKStartRecieve[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndRecieve[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndSend_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartSend_WithGhosts[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndSend_WithGhosts[i]=pnt_config->int_jStartReal+((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intKStartSend_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndSend_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:				   pnt_config->MPI_intIStartRecieve_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndRecieve_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartRecieve_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndRecieve_WithGhosts[i]=pnt_config->int_jStartReal-1;
Functions.c:				   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:					   pnt_config->MPI_intKStartSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:							   (pnt_config->int_SpaceOrder+1)/2*4*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:							   (pnt_config->int_SpaceOrder+1)/2*5*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:				   pnt_config->MPI_intTransferSizeMesh[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*13*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					if(i==pnt_config->InterfaceNeighbourTop)
Functions.c:	//				pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshJ;
Functions.c:	//				pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshJ;
Functions.c:	//				pnt_config->MPI_SendBufferFlow[i]=pnt_config->bufferSendFlowJ;
Functions.c:	//				pnt_config->MPI_RecieveBufferFlow[i]=pnt_config->bufferRecieveFlowJ;
Functions.c:	//				pnt_config->MPI_SendBufferViscid[i]=pnt_config->bufferSendViscidJ;
Functions.c:	//				pnt_config->MPI_RecieveBufferViscid[i]=pnt_config->bufferRecieveViscidJ;
Functions.c:					pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshTop;
Functions.c:					pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshTop;
Functions.c:					pnt_config->MPI_SendBufferFlowWithGhosts[i]=pnt_config->bufferSendFlowWithGhostsTop;
Functions.c:					pnt_config->MPI_RecieveBufferFlowWithGhosts[i]=pnt_config->bufferRecieveFlowWithGhostsTop;
Functions.c:				   pnt_config->MPI_intJStartSend[i]=pnt_config->int_jEndReal-((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intJEndSend[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndSend[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intKStartSend[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndSend[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intJStartRecieve[i]=pnt_config->int_jEndReal+1;
Functions.c:				   pnt_config->MPI_intJEndRecieve[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intIStartRecieve[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndRecieve[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intKStartRecieve[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndRecieve[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndSend_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartSend_WithGhosts[i]=pnt_config->int_jEndReal-((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intJEndSend_WithGhosts[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intKStartSend_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndSend_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:				   pnt_config->MPI_intIStartRecieve_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndRecieve_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartRecieve_WithGhosts[i]=pnt_config->int_jEndReal+1;
Functions.c:				   pnt_config->MPI_intJEndRecieve_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:					   pnt_config->MPI_intKStartSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndSend_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=0;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:							   (pnt_config->int_SpaceOrder+1)/2*4*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:							   (pnt_config->int_SpaceOrder+1)/2*5*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:				   pnt_config->MPI_intTransferSizeMesh[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*13*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:					if(i==pnt_config->InterfaceNeighbourBehind)
Functions.c:	//				pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshK;
Functions.c:	//				pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshK;
Functions.c:	//				pnt_config->MPI_SendBufferFlow[i]=pnt_config->bufferSendFlowK;
Functions.c:	//				pnt_config->MPI_RecieveBufferFlow[i]=pnt_config->bufferRecieveFlowK;
Functions.c:	//				pnt_config->MPI_SendBufferViscid[i]=pnt_config->bufferSendViscidK;
Functions.c:	//				pnt_config->MPI_RecieveBufferViscid[i]=pnt_config->bufferRecieveViscidK;
Functions.c:					pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshBehind;
Functions.c:					pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshBehind;
Functions.c:					pnt_config->MPI_SendBufferFlowWithGhosts[i]=pnt_config->bufferSendFlowWithGhostsBehind;
Functions.c:					pnt_config->MPI_RecieveBufferFlowWithGhosts[i]=pnt_config->bufferRecieveFlowWithGhostsBehind;
Functions.c:				   pnt_config->MPI_intKStartSend[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndSend[i]=pnt_config->int_kStartReal+((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intIStartSend[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndSend[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intJStartSend[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndSend[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intKStartRecieve[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndRecieve[i]=pnt_config->int_kStartReal-1;
Functions.c:				   pnt_config->MPI_intIStartRecieve[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndRecieve[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intJStartRecieve[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndRecieve[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndSend_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartSend_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndSend_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartSend_WithGhosts[i]=pnt_config->int_kStartReal;
Functions.c:				   pnt_config->MPI_intKEndSend_WithGhosts[i]=pnt_config->int_kStartReal+((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intIStartRecieve_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndRecieve_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartRecieve_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndRecieve_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=pnt_config->int_kStartGhosts;
Functions.c:				   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=pnt_config->int_kStartReal-1;
Functions.c:				   pnt_config->MPI_intTransferSizeMesh[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*13*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_iMeshPointsGhostCells;
Functions.c:				   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*5*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_iMeshPointsGhostCells;
Functions.c:					if(i==pnt_config->InterfaceNeighbourInFront)
Functions.c:	//				pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshK;
Functions.c:	//				pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshK;
Functions.c:	//				pnt_config->MPI_SendBufferFlow[i]=pnt_config->bufferSendFlowK;
Functions.c:	//				pnt_config->MPI_RecieveBufferFlow[i]=pnt_config->bufferRecieveFlowK;
Functions.c:	//				pnt_config->MPI_SendBufferViscid[i]=pnt_config->bufferSendViscidK;
Functions.c:	//				pnt_config->MPI_RecieveBufferViscid[i]=pnt_config->bufferRecieveViscidK;
Functions.c:					pnt_config->MPI_SendBufferMesh[i]=pnt_config->bufferSendMeshInFront;
Functions.c:					pnt_config->MPI_RecieveBufferMesh[i]=pnt_config->bufferRecieveMeshInFront;
Functions.c:					pnt_config->MPI_SendBufferFlowWithGhosts[i]=pnt_config->bufferSendFlowWithGhostsInFront;
Functions.c:					pnt_config->MPI_RecieveBufferFlowWithGhosts[i]=pnt_config->bufferRecieveFlowWithGhostsInFront;
Functions.c:				   pnt_config->MPI_intKStartSend[i]=pnt_config->int_kEndReal-((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intKEndSend[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndSend[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intJStartSend[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndSend[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intKStartRecieve[i]=pnt_config->int_kEndReal+1;
Functions.c:				   pnt_config->MPI_intKEndRecieve[i]=pnt_config->int_kEndGhosts;
Functions.c:				   pnt_config->MPI_intIStartRecieve[i]=pnt_config->int_iStartReal;
Functions.c:				   pnt_config->MPI_intIEndRecieve[i]=pnt_config->int_iEndReal;
Functions.c:				   pnt_config->MPI_intJStartRecieve[i]=pnt_config->int_jStartReal;
Functions.c:				   pnt_config->MPI_intJEndRecieve[i]=pnt_config->int_jEndReal;
Functions.c:				   pnt_config->MPI_intIStartSend_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndSend_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartSend_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndSend_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartSend_WithGhosts[i]=pnt_config->int_kEndReal-((pnt_config->int_SpaceOrder+1)/2-1);
Functions.c:				   pnt_config->MPI_intKEndSend_WithGhosts[i]=pnt_config->int_kEndReal;
Functions.c:				   pnt_config->MPI_intIStartRecieve_WithGhosts[i]=pnt_config->int_iStartGhosts;
Functions.c:				   pnt_config->MPI_intIEndRecieve_WithGhosts[i]=pnt_config->int_iEndGhosts;
Functions.c:				   pnt_config->MPI_intJStartRecieve_WithGhosts[i]=pnt_config->int_jStartGhosts;
Functions.c:				   pnt_config->MPI_intJEndRecieve_WithGhosts[i]=pnt_config->int_jEndGhosts;
Functions.c:				   pnt_config->MPI_intKStartRecieve_WithGhosts[i]=pnt_config->int_kEndReal+1;
Functions.c:				   pnt_config->MPI_intKEndRecieve_WithGhosts[i]=pnt_config->int_kEndGhosts;
Functions.c:				   pnt_config->MPI_intTransferSizeMesh[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*13*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_iMeshPointsGhostCells;
Functions.c:				   pnt_config->MPI_intTransferSizeFlow_WithGhosts[i]=
Functions.c:						   (pnt_config->int_SpaceOrder+1)/2*5*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_iMeshPointsGhostCells;
Functions.c://	printf("SHOCK: Rank: %d (%s)",pnt_config->MPI_rank,pnt_config->Zonename);
Functions.c://	printf(": Left: %d, index: %d",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourLeft],pnt_config->InterfaceNeighbourLeft);
Functions.c://	printf(": Right: %d, index: %d ",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourRight],pnt_config->InterfaceNeighbourRight);
Functions.c://	printf(": Bottom: %d, index: %d",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourBottom],pnt_config->InterfaceNeighbourBottom);
Functions.c://	printf(": Top: %d, index: %d",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourTop],pnt_config->InterfaceNeighbourTop);
Functions.c://	printf(": Behind: %d, index: %d ",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourBehind],pnt_config->InterfaceNeighbourBehind);
Functions.c://	printf(": InFront: %d, index: %d\n",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourInFront],pnt_config->InterfaceNeighbourInFront);
Functions.c://	for (i=0;i<pnt_config->NumberInterfaces;i++)
Functions.c://				pnt_config->MPI_rank,
Functions.c://				 pnt_config->MPI_rankNeighbours[i],i,
Functions.c://				pnt_config->TransformMatrixOfInterface[i][0],
Functions.c://				pnt_config->TransformMatrixOfInterface[i][1],
Functions.c://				pnt_config->TransformMatrixOfInterface[i][2],
Functions.c://				pnt_config->Donorname[i]);
Functions.c:	if(pnt_config->MPI_rank==0){printf("SHOCK: Speicherallokierung fertig!\n");}
Functions.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c://				ijk=k*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells+j*pnt_config->int_iMeshPointsGhostCells+i;
Functions.c:				i2=i-pnt_config->int_iStartReal;
Functions.c:				j2=j-pnt_config->int_jStartReal;
Functions.c:				k2=k-pnt_config->int_kStartReal;
Functions.c:				ijk2=k2*pnt_config->int_jMeshPoints*pnt_config->int_iMeshPoints+j2*pnt_config->int_iMeshPoints+i2;
Functions.c:	if (pnt_config->int_initializeType==0)
Functions.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: Neu-Initialisierung des Rechengebietes fertig!\n");}
Functions.c:			(abs(pnt_config->int_initializeType)==1)
Functions.c:		for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:			for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:				for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	//				ijk=k*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells+j*pnt_config->int_iMeshPointsGhostCells+i;
Functions.c:					i2=i-pnt_config->int_iStartReal;
Functions.c:					j2=j-pnt_config->int_jStartReal;
Functions.c:					k2=k-pnt_config->int_kStartReal;
Functions.c:					ijk2=k2*pnt_config->int_jMeshPoints*pnt_config->int_iMeshPoints+j2*pnt_config->int_iMeshPoints+i2;
Functions.c:						if((strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscous)==0)&&(pnt_config->int_initializeType==-1))
Functions.c:						if((strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscous)==0)&&(pnt_config->int_initializeType==-1))
Functions.c:											pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: Import der Ergebnisse fertig! (Iteration: %d, Time: %g)\n",
Functions.c:				pnt_config->int_StartIteration,
Functions.c:				(double)pnt_config->start_Time);}
Functions.c:	if(pnt_config->int_initializeType==1)
Functions.c:		if((pnt_config->flag_IBC==1)&&(pnt_config->flag_IBC_Moving==1))
Functions.c:			pnt_config->IBC_MovingLastPosition=IBC_getActualPosition(pnt_config);
Functions.c:			pnt_config->IBC_MovingActualPosition=IBC_getActualPosition(pnt_config);
Functions.c:	pnt_U_backup1->rho = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup1->u = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup1->v = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup1->w = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup1->p = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup1->e = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup2->rho = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup2->u = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup2->v = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup2->w = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup2->p = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_U_backup2->e = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	for(i=0;i<pnt_config->NumberInterfaces;i++)
Functions.c:		free(pnt_config->Donorname[i]);
Functions.c:		free(pnt_config->Interfacename[i]);
Functions.c:		free(pnt_config->TransformMatrixOfInterface[i]);
Functions.c:		free(pnt_config->RangeOfInterface[i]);
Functions.c:		free(pnt_config->DonorRangeOfInterface[i]);
Functions.c:		free(pnt_config->RotationCenter[i]);
Functions.c:		free(pnt_config->RotationAngle[i]);
Functions.c:		free(pnt_config->Translation[i]);
Functions.c:	free(pnt_config->Donorname);
Functions.c:	free(pnt_config->Interfacename);
Functions.c:	free(pnt_config->TransformMatrixOfInterface);
Functions.c:	free(pnt_config->RangeOfInterface);
Functions.c:	free(pnt_config->DonorRangeOfInterface);
Functions.c:	free(pnt_config->RotationCenter);
Functions.c:	free(pnt_config->RotationAngle);
Functions.c:	free(pnt_config->Translation);
Functions.c:	free(pnt_config->bufferSendFlowWithGhostsLeft);
Functions.c:	free(pnt_config->bufferSendFlowWithGhostsRight);
Functions.c:	free(pnt_config->bufferSendFlowWithGhostsBottom);
Functions.c:	free(pnt_config->bufferSendFlowWithGhostsTop);
Functions.c:	free(pnt_config->bufferRecieveFlowWithGhostsLeft);
Functions.c:	free(pnt_config->bufferRecieveFlowWithGhostsRight);
Functions.c:	free(pnt_config->bufferRecieveFlowWithGhostsBottom);
Functions.c:	free(pnt_config->bufferRecieveFlowWithGhostsTop);
Functions.c:	free(pnt_config->bufferSendMeshLeft);
Functions.c:	free(pnt_config->bufferSendMeshRight);
Functions.c:	free(pnt_config->bufferSendMeshBottom);
Functions.c:	free(pnt_config->bufferSendMeshTop);
Functions.c:	free(pnt_config->bufferRecieveMeshLeft);
Functions.c:	free(pnt_config->bufferRecieveMeshRight);
Functions.c:	free(pnt_config->bufferRecieveMeshBottom);
Functions.c:	free(pnt_config->bufferRecieveMeshTop);
Functions.c:		free(pnt_config->bufferSendFlowWithGhostsBehind);
Functions.c:		free(pnt_config->bufferSendFlowWithGhostsInFront);
Functions.c:		free(pnt_config->bufferRecieveFlowWithGhostsBehind);
Functions.c:		free(pnt_config->bufferRecieveFlowWithGhostsInFront);
Functions.c:		free(pnt_config->bufferSendMeshBehind);
Functions.c:		free(pnt_config->bufferSendMeshInFront);
Functions.c:		free(pnt_config->bufferRecieveMeshBehind);
Functions.c:		free(pnt_config->bufferRecieveMeshInFront);
Functions.c:	free(pnt_config->MPI_intTransferSizeMesh);
Functions.c:	free(pnt_config->MPI_intTransferSizeFlow_WithGhosts);
Functions.c:	free(pnt_config->MPI_SendBufferMesh);
Functions.c:	free(pnt_config->MPI_RecieveBufferMesh);
Functions.c:	free(pnt_config->MPI_SendBufferFlowWithGhosts);
Functions.c:	free(pnt_config->MPI_RecieveBufferFlowWithGhosts);
Functions.c:	free(pnt_config->MPI_intIStartSend);
Functions.c:	free(pnt_config->MPI_intIEndSend);
Functions.c:	free(pnt_config->MPI_intJStartSend);
Functions.c:	free(pnt_config->MPI_intJEndSend);
Functions.c:	free(pnt_config->MPI_intKStartSend);
Functions.c:	free(pnt_config->MPI_intKEndSend);
Functions.c:	free(pnt_config->MPI_intIStartRecieve);
Functions.c:	free(pnt_config->MPI_intIEndRecieve);
Functions.c:	free(pnt_config->MPI_intJStartRecieve);
Functions.c:	free(pnt_config->MPI_intJEndRecieve);
Functions.c:	free(pnt_config->MPI_intKStartRecieve);
Functions.c:	free(pnt_config->MPI_intKEndRecieve);
Functions.c:	free(pnt_config->MPI_intIStartSend_WithGhosts);
Functions.c:	free(pnt_config->MPI_intIEndSend_WithGhosts);
Functions.c:	free(pnt_config->MPI_intJStartSend_WithGhosts);
Functions.c:	free(pnt_config->MPI_intJEndSend_WithGhosts);
Functions.c:	free(pnt_config->MPI_intKStartSend_WithGhosts);
Functions.c:	free(pnt_config->MPI_intKEndSend_WithGhosts);
Functions.c:	free(pnt_config->MPI_intIStartRecieve_WithGhosts);
Functions.c:	free(pnt_config->MPI_intIEndRecieve_WithGhosts);
Functions.c:	free(pnt_config->MPI_intJStartRecieve_WithGhosts);
Functions.c:	free(pnt_config->MPI_intJEndRecieve_WithGhosts);
Functions.c:	free(pnt_config->MPI_intKStartRecieve_WithGhosts);
Functions.c:	free(pnt_config->MPI_intKEndRecieve_WithGhosts);
Functions.c:	free(pnt_config->MPI_rankNeighbours);
Functions.c:	free(pnt_config->MPI_dblTransformation_xi_x);
Functions.c:	free(pnt_config->MPI_dblTransformation_xi_y);
Functions.c:	free(pnt_config->MPI_dblTransformation_xi_z);
Functions.c:	free(pnt_config->MPI_dblTransformation_eta_x);
Functions.c:	free(pnt_config->MPI_dblTransformation_eta_y);
Functions.c:	free(pnt_config->MPI_dblTransformation_eta_z);
Functions.c:	free(pnt_config->MPI_dblTransformation_zeta_x);
Functions.c:	free(pnt_config->MPI_dblTransformation_zeta_y);
Functions.c:	free(pnt_config->MPI_dblTransformation_zeta_z);
Functions.c:	free(pnt_config->MPI_intTransformation_IMax);
Functions.c:	free(pnt_config->MPI_intTransformation_JMax);
Functions.c:	free(pnt_config->MPI_intTransformation_KMax);
Functions.c:	free(pnt_config->MPI_intTransformation_IMax_Mesh);
Functions.c:	free(pnt_config->MPI_intTransformation_JMax_Mesh);
Functions.c:	free(pnt_config->MPI_intTransformation_KMax_Mesh);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_I0_I);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_I0_J);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_I0_K);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_J0_I);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_J0_J);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_J0_K);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_K0_I);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_K0_J);
Functions.c:	free(pnt_config->MPI_intTransformation_flag_K0_K);
Functions.c:	free(pnt_config->MPI_intTransformation_Offset_I);
Functions.c:	free(pnt_config->MPI_intTransformation_Offset_J);
Functions.c:	free(pnt_config->MPI_intTransformation_Offset_K);
Functions.c:	free(pnt_config->MPI_intTransformation_Offset_I_Ghosts);
Functions.c:	free(pnt_config->MPI_intTransformation_Offset_J_Ghosts);
Functions.c:	free(pnt_config->MPI_intTransformation_Offset_K_Ghosts);
Functions.c:	pnt_mesh->BC_Corrector = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->x = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->y = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->z = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->x_extrapolate = (FLT *)calloc((pnt_config->int_iMeshPointsGhostCells+2)*(pnt_config->int_jMeshPointsGhostCells+2)*(pnt_config->int_kMeshPointsGhostCells+2), sizeof(FLT ));
Functions.c:	pnt_mesh->y_extrapolate = (FLT *)calloc((pnt_config->int_iMeshPointsGhostCells+2)*(pnt_config->int_jMeshPointsGhostCells+2)*(pnt_config->int_kMeshPointsGhostCells+2), sizeof(FLT ));
Functions.c:	pnt_mesh->z_extrapolate = (FLT *)calloc((pnt_config->int_iMeshPointsGhostCells+2)*(pnt_config->int_jMeshPointsGhostCells+2)*(pnt_config->int_kMeshPointsGhostCells+2), sizeof(FLT ));
Functions.c:	pnt_mesh->xi_x = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->xi_y = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->xi_z = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->eta_x = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->eta_y = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->eta_z = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->zeta_x = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->zeta_y = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->zeta_z = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->jacobian = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->flag_IBC = (int *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(int ));
Functions.c:	pnt_mesh->flag_IBC_last = (int *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(int ));
Functions.c:	if(pnt_config->flag_PressureWaves==1)
Functions.c:		pnt_mesh->flag_PressureWaves = (int *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(int ));
Functions.c:		pnt_mesh->startPressure_PressureWaves = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:		pnt_mesh->startDensity_PressureWaves = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->xiFluss_Faktor = (FLT *)calloc(30*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->etaFluss_Faktor = (FLT *)calloc(30*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_mesh->zetaFluss_Faktor = (FLT *)calloc(30*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->rho = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->u = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->v = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->w = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->p = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->e = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->theta1 = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->theta2 = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->theta3 = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->c = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->gradRho = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->T = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->mue = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->Lambda2 = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->MachNumber = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->u_xi = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->u_eta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->v_xi = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->v_eta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->T_xi = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctU->T_eta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:		pnt_strctU->u_zeta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:		pnt_strctU->v_zeta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:		pnt_strctU->T_zeta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:		pnt_strctU->w_xi = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:		pnt_strctU->w_eta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:		pnt_strctU->w_zeta = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctFilm->rho = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->u = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->v = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->w = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->p = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->gradRho = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->Lambda2 = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->MachNumber = (FLT *)calloc(pnt_config->int_Samples*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints, sizeof(FLT ));
Functions.c:	pnt_strctFilm->time_dim = (FLT *)calloc(pnt_config->int_Samples, sizeof(FLT ));
Functions.c:	pnt_strctFlux->Mass = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctFlux->xiMomentum = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctFlux->etaMomentum = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctFlux->zetaMomentum = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	pnt_strctFlux->Energy = (FLT *)calloc(pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells, sizeof(FLT ));
Functions.c:	if(pnt_config->flag_PressureWaves==1)
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				pnt_U_lastStep->rho[ijk]=pnt_config->InitializeValues_rho0;
Functions.c:				pnt_U_lastStep->u[ijk]=pnt_config->u_inflow;
Functions.c:				pnt_U_lastStep->v[ijk]=pnt_config->v_inflow;
Functions.c:				pnt_U_lastStep->w[ijk]=pnt_config->w_inflow;
Functions.c:				pnt_U_lastStep->p[ijk]=pnt_config->InitializeValues_p0;
Functions.c:						pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				x_start=pnt_config->LaminarBoundary_xStart;
Functions.c:					ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					T_ad=T_unendl*(1+(pnt_config->gammaNumber-1.0)/2.0*pow(pnt_config->machNumber,2.0));
Functions.c:					grenzschicht_dicke_x=4.9*sqrt((pnt_mesh->x[ijk]-x_start)/pnt_config->reynoldsNumber);
Functions.c://							printf(">%f %f %f< ",pnt_config->gammaNumber,pnt_config->machNumber,T_ad);
Functions.c:								((pnt_config->gammaNumber-1.0)/2.0*pow(pnt_config->machNumber,2.0)*u*(1.0-u)+u*(T_unendl-T_ad)/T_unendl+T_ad));
Functions.c:						pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				switch (pnt_config->int_specialInitializeType)
Functions.c:					if(pnt_mesh->x[ijk]<=pnt_config->InitializeValues_xBorder){gebiet=0;} //L
Functions.c:					if(pnt_mesh->x[ijk]>pnt_config->InitializeValues_xBorder){gebiet=1;} //R
Functions.c:							p=pnt_config->InitializeValues_p0;
Functions.c:							rho=pnt_config->InitializeValues_rho0;
Functions.c:							u=pnt_config->InitializeValues_u0;
Functions.c:							p=pnt_config->InitializeValues_p1;
Functions.c:							rho=pnt_config->InitializeValues_rho1;
Functions.c:							u=pnt_config->InitializeValues_u1;
Functions.c:						rho=pnt_config->InitializeValues_rho1;
Functions.c:						p=pnt_config->InitializeValues_p1;
Functions.c:						rho=pnt_config->InitializeValues_rho0;
Functions.c:						p=pnt_config->InitializeValues_p0;
Functions.c:					if((pnt_mesh->y[ijk]>pnt_config->IBC_yKolben)||(pnt_mesh->x[ijk]<100.0))
Functions.c:							rho=pnt_config->InitializeValues_rho1;
Functions.c:							p=pnt_config->InitializeValues_p1;
Functions.c:							rho=pnt_config->InitializeValues_rho0;
Functions.c:							p=pnt_config->InitializeValues_p0;
Functions.c:					p=pnt_config->InitializeValues_p0;
Functions.c:					rho=pnt_config->InitializeValues_rho0;
Functions.c:					u=pnt_config->u_inflow;
Functions.c:					v=pnt_config->v_inflow;
Functions.c:					e=(0.5*((u*u)+(v*v))+p/rho/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:					if(strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscous)==0)
Functions.c:						ij0k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+0*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:						T_ad=T_unendl*(1+(pnt_config->gammaNumber-1.0)/2.0*pow(pnt_config->machNumber,2.0));
Functions.c:						eta=delta_y/(4.9*pnt_mesh->x[ijk]/sqrt(pnt_config->reynoldsNumber*pnt_mesh->x[ijk]));
Functions.c://							printf(">%f %f %f< ",pnt_config->gammaNumber,pnt_config->machNumber,T_ad);
Functions.c:							rho=p/(T_unendl*((pnt_config->gammaNumber-1.0)/2.0*pow(pnt_config->machNumber,2.0)*u*(1.0-u)+u*(T_unendl-T_ad)/T_unendl+T_ad));
Functions.c:					p=(e-0.5*((u*u)+(v*v)))*rho*(pnt_config->gammaNumber-1.0)/pnt_config->Upsilon;					
Functions.c:							p=pnt_config->InitializeValues_p0;
Functions.c:							rho=pnt_config->InitializeValues_rho0;
Functions.c:							p=pnt_config->InitializeValues_p1;
Functions.c:							rho=pnt_config->InitializeValues_rho1;
Functions.c:					p=pnt_config->InitializeValues_p0;
Functions.c:					rho=pnt_config->InitializeValues_rho0;
Functions.c:					theta1=pnt_config->u_inflow;
Functions.c:					theta2=pnt_config->v_inflow;
Functions.c:					u=pnt_config->u_inflow;
Functions.c:					v=pnt_config->v_inflow;
Functions.c:				pnt_U_lastStep->e[ijk]=(0.5*((pnt_U_lastStep->u[ijk]*pnt_U_lastStep->u[ijk])+(pnt_U_lastStep->v[ijk]*pnt_U_lastStep->v[ijk])+(pnt_U_lastStep->w[ijk]*pnt_U_lastStep->w[ijk]))+pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c://			pnt_config->int_meshDimensions,
Functions.c://			pnt_config->MPI_intArray_NoCPUs,
Functions.c://			pnt_config->MPI_intArray_PeriodicBC,
Functions.c://			pnt_config->MPI_int_ReorderCPUs,
Functions.c://			&pnt_config->MPI_comm);
Functions.c://			pnt_config->MPI_comm,
Functions.c://			&pnt_config->MPI_size);
Functions.c://			pnt_config->MPI_comm,
Functions.c://			&pnt_config->MPI_rank);
Functions.c://			pnt_config->MPI_comm,
Functions.c://			pnt_config->MPI_rank,
Functions.c://			pnt_config->int_meshDimensions,
Functions.c://			pnt_config->MPI_coordinates);
Functions.c://    MPI_Cart_shift(pnt_config->MPI_comm, 0, 1, &pnt_config->InterfaceNeighbourLeft[0], &pnt_config->InterfaceNeighbourRight[0]);
Functions.c://    MPI_Cart_shift(pnt_config->MPI_comm, 1, -1, &pnt_config->InterfaceNeighbourTop[0], &pnt_config->InterfaceNeighbourBottom[0]);
Functions.c://    MPI_Cart_shift(pnt_config->MPI_comm, 2, -1, &pnt_config->InterfaceNeighbourInFront[0], &pnt_config->InterfaceNeighbourBehind[0]);
Functions.c:////    printf( "CPU %d of %d is ready!\n", pnt_config->MPI_rank+1, pnt_config->MPI_size);
Functions.c://    pnt_config->MPI_datatype = MPI_FLT;
Functions.c://    MPI_Type_size(pnt_config->MPI_datatype, &pnt_config->MPI_intMyDatatypeSize);
Functions.c://    if (pnt_config->int_meshDimensions>=1)
Functions.c://    	pnt_config->MPI_intArray_Subsize[0]=pnt_config->int_iMeshPoints;
Functions.c://    	pnt_config->MPI_intArray_Size[0]=pnt_config->int_iMeshPoints*pnt_config->MPI_intArray_NoCPUs[0];
Functions.c://    	pnt_config->MPI_intArray_StartPoint[0]=pnt_config->MPI_coordinates[0]*pnt_config->MPI_intArray_Subsize[0];
Functions.c://    if (pnt_config->int_meshDimensions>=2)
Functions.c://    	pnt_config->MPI_intArray_Subsize[1]=pnt_config->int_jMeshPoints;
Functions.c://    	pnt_config->MPI_intArray_Size[1]=pnt_config->int_jMeshPoints*pnt_config->MPI_intArray_NoCPUs[1];
Functions.c://    	pnt_config->MPI_intArray_StartPoint[1]=pnt_config->MPI_coordinates[1]*pnt_config->MPI_intArray_Subsize[1];
Functions.c://    if (pnt_config->int_meshDimensions>=3)
Functions.c://    	pnt_config->MPI_intArray_Subsize[2]=pnt_config->int_kMeshPoints;
Functions.c://        pnt_config->MPI_intArray_Size[2]=pnt_config->int_kMeshPoints*pnt_config->MPI_intArray_NoCPUs[2];
Functions.c://        pnt_config->MPI_intArray_StartPoint[2]=pnt_config->MPI_coordinates[2]*pnt_config->MPI_intArray_Subsize[2];
Functions.c://    		pnt_config->int_meshDimensions,
Functions.c://    		pnt_config->MPI_intArray_Size,
Functions.c://    		pnt_config->MPI_intArray_Subsize,
Functions.c://    		pnt_config->MPI_intArray_StartPoint,
Functions.c://    		pnt_config->MPI_datatype,
Functions.c://    		&pnt_config->MPI_subarray);
Functions.c://    MPI_Type_commit(&pnt_config->MPI_subarray);
Functions.c:	pnt_config->c0_dim=sqrt(pnt_config->gammaNumber*pnt_config->gasConstantNumber*pnt_config->T0_dim);
Functions.c:	pnt_config->u0_dim=pnt_config->c0_dim*pnt_config->machNumber;
Functions.c:	pnt_config->AlphaNonRef=0.25*pnt_config->L0_dim/pnt_config->u0_dim;
Functions.c:	pnt_config->IBC_yKolben=40.0;
Functions.c:	pnt_config->IBC_alphaKolben=27.5;
Functions.c://	pnt_config->IBC_alphaKolben=14.0;
Functions.c:	pnt_config->IBC_MovingLastPosition=IBC_getActualPosition(pnt_config);
Functions.c:	pnt_config->IBC_MovingActualPosition=IBC_getActualPosition(pnt_config);
Functions.c:	pnt_config->is_avrg=0.0;
Functions.c:	pnt_config->is_avrg_counter=0.0;
Functions.c:	pnt_config->is_maximum=0.0;
Functions.c:	pnt_config->is_minimum=999.0;
Functions.c:	sprintf(pnt_config->BCFarfield,"BCFarfield");
Functions.c:	sprintf(pnt_config->BCInflow,"BCInflow");
Functions.c:	sprintf(pnt_config->BCOutflow,"BCOutflow");
Functions.c:	sprintf(pnt_config->BCOutflowSubsonic,"BCOutflowSubsonic");
Functions.c:	sprintf(pnt_config->BCWallInviscid,"BCWallInviscid");
Functions.c:	sprintf(pnt_config->BCWallViscous,"BCWallViscous");
Functions.c:	sprintf(pnt_config->BCInflowSupersonic,"BCInflowSupersonic");
Functions.c:	sprintf(pnt_config->BCInflowSubsonic,"BCInflowSubsonic");
Functions.c:	sprintf(pnt_config->BCWallViscousIsothermal,"BCWallViscousIsothermal");
Functions.c:	sprintf(pnt_config->BC_Left,"-");
Functions.c:	sprintf(pnt_config->BC_Right,"-");
Functions.c:	sprintf(pnt_config->BC_Top,"-");
Functions.c:	sprintf(pnt_config->BC_Bottom,"-");
Functions.c:	sprintf(pnt_config->BC_Behind,"-");
Functions.c:	sprintf(pnt_config->BC_InFront,"-");
Functions.c:	pnt_config->flag_NAN=0;
Functions.c:	pnt_config->start_Time=0.0;
Functions.c:	pnt_config->time_dim=0.0;
Functions.c:	pnt_config->time_dim_lastAction=0.0;
Functions.c:	pnt_config->int_IterationsBetweenSamples=(int)((pnt_config->int_TotalIterations-pnt_config->int_StartSampling)/pnt_config->int_Samples);
Functions.c:	if (pnt_config->int_IterationsBetweenSamples<1)
Functions.c:		pnt_config->int_IterationsBetweenSamples=1000000;
Functions.c:	pnt_config->int_StartIteration=0;
Functions.c:	pnt_config->int_actualIteration=pnt_config->int_StartIteration;
Functions.c:	pnt_config->comm_time=0.0;
Functions.c:	pnt_config->int_conservationEquations=5;
Functions.c:    	pnt_config->wenoEpsilon=1.e-6;
Functions.c://    	pnt_config->wenoEpsilon=1.e-10;
Functions.c:    	pnt_config->wenoEpsilon=1.e-6;
Functions.c:	pnt_config->wenoEpsilon=10.*pow(MY_FLT_MIN,0.5);
Functions.c:	pnt_config->wenoP=2.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W9[0]=1./126.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W9[1]=10./63.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W9[2]=10./21.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W9[3]=20./63.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W9[4]=5./126.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W5[0]=1./10.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W5[1]=3./5.;
Functions.c:	pnt_config->wenoOptimalerKoeffizient_W5[2]=3./10.;
Functions.c:	pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient = (FLT *)calloc((SPACEORDER+1), sizeof(FLT ));
Functions.c:	pnt_config->ZD_Interpolation_Koeffizient = (FLT *)calloc((SPACEORDER+1), sizeof(FLT ));
Functions.c:	pnt_config->ZD_Ableitung_Koeffizient = (FLT *)calloc((SPACEORDER+2), sizeof(FLT ));
Functions.c:	pnt_config->ZD_ZweiteAbleitung_Koeffizient = (FLT *)calloc((SPACEORDER+2), sizeof(FLT ));
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[0] =       1. / 1260.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[1] =     -23. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[2] =     127. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[3] =    -473. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[4] =    1627. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[5] =    1627. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[6] =    -473. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[7] =     127. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[8] =     -23. / 2520.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[9] =       1. / 1260.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[0] =     -3. /  9450.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[1] =    351. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[2] =  -2649. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[3] =  15351. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[4] =-110649. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[5] = 110649. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[6] = -15351. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[7] =   2649. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[8] =   -351. / 75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[9] =      3. /  9450.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[0]=   -1./1260.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[1]=   25./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[2]= -150./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[3]=  600./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[4]=-2100./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[5]=    0.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[6]= 2100./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[7]= -600./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[8]=  150./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[9]=  -25./2520.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[10]=   1./1260.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[0]=      24./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[1]=    -375./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[2]=    3000./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[3]=  -18000./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[4]=  126000./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[5]= -221298./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[6]=  126000./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[7]=  -18000./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[8]=    3000./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[9]=    -375./75600.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[10]=     24./75600.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[0] =   1. / 60.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[1] =  -8. / 60.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[2] =  37. / 60.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[3] =  37. / 60.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[4] =  -8. / 60.;
Functions.c:		pnt_config->ZD_Interpolation_Koeffizient[5] =   1. / 60.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[0] =    -1. / 90.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[1] =    25. / 180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[2] =  -245. / 180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[3] =   245. / 180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[4] =   -25. / 180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[5] =     1. / 90.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[0]=    -1./60.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[1]=     3./20.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[2]=    -3./4.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[3]=     0.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[4]=     3./4.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[5]=    -3./20.;
Functions.c:		pnt_config->ZD_Ableitung_Koeffizient[6]=     1./60.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[0]=      2./180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[1]=    -27./180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[2]=    270./180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[3]=   -490./180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[4]=    270./180;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[5]=    -27./180.;
Functions.c:		pnt_config->ZD_ZweiteAbleitung_Koeffizient[6]=      2./180.;
Functions.c:	pnt_config->deltaXi=1.0;
Functions.c:	pnt_config->deltaEta=1.0;
Functions.c:	pnt_config->deltaZeta=1.0;
Functions.c:	if(pnt_config->int_TimeOrder==4)
Functions.c:		pnt_config->RK_U_n_Faktor[0]=1.;
Functions.c:		pnt_config->RK_U_n_Faktor[1]=1.;
Functions.c:		pnt_config->RK_U_n_Faktor[2]=1.;
Functions.c:		pnt_config->RK_U_n_Faktor[3]=1.;
Functions.c:		pnt_config->RK_U_ABC_Faktor[0]=0.;
Functions.c:		pnt_config->RK_U_ABC_Faktor[1]=0.;
Functions.c:		pnt_config->RK_U_ABC_Faktor[2]=0.;
Functions.c:		pnt_config->RK_U_ABC_Faktor[3]=0.;
Functions.c:		pnt_config->RK_Q_Faktor[0]=0.5;
Functions.c:		pnt_config->RK_Q_Faktor[1]=0.5;
Functions.c:		pnt_config->RK_Q_Faktor[2]=1.;
Functions.c:		pnt_config->RK_Q_Faktor[3]=1./6.;
Functions.c:		pnt_config->RK_Q_Summe_Flag[0]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Flag[1]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Flag[2]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Flag[3]=1./6.;
Functions.c:		pnt_config->RK_Q_Summe_Faktor[0]=1.;
Functions.c:		pnt_config->RK_Q_Summe_Faktor[1]=2.;
Functions.c:		pnt_config->RK_Q_Summe_Faktor[2]=2.;
Functions.c:		pnt_config->RK_Q_Summe_Faktor[3]=0.;
Functions.c:	if(pnt_config->int_TimeOrder==3)
Functions.c:		pnt_config->RK_U_n_Faktor[0]=1.;
Functions.c:		pnt_config->RK_U_n_Faktor[1]=3./4.;
Functions.c:		pnt_config->RK_U_n_Faktor[2]=1./3.;
Functions.c:		pnt_config->RK_U_ABC_Faktor[0]=0.;
Functions.c:		pnt_config->RK_U_ABC_Faktor[1]=1./4.;
Functions.c:		pnt_config->RK_U_ABC_Faktor[2]=2./3.;
Functions.c:		pnt_config->RK_Q_Faktor[0]=1.;
Functions.c:		pnt_config->RK_Q_Faktor[1]=1./4.;
Functions.c:		pnt_config->RK_Q_Faktor[2]=2./3.;
Functions.c:		pnt_config->RK_Q_Summe_Flag[0]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Flag[1]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Flag[2]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Faktor[0]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Faktor[1]=0.;
Functions.c:		pnt_config->RK_Q_Summe_Faktor[2]=0.;
Functions.c:	pnt_config->Upsilon=1.0/(pnt_config->gammaNumber*pow(pnt_config->machNumber,2.0));
Functions.c:	pnt_config->Psi=1.0/pnt_config->reynoldsNumber;
Functions.c:	pnt_config->SutherlandConstant=100.4/pnt_config->T0_dim;
Functions.c:	pnt_config->flag_reinitialization=0;
Functions.c:	pnt_config->ManufacturedSolution_L2_last=999.;
Functions.c:	pnt_config->ManufacturedSolution_L2_counter=0;
Functions.c:	pnt_config->all_L2_norm_rho=0;
Functions.c:	pnt_config->all_L2_norm_pressure=0;
Functions.c:	pnt_config->all_Linf_norm_rho=0;
Functions.c:	pnt_config->all_Linf_norm_pressure=0;
Functions.c:	if(pnt_config->flag_constantZValues==1)
Functions.c:	if((pnt_config->flag_IBC_Moving==1)&&(pnt_config->flag_IBC==1))
Functions.c:		pnt_config->IBC_MovingLastPosition=pnt_config->IBC_MovingActualPosition;
Functions.c:		pnt_config->IBC_MovingActualPosition=IBC_getActualPosition(pnt_config);
Functions.c:	if(pnt_config->flag_PressureWaves==1)
Functions.c:	for(int_RKSchritt=0;int_RKSchritt<pnt_config->int_TimeOrder;int_RKSchritt++)
Functions.c:		if (pnt_config->flag_Inviscid!=1)
Functions.c:		/*if(pnt_config->flag_IBC==1)
Functions.c://		if(pnt_config->flag_PressureWaves==1)
Functions.c:		if(pnt_config->flag_IBC==1)
Functions.c:		if(pnt_config->flag_IBC==1)
Functions.c:			if(pnt_config->flag_IBC==1)
Functions.c:		if (pnt_config->flag_Inviscid!=1)
Functions.c:			if(pnt_config->flag_IBC==1)
Functions.c:			if(pnt_config->flag_IBC==1)
Functions.c:				if(pnt_config->flag_IBC==1)
Functions.c:		if(pnt_config->flag_rotation_symmetric==1)
Functions.c:		if(pnt_config->flag_ManufacturedSolution==1)
Functions.c:		for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:			for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:				for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					pnt_Q_sum->Mass[ijk]=pnt_Q_sum->Mass[ijk]+pnt_config->RK_Q_Summe_Faktor[int_RKSchritt]*pnt_Q->Mass[ijk];
Functions.c:					pnt_Q_sum->xiMomentum[ijk]=pnt_Q_sum->xiMomentum[ijk]+pnt_config->RK_Q_Summe_Faktor[int_RKSchritt]*pnt_Q->xiMomentum[ijk];
Functions.c:					pnt_Q_sum->etaMomentum[ijk]=pnt_Q_sum->etaMomentum[ijk]+pnt_config->RK_Q_Summe_Faktor[int_RKSchritt]*pnt_Q->etaMomentum[ijk];
Functions.c:					pnt_Q_sum->zetaMomentum[ijk]=pnt_Q_sum->zetaMomentum[ijk]+pnt_config->RK_Q_Summe_Faktor[int_RKSchritt]*pnt_Q->zetaMomentum[ijk];
Functions.c:					pnt_Q_sum->Energy[ijk]=pnt_Q_sum->Energy[ijk]+pnt_config->RK_Q_Summe_Faktor[int_RKSchritt]*pnt_Q->Energy[ijk];
Functions.c:											pnt_config->RK_U_n_Faktor[int_RKSchritt]*pnt_U_lastStep->rho[ijk]+
Functions.c:											pnt_config->RK_U_ABC_Faktor[int_RKSchritt]*pnt_U_RK->rho[ijk]+
Functions.c:											pnt_config->numericalTau/pnt_mesh->jacobian[ijk]*
Functions.c:											pnt_config->RK_Q_Faktor[int_RKSchritt]*pnt_Q->Mass[ijk]+
Functions.c:											pnt_config->RK_Q_Summe_Flag[int_RKSchritt]*pnt_Q_sum->Mass[ijk]
Functions.c:											(pnt_config->RK_U_n_Faktor[int_RKSchritt]*pnt_U_lastStep->u[ijk]*pnt_U_lastStep->rho[ijk]+
Functions.c:											pnt_config->RK_U_ABC_Faktor[int_RKSchritt]*pnt_U_RK->u[ijk]*rho_letzterRK_Schritt+
Functions.c:											pnt_config->numericalTau/pnt_mesh->jacobian[ijk]*
Functions.c:											pnt_config->RK_Q_Faktor[int_RKSchritt]*pnt_Q->xiMomentum[ijk]+
Functions.c:											pnt_config->RK_Q_Summe_Flag[int_RKSchritt]*pnt_Q_sum->xiMomentum[ijk]
Functions.c:											(pnt_config->RK_U_n_Faktor[int_RKSchritt]*pnt_U_lastStep->v[ijk]*pnt_U_lastStep->rho[ijk]+
Functions.c:											pnt_config->RK_U_ABC_Faktor[int_RKSchritt]*pnt_U_RK->v[ijk]*rho_letzterRK_Schritt+
Functions.c:											pnt_config->numericalTau/pnt_mesh->jacobian[ijk]*
Functions.c:											pnt_config->RK_Q_Faktor[int_RKSchritt]*pnt_Q->etaMomentum[ijk]+
Functions.c:											pnt_config->RK_Q_Summe_Flag[int_RKSchritt]*pnt_Q_sum->etaMomentum[ijk]
Functions.c:												(pnt_config->RK_U_n_Faktor[int_RKSchritt]*pnt_U_lastStep->w[ijk]*pnt_U_lastStep->rho[ijk]+
Functions.c:												pnt_config->RK_U_ABC_Faktor[int_RKSchritt]*pnt_U_RK->w[ijk]*rho_letzterRK_Schritt+
Functions.c:												pnt_config->numericalTau/pnt_mesh->jacobian[ijk]*
Functions.c:												pnt_config->RK_Q_Faktor[int_RKSchritt]*pnt_Q->zetaMomentum[ijk]+
Functions.c:												pnt_config->RK_Q_Summe_Flag[int_RKSchritt]*pnt_Q_sum->zetaMomentum[ijk]
Functions.c:											(pnt_config->RK_U_n_Faktor[int_RKSchritt]*pnt_U_lastStep->e[ijk]*pnt_U_lastStep->rho[ijk]+
Functions.c:											pnt_config->RK_U_ABC_Faktor[int_RKSchritt]*pnt_U_RK->e[ijk]*rho_letzterRK_Schritt+
Functions.c:											pnt_config->numericalTau/pnt_mesh->jacobian[ijk]*
Functions.c:											pnt_config->RK_Q_Faktor[int_RKSchritt]*pnt_Q->Energy[ijk]+
Functions.c:											pnt_config->RK_Q_Summe_Flag[int_RKSchritt]*pnt_Q_sum->Energy[ijk]
Functions.c:		if(pnt_config->flag_IBC==1)
Functions.c:	if(pnt_config->flag_constantZValues==1)
Functions.c:	if(pnt_config->flag_PressureWaves==1)
Functions.c:		for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:			for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:				for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:								(pnt_config->gammaNumber-1)/
Functions.c:								pnt_config->Upsilon*
Functions.c:								(pnt_config->gammaNumber-1)/
Functions.c:								pnt_config->Upsilon*
Functions.c:							sqrt(pnt_config->Upsilon*
Functions.c:							pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
Functions.c:					pnt_U->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U->p[ijk]/pnt_U->rho[ijk],1.5)/
Functions.c:							(pnt_U->p[ijk]/pnt_U->rho[ijk]+pnt_config->SutherlandConstant));
Functions.c:					if(pnt_config->flag_ManufacturedSolution==1)
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	pnt_Film->time_dim[pnt_config->int_actualSample]=pnt_config->time_dim;
Functions.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:			for (k=pnt_config->int_kStartReal_original; k <= pnt_config->int_kEndReal_original; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkFilm=(i-pnt_config->int_iStartReal)*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints+(j-pnt_config->int_jStartReal)*pnt_config->int_kMeshPoints+(k-pnt_config->int_kStartReal_original)+
Functions.c:						pnt_config->int_actualSample*pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints;
Functions.c:					if(pnt_config->flag_IBC_Moving==1){pnt_Film->u[ijkFilm]=//pnt_config->IBC_MovingSpeed/pnt_config->u0_dim;
Functions.c:						(pnt_config->IBC_MovingActualPosition-pnt_config->IBC_MovingLastPosition)/pnt_config->numericalTau ;}
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				pnt_mesh->x[ijk]=buffer[ijk13]+pnt_config->Translation[interface][0];
Functions.c:				pnt_mesh->y[ijk]=buffer[ijk13]+pnt_config->Translation[interface][1];
Functions.c:				pnt_mesh->z[ijk]=buffer[ijk13]+pnt_config->Translation[interface][2];
Functions.c:				pnt_mesh->xi_x[ijk]=pnt_config->MPI_dblTransformation_xi_x[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->xi_y[ijk]=pnt_config->MPI_dblTransformation_xi_y[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->xi_z[ijk]=pnt_config->MPI_dblTransformation_xi_z[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->eta_x[ijk]=pnt_config->MPI_dblTransformation_eta_x[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->eta_y[ijk]=pnt_config->MPI_dblTransformation_eta_y[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->eta_z[ijk]=pnt_config->MPI_dblTransformation_eta_z[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->zeta_x[ijk]=pnt_config->MPI_dblTransformation_zeta_x[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->zeta_y[ijk]=pnt_config->MPI_dblTransformation_zeta_y[interface]*buffer[ijk13];
Functions.c:				pnt_mesh->zeta_z[ijk]=pnt_config->MPI_dblTransformation_zeta_z[interface]*buffer[ijk13];
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		(pnt_config->int_iStartReal+((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		(pnt_config->int_iEndReal-((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->MPI_intSizeITransfer,
Functions.c://		pnt_config->InterfaceNeighbourRight[0],
Functions.c://		pnt_config->MPI_intSizeITransfer,
Functions.c://		pnt_config->InterfaceNeighbourLeft[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://		pnt_config->MPI_intSizeITransfer,
Functions.c://		pnt_config->InterfaceNeighbourLeft[0],
Functions.c://		pnt_config->MPI_intSizeITransfer,
Functions.c://		pnt_config->InterfaceNeighbourRight[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://	if (pnt_config->InterfaceNeighbourLeft[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iStartGhosts,
Functions.c://		pnt_config->int_iStartReal-1,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://	if (pnt_config->InterfaceNeighbourRight[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iEndReal+1,
Functions.c://		pnt_config->int_iEndGhosts,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		(pnt_config->int_jStartReal+((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		(pnt_config->int_jEndReal-((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->MPI_intSizeJTransfer,
Functions.c://		pnt_config->InterfaceNeighbourTop[0],
Functions.c://		pnt_config->MPI_intSizeJTransfer,
Functions.c://		pnt_config->InterfaceNeighbourBottom[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://		pnt_config->MPI_intSizeJTransfer,
Functions.c://		pnt_config->InterfaceNeighbourBottom[0],
Functions.c://		pnt_config->MPI_intSizeJTransfer,
Functions.c://		pnt_config->InterfaceNeighbourTop[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://	if (pnt_config->InterfaceNeighbourBottom[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jStartGhosts,
Functions.c://		pnt_config->int_jStartReal-1,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://	if (pnt_config->InterfaceNeighbourTop[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jEndReal+1,
Functions.c://		pnt_config->int_jEndGhosts,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://	if(pnt_config->int_kMeshPoints>1)
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			pnt_config->int_kStartReal,
Functions.c://			(pnt_config->int_kStartReal+((pnt_config->int_order+1)/2-1)));
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			(pnt_config->int_kEndReal-((pnt_config->int_order+1)/2-1)),
Functions.c://			pnt_config->int_kEndReal);
Functions.c://			pnt_config->MPI_intSizeKTransfer,
Functions.c://			pnt_config->InterfaceNeighbourInFront[0],
Functions.c://			pnt_config->MPI_intSizeKTransfer,
Functions.c://			pnt_config->InterfaceNeighbourBehind[0],
Functions.c://			pnt_config->MPI_comm,
Functions.c://			&pnt_config->MPI_status);
Functions.c://			pnt_config->MPI_intSizeKTransfer,
Functions.c://			pnt_config->InterfaceNeighbourBehind[0],
Functions.c://			pnt_config->MPI_intSizeKTransfer,
Functions.c://			pnt_config->InterfaceNeighbourInFront[0],
Functions.c://			pnt_config->MPI_comm,
Functions.c://			&pnt_config->MPI_status);
Functions.c://		if (pnt_config->InterfaceNeighbourBehind[0]!=MPI_PROC_NULL)
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			pnt_config->int_kStartGhosts,
Functions.c://			pnt_config->int_kStartReal-1);
Functions.c://		if (pnt_config->InterfaceNeighbourInFront[0]!=MPI_PROC_NULL)
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			pnt_config->int_kEndReal+1,
Functions.c://			pnt_config->int_kEndGhosts);
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		(pnt_config->int_iStartReal+((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		(pnt_config->int_iEndReal-((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->MPI_intSizeITransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourRight[0],
Functions.c://		pnt_config->MPI_intSizeITransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourLeft[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://		pnt_config->MPI_intSizeITransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourLeft[0],
Functions.c://		pnt_config->MPI_intSizeITransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourRight[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://	if (pnt_config->InterfaceNeighbourLeft[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iStartGhosts,
Functions.c://		pnt_config->int_iStartReal-1,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://	if (pnt_config->InterfaceNeighbourRight[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iEndReal+1,
Functions.c://		pnt_config->int_iEndGhosts,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jStartReal,
Functions.c://		(pnt_config->int_jStartReal+((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		(pnt_config->int_jEndReal-((pnt_config->int_order+1)/2-1)),
Functions.c://		pnt_config->int_jEndReal,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://		pnt_config->MPI_intSizeJTransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourTop[0],
Functions.c://		pnt_config->MPI_intSizeJTransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourBottom[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://		pnt_config->MPI_intSizeJTransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourBottom[0],
Functions.c://		pnt_config->MPI_intSizeJTransferViscid,
Functions.c://		pnt_config->InterfaceNeighbourTop[0],
Functions.c://		pnt_config->MPI_comm,
Functions.c://		&pnt_config->MPI_status);
Functions.c://	if (pnt_config->InterfaceNeighbourBottom[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jStartGhosts,
Functions.c://		pnt_config->int_jStartReal-1,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://	if (pnt_config->InterfaceNeighbourTop[0]!=MPI_PROC_NULL)
Functions.c://		pnt_config->int_iStartReal,
Functions.c://		pnt_config->int_iEndReal,
Functions.c://		pnt_config->int_jEndReal+1,
Functions.c://		pnt_config->int_jEndGhosts,
Functions.c://		pnt_config->int_kStartReal,
Functions.c://		pnt_config->int_kEndReal);
Functions.c://	if(pnt_config->int_kMeshPoints>1)
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			pnt_config->int_kStartReal,
Functions.c://			(pnt_config->int_kStartReal+((pnt_config->int_order+1)/2-1)));
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			(pnt_config->int_kEndReal-((pnt_config->int_order+1)/2-1)),
Functions.c://			pnt_config->int_kEndReal);
Functions.c://			pnt_config->MPI_intSizeKTransferViscid,
Functions.c://			pnt_config->InterfaceNeighbourInFront[0],
Functions.c://			pnt_config->MPI_intSizeKTransferViscid,
Functions.c://			pnt_config->InterfaceNeighbourBehind[0],
Functions.c://			pnt_config->MPI_comm,
Functions.c://			&pnt_config->MPI_status);
Functions.c://			pnt_config->MPI_intSizeKTransferViscid,
Functions.c://			pnt_config->InterfaceNeighbourBehind[0],
Functions.c://			pnt_config->MPI_intSizeKTransferViscid,
Functions.c://			pnt_config->InterfaceNeighbourInFront[0],
Functions.c://			pnt_config->MPI_comm,
Functions.c://			&pnt_config->MPI_status);
Functions.c://		if (pnt_config->InterfaceNeighbourBehind[0]!=MPI_PROC_NULL)
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			pnt_config->int_kStartGhosts,
Functions.c://			pnt_config->int_kStartReal-1);
Functions.c://		if (pnt_config->InterfaceNeighbourInFront[0]!=MPI_PROC_NULL)
Functions.c://			pnt_config->int_iStartReal,
Functions.c://			pnt_config->int_iEndReal,
Functions.c://			pnt_config->int_jStartReal,
Functions.c://			pnt_config->int_jEndReal,
Functions.c://			pnt_config->int_kEndReal+1,
Functions.c://			pnt_config->int_kEndGhosts);
Functions.c://	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c://		if((pnt_config->MemberOfInterface[interface][0]==pnt_config->MPI_rank)||(pnt_config->MemberOfInterface[interface][1]==pnt_config->MPI_rank))
Functions.c://				pnt_config->MPI_SendBufferMesh[interface],
Functions.c://				pnt_config->MPI_intIStartSend_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intIEndSend_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intJStartSend_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intJEndSend_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intKStartSend_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intKEndSend_WithGhosts[interface]);
Functions.c://				pnt_config->MPI_SendBufferMesh[interface],
Functions.c://				pnt_config->MPI_intTransferSizeMesh[interface],
Functions.c://				pnt_config->MPI_rankNeighbours[interface],
Functions.c://				pnt_config->MPI_RecieveBufferMesh[interface],
Functions.c://				pnt_config->MPI_intTransferSizeMesh[interface],
Functions.c://				pnt_config->MPI_rankNeighbours[interface],
Functions.c://				pnt_config->MPI_comm,
Functions.c://				&pnt_config->MPI_status);
Functions.c://				pnt_config->MPI_RecieveBufferMesh[interface],
Functions.c://				pnt_config->MPI_intIStartRecieve_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intIEndRecieve_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intJStartRecieve_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intJEndRecieve_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intKStartRecieve_WithGhosts[interface],
Functions.c://				pnt_config->MPI_intKEndRecieve_WithGhosts[interface],
Functions.c:	int buffer_copied[pnt_config->NumberInterfaces];
Functions.c:	MPI_Request send_request[pnt_config->NumberInterfaces];
Functions.c:	MPI_Request recieve_request[pnt_config->NumberInterfaces];
Functions.c:	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:		if (pnt_config->MPI_rank!=pnt_config->MPI_rankNeighbours[interface])
Functions.c:			MPI_Irecv(pnt_config->MPI_RecieveBufferMesh[interface],
Functions.c:					 pnt_config->MPI_intTransferSizeMesh[interface],
Functions.c:				 pnt_config->MPI_rankNeighbours[interface],
Functions.c:				 pnt_config->MPI_tag[interface],
Functions.c:				 pnt_config->MPI_comm,
Functions.c:	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:			pnt_config->MPI_SendBufferMesh[interface],
Functions.c:			pnt_config->MPI_intIStartSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intIEndSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intJStartSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intJEndSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intKStartSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intKEndSend_WithGhosts[interface]);
Functions.c:		if (pnt_config->MPI_rank!=pnt_config->MPI_rankNeighbours[interface])
Functions.c:			MPI_Isend(pnt_config->MPI_SendBufferMesh[interface],
Functions.c:				 pnt_config->MPI_intTransferSizeMesh[interface],
Functions.c:				 pnt_config->MPI_rankNeighbours[interface],
Functions.c:				 pnt_config->MPI_tag[interface],
Functions.c:				 pnt_config->MPI_comm,
Functions.c:		memcpy(pnt_config->MPI_RecieveBufferMesh[periodic[0]],pnt_config->MPI_SendBufferMesh[periodic[1]],pnt_config->MPI_intTransferSizeMesh[periodic[1]]*sizeof(FLT));
Functions.c:		memcpy(pnt_config->MPI_RecieveBufferMesh[periodic[1]],pnt_config->MPI_SendBufferMesh[periodic[0]],pnt_config->MPI_intTransferSizeMesh[periodic[0]]*sizeof(FLT));
Functions.c:		for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:					pnt_config->MPI_RecieveBufferMesh[interface],
Functions.c:					pnt_config->MPI_intIStartRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intJStartRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intKStartRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intKEndRecieve_WithGhosts[interface],
Functions.c:	MPI_Waitall( pnt_config->NumberInterfaces, send_request, MPI_STATUSES_IGNORE);
Functions.c:	int buffer_copied[pnt_config->NumberInterfaces];
Functions.c:	MPI_Request send_request[pnt_config->NumberInterfaces];
Functions.c:	MPI_Request recieve_request[pnt_config->NumberInterfaces];
Functions.c:	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:		if (pnt_config->MPI_rank!=pnt_config->MPI_rankNeighbours[interface])
Functions.c:			MPI_Irecv(pnt_config->MPI_RecieveBufferFlowWithGhosts[interface],
Functions.c:					 pnt_config->MPI_intTransferSizeFlow_WithGhosts[interface],
Functions.c:				 pnt_config->MPI_rankNeighbours[interface],
Functions.c:				 pnt_config->MPI_tag[interface],
Functions.c:				 pnt_config->MPI_comm,
Functions.c:	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:			pnt_config->MPI_SendBufferFlowWithGhosts[interface],
Functions.c:			pnt_config->MPI_intIStartSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intIEndSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intJStartSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intJEndSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intKStartSend_WithGhosts[interface],
Functions.c:			pnt_config->MPI_intKEndSend_WithGhosts[interface]);
Functions.c:		if (pnt_config->MPI_rank!=pnt_config->MPI_rankNeighbours[interface])
Functions.c:			MPI_Isend(pnt_config->MPI_SendBufferFlowWithGhosts[interface],
Functions.c:				 pnt_config->MPI_intTransferSizeFlow_WithGhosts[interface],
Functions.c:				 pnt_config->MPI_rankNeighbours[interface],
Functions.c:				 pnt_config->MPI_tag[interface],
Functions.c:				 pnt_config->MPI_comm,
Functions.c:		memcpy(pnt_config->MPI_RecieveBufferFlowWithGhosts[periodic[0]],pnt_config->MPI_SendBufferFlowWithGhosts[periodic[1]],pnt_config->MPI_intTransferSizeFlow_WithGhosts[periodic[1]]*sizeof(FLT));
Functions.c:		memcpy(pnt_config->MPI_RecieveBufferFlowWithGhosts[periodic[1]],pnt_config->MPI_SendBufferFlowWithGhosts[periodic[0]],pnt_config->MPI_intTransferSizeFlow_WithGhosts[periodic[0]]*sizeof(FLT));
Functions.c:		for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:					pnt_config->MPI_RecieveBufferFlowWithGhosts[interface],
Functions.c:					pnt_config->MPI_intIStartRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intJStartRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intKStartRecieve_WithGhosts[interface],
Functions.c:					pnt_config->MPI_intKEndRecieve_WithGhosts[interface],
Functions.c:	MPI_Waitall( pnt_config->NumberInterfaces, send_request, MPI_STATUSES_IGNORE);
Functions.c:	pnt_config->comm_time=pnt_config->comm_time+(comm_t1-comm_t0);
Functions.c:		for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:			for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:				for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(k-1);
Functions.c:					ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(k+1);
Functions.c:									sqrt(pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk])*pnt_config->machNumber;
Functions.c:						pow((0.5*pnt_U_lastStep->rho[iPlus1jk]-0.5*pnt_U_lastStep->rho[iMinus1jk])/(pnt_config->deltaXi)*pnt_mesh->xi_x[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijPlus1k]-0.5*pnt_U_lastStep->rho[ijMinus1k])/(pnt_config->deltaEta)*pnt_mesh->eta_x[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[iPlus1jk]-0.5*pnt_U_lastStep->rho[iMinus1jk])/(pnt_config->deltaXi)*pnt_mesh->xi_y[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijPlus1k]-0.5*pnt_U_lastStep->rho[ijMinus1k])/(pnt_config->deltaEta)*pnt_mesh->eta_y[ijk],2.0)
Functions.c:						pow((0.5*pnt_U_lastStep->rho[iPlus1jk]-0.5*pnt_U_lastStep->rho[iMinus1jk])/(pnt_config->deltaXi)*pnt_mesh->xi_x[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijPlus1k]-0.5*pnt_U_lastStep->rho[ijMinus1k])/(pnt_config->deltaEta)*pnt_mesh->eta_x[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijkPlus1]-0.5*pnt_U_lastStep->rho[ijkMinus1])/(pnt_config->deltaZeta)*pnt_mesh->zeta_x[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[iPlus1jk]-0.5*pnt_U_lastStep->rho[iMinus1jk])/(pnt_config->deltaXi)*pnt_mesh->xi_y[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijPlus1k]-0.5*pnt_U_lastStep->rho[ijMinus1k])/(pnt_config->deltaEta)*pnt_mesh->eta_y[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijkPlus1]-0.5*pnt_U_lastStep->rho[ijkMinus1])/(pnt_config->deltaZeta)*pnt_mesh->zeta_y[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[iPlus1jk]-0.5*pnt_U_lastStep->rho[iMinus1jk])/(pnt_config->deltaXi)*pnt_mesh->xi_z[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijPlus1k]-0.5*pnt_U_lastStep->rho[ijMinus1k])/(pnt_config->deltaEta)*pnt_mesh->eta_z[ijk],2.0)+
Functions.c:						pow((0.5*pnt_U_lastStep->rho[ijkPlus1]-0.5*pnt_U_lastStep->rho[ijkMinus1])/(pnt_config->deltaZeta)*pnt_mesh->zeta_z[ijk],2.0)
Functions.c:						if(pnt_config->flag_IBC_Moving==1)
Functions.c:						{pnt_U_lastStep->u[ijk]=(pnt_config->IBC_MovingActualPosition-pnt_config->IBC_MovingLastPosition)/pnt_config->numericalTau;}
Functions.c:	pnt_config->InterfaceNeighbourLeft=NO_NEIGHBOUR;
Functions.c:	pnt_config->InterfaceNeighbourRight=NO_NEIGHBOUR;
Functions.c:	pnt_config->InterfaceNeighbourBottom=NO_NEIGHBOUR;
Functions.c:	pnt_config->InterfaceNeighbourTop=NO_NEIGHBOUR;
Functions.c:	pnt_config->InterfaceNeighbourBehind=NO_NEIGHBOUR;
Functions.c:	pnt_config->InterfaceNeighbourInFront=NO_NEIGHBOUR;
Functions.c:	int dim=pnt_config->int_meshDimensions;
Functions.c:	for(i=0;i<pnt_config->NumberInterfaces;i++)
Functions.c:		}while(strcmp(pnt_config->Donorname[i],pnt_config->ZonenameAll[j])!=0);
Functions.c://		printf("my rank %d my name %s",pnt_config->MPI_rank,pnt_config->Zonename);
Functions.c://		printf("donor %s zonenameall %s neighbour %d\n",pnt_config->Donorname[i],pnt_config->ZonenameAll[j],j);
Functions.c:		pnt_config->MPI_rankNeighbours[i]=j;
Functions.c:		if((pnt_config->RangeOfInterface[i][0]==1)&&(pnt_config->RangeOfInterface[i][0+dim]==1))
Functions.c:			pnt_config->InterfaceNeighbourLeft=i;
Functions.c:		if((pnt_config->RangeOfInterface[i][0]!=1)&&(pnt_config->RangeOfInterface[i][0+dim]!=1))
Functions.c:			pnt_config->InterfaceNeighbourRight=i;
Functions.c:		if((pnt_config->RangeOfInterface[i][1]==1)&&(pnt_config->RangeOfInterface[i][1+dim]==1))
Functions.c:			pnt_config->InterfaceNeighbourBottom=i;
Functions.c:		if((pnt_config->RangeOfInterface[i][1]!=1)&&(pnt_config->RangeOfInterface[i][1+dim]!=1))
Functions.c:			pnt_config->InterfaceNeighbourTop=i;
Functions.c:			if((pnt_config->RangeOfInterface[i][2]==1)&&(pnt_config->RangeOfInterface[i][2+dim]==1))
Functions.c:				pnt_config->InterfaceNeighbourBehind=i;
Functions.c:			if((pnt_config->RangeOfInterface[i][2]!=1)&&(pnt_config->RangeOfInterface[i][2+dim]!=1))
Functions.c:				pnt_config->InterfaceNeighbourInFront=i;
Functions.c:		if(pnt_config->MPI_rank<=pnt_config->MPI_rankNeighbours[i])
Functions.c:			pnt_config->MPI_tag[i]=0;
Functions.c:			for(k=0;k<2*pnt_config->int_meshDimensions;k++)
Functions.c:				pnt_config->MPI_tag[i]+=(pnt_config->RangeOfInterface[i][k]*MPI_tag_factor[k]);
Functions.c:			while(pnt_config->MPI_tag[i]>value_MPI_TAG_UB)
Functions.c:				pnt_config->MPI_tag[i]=pnt_config->MPI_tag[i]-value_MPI_TAG_UB;
Functions.c:			pnt_config->MPI_tag[i]=0;
Functions.c:			for(k=0;k<2*pnt_config->int_meshDimensions;k++)
Functions.c:				pnt_config->MPI_tag[i]+=(pnt_config->DonorRangeOfInterface[i][k]*MPI_tag_factor[k]);
Functions.c:			while(pnt_config->MPI_tag[i]>value_MPI_TAG_UB)
Functions.c:				pnt_config->MPI_tag[i]=pnt_config->MPI_tag[i]-value_MPI_TAG_UB;
Functions.c:			if ((pnt_config->MPI_tag[i]==pnt_config->MPI_tag[l])&&(pnt_config->MPI_rankNeighbours[i]==pnt_config->MPI_rankNeighbours[l]))
Functions.c:				printf("tag1/2: rank %d - partner %d - TAG: %ld\n",pnt_config->MPI_rank,pnt_config->MPI_rankNeighbours[l],pnt_config->MPI_tag[l]);
Functions.c:	if (pnt_config->int_meshDimensions==2)
Functions.c:		if(pnt_config->RangeOfInterface[interface][0]==pnt_config->RangeOfInterface[interface][2])
Functions.c:			if(pnt_config->RangeOfInterface[interface][0]!=1){vorzeichen_me=1;}
Functions.c:			if(pnt_config->RangeOfInterface[interface][1]!=1){vorzeichen_me=1;}
Functions.c:	if (pnt_config->int_meshDimensions==3)
Functions.c:		if(pnt_config->RangeOfInterface[interface][0]==pnt_config->RangeOfInterface[interface][3])
Functions.c:			if(pnt_config->RangeOfInterface[interface][0]!=1){vorzeichen_me=1;}
Functions.c:		else if(pnt_config->RangeOfInterface[interface][1]==pnt_config->RangeOfInterface[interface][4])
Functions.c:			if(pnt_config->RangeOfInterface[interface][1]!=1){vorzeichen_me=1;}
Functions.c:			if(pnt_config->RangeOfInterface[interface][2]!=1){vorzeichen_me=1;}
Functions.c:	if (pnt_config->int_meshDimensions==2)
Functions.c:		if(pnt_config->DonorRangeOfInterface[interface][0]==pnt_config->DonorRangeOfInterface[interface][2])
Functions.c:			if(pnt_config->DonorRangeOfInterface[interface][0]==1){vorzeichen_donor=1;}
Functions.c:			if(pnt_config->DonorRangeOfInterface[interface][1]==1){vorzeichen_donor=1;}
Functions.c:	if (pnt_config->int_meshDimensions==3)
Functions.c:		if(pnt_config->DonorRangeOfInterface[interface][0]==pnt_config->DonorRangeOfInterface[interface][3])
Functions.c:			if(pnt_config->DonorRangeOfInterface[interface][0]==1){vorzeichen_donor=1;}
Functions.c:		else if(pnt_config->DonorRangeOfInterface[interface][1]==pnt_config->DonorRangeOfInterface[interface][4])
Functions.c:			if(pnt_config->DonorRangeOfInterface[interface][1]==1){vorzeichen_donor=1;}
Functions.c:			if(pnt_config->DonorRangeOfInterface[interface][2]==1){vorzeichen_donor=1;}
Functions.c:	if((interface==pnt_config->InterfaceNeighbourLeft)||(interface==pnt_config->InterfaceNeighbourRight))
Functions.c:		pnt_config->TransformMatrixOfInterface[interface][0]=
Functions.c:				vorzeichen_gesamt*abs(pnt_config->TransformMatrixOfInterface[interface][0]);
Functions.c:	if((interface==pnt_config->InterfaceNeighbourBottom)||(interface==pnt_config->InterfaceNeighbourTop))
Functions.c:		pnt_config->TransformMatrixOfInterface[interface][1]=
Functions.c:				vorzeichen_gesamt*abs(pnt_config->TransformMatrixOfInterface[interface][1]);
Functions.c:	if((interface==pnt_config->InterfaceNeighbourBehind)||(interface==pnt_config->InterfaceNeighbourInFront))
Functions.c:		pnt_config->TransformMatrixOfInterface[interface][2]=
Functions.c:				vorzeichen_gesamt*abs(pnt_config->TransformMatrixOfInterface[interface][2]);
Functions.c:	pnt_config->MPI_intTransformation_flag_I0_I[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_I0_J[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_I0_K[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_J0_I[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_J0_J[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_J0_K[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_K0_I[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_K0_J[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_flag_K0_K[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_Offset_I[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_Offset_J[interface]= 0;
Functions.c:	pnt_config->MPI_intTransformation_Offset_K[interface]= 0;
Functions.c:	switch(pnt_config->TransformMatrixOfInterface[interface][0])
Functions.c:			pnt_config->MPI_intTransformation_IMax[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve[interface]-pnt_config->MPI_intIStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_IMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface]-pnt_config->MPI_intIStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_I0_I[interface]= 1;
Functions.c:			pnt_config->MPI_dblTransformation_xi_x[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_y[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_z[interface]=1.0;
Functions.c:			pnt_config->MPI_intTransformation_JMax[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve[interface]-pnt_config->MPI_intIStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_JMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface]-pnt_config->MPI_intIStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_I0_J[interface]= 1;
Functions.c:			pnt_config->MPI_dblTransformation_xi_x[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_y[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_z[interface]=1.0;
Functions.c:			pnt_config->MPI_intTransformation_KMax[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve[interface]-pnt_config->MPI_intIStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_KMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface]-pnt_config->MPI_intIStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_I0_K[interface]= 1;
Functions.c:			pnt_config->MPI_dblTransformation_xi_x[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_y[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_z[interface]=1.0;
Functions.c:			pnt_config->MPI_intTransformation_IMax[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve[interface]-pnt_config->MPI_intIStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_I0_I[interface]= 1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_I[interface]=
Functions.c:					pnt_config->MPI_intTransformation_IMax[interface]-1;
Functions.c:			pnt_config->MPI_intTransformation_IMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface]-pnt_config->MPI_intIStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_I_Ghosts[interface]=
Functions.c:					pnt_config->MPI_intTransformation_IMax_Mesh[interface]-1;
Functions.c:			pnt_config->MPI_dblTransformation_xi_x[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_y[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_z[interface]=-1.0;
Functions.c:			pnt_config->MPI_intTransformation_JMax[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve[interface]-pnt_config->MPI_intIStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_I0_J[interface]=1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_J[interface]=
Functions.c:					pnt_config->MPI_intTransformation_JMax[interface]-1;
Functions.c:			pnt_config->MPI_intTransformation_JMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface]-pnt_config->MPI_intIStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_J_Ghosts[interface]=
Functions.c:					pnt_config->MPI_intTransformation_JMax_Mesh[interface]-1;
Functions.c:			pnt_config->MPI_dblTransformation_xi_x[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_y[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_z[interface]=-1.0;
Functions.c:			pnt_config->MPI_intTransformation_KMax[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve[interface]-pnt_config->MPI_intIStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_I0_K[interface]= 1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_K[interface]=
Functions.c:					pnt_config->MPI_intTransformation_KMax[interface]-1;
Functions.c:			pnt_config->MPI_intTransformation_KMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intIEndRecieve_WithGhosts[interface]-pnt_config->MPI_intIStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_K_Ghosts[interface]=
Functions.c:					pnt_config->MPI_intTransformation_KMax_Mesh[interface]-1;
Functions.c:			pnt_config->MPI_dblTransformation_xi_x[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_y[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_xi_z[interface]=-1.0;
Functions.c:	switch(pnt_config->TransformMatrixOfInterface[interface][1])
Functions.c:			pnt_config->MPI_intTransformation_IMax[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve[interface]-pnt_config->MPI_intJStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_IMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface]-pnt_config->MPI_intJStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_J0_I[interface]= 1;
Functions.c:			pnt_config->MPI_dblTransformation_eta_x[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_y[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_z[interface]=1.0;
Functions.c:			pnt_config->MPI_intTransformation_JMax[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve[interface]-pnt_config->MPI_intJStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_JMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface]-pnt_config->MPI_intJStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_J0_J[interface]= 1;
Functions.c:			pnt_config->MPI_dblTransformation_eta_x[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_y[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_z[interface]=1.0;
Functions.c:			pnt_config->MPI_intTransformation_KMax[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve[interface]-pnt_config->MPI_intJStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_KMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface]-pnt_config->MPI_intJStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_J0_K[interface]= 1;
Functions.c:			pnt_config->MPI_dblTransformation_eta_x[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_y[interface]=1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_z[interface]=1.0;
Functions.c:			pnt_config->MPI_intTransformation_IMax[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve[interface]-pnt_config->MPI_intJStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_J0_I[interface]= 1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_I[interface]=
Functions.c:					pnt_config->MPI_intTransformation_IMax[interface]-1;
Functions.c:			pnt_config->MPI_intTransformation_IMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface]-pnt_config->MPI_intJStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_I_Ghosts[interface]=
Functions.c:					pnt_config->MPI_intTransformation_IMax_Mesh[interface]-1;
Functions.c:			pnt_config->MPI_dblTransformation_eta_x[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_y[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_z[interface]=-1.0;
Functions.c:			pnt_config->MPI_intTransformation_JMax[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve[interface]-pnt_config->MPI_intJStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_J0_J[interface]= 1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_J[interface]=
Functions.c:					pnt_config->MPI_intTransformation_JMax[interface]-1;
Functions.c:			pnt_config->MPI_intTransformation_JMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface]-pnt_config->MPI_intJStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_J_Ghosts[interface]=
Functions.c:					pnt_config->MPI_intTransformation_JMax_Mesh[interface]-1;
Functions.c:			pnt_config->MPI_dblTransformation_eta_x[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_y[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_z[interface]=-1.0;
Functions.c:			pnt_config->MPI_intTransformation_KMax[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve[interface]-pnt_config->MPI_intJStartRecieve[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_flag_J0_K[interface]= 1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_K[interface]=
Functions.c:					pnt_config->MPI_intTransformation_KMax[interface]-1;
Functions.c:			pnt_config->MPI_intTransformation_KMax_Mesh[interface]=
Functions.c:					pnt_config->MPI_intJEndRecieve_WithGhosts[interface]-pnt_config->MPI_intJStartRecieve_WithGhosts[interface]+1;
Functions.c:			pnt_config->MPI_intTransformation_Offset_K_Ghosts[interface]=
Functions.c:					pnt_config->MPI_intTransformation_KMax_Mesh[interface]-1;
Functions.c:			pnt_config->MPI_dblTransformation_eta_x[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_y[interface]=-1.0;
Functions.c:			pnt_config->MPI_dblTransformation_eta_z[interface]=-1.0;
Functions.c:	if (pnt_config->int_meshDimensions==3)
Functions.c:		switch(pnt_config->TransformMatrixOfInterface[interface][2])
Functions.c:				pnt_config->MPI_intTransformation_IMax[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve[interface]-pnt_config->MPI_intKStartRecieve[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_IMax_Mesh[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve_WithGhosts[interface]-pnt_config->MPI_intKStartRecieve_WithGhosts[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_flag_K0_I[interface]= 1;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_x[interface]=1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_y[interface]=1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_z[interface]=1.0;
Functions.c:				pnt_config->MPI_intTransformation_JMax[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve[interface]-pnt_config->MPI_intKStartRecieve[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_JMax_Mesh[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve_WithGhosts[interface]-pnt_config->MPI_intKStartRecieve_WithGhosts[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_flag_K0_J[interface]= 1;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_x[interface]=1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_y[interface]=1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_z[interface]=1.0;
Functions.c:				pnt_config->MPI_intTransformation_KMax[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve[interface]-pnt_config->MPI_intKStartRecieve[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_KMax_Mesh[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve_WithGhosts[interface]-pnt_config->MPI_intKStartRecieve_WithGhosts[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_flag_K0_K[interface]= 1;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_x[interface]=1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_y[interface]=1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_z[interface]=1.0;
Functions.c:				pnt_config->MPI_intTransformation_IMax[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve[interface]-pnt_config->MPI_intKStartRecieve[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_flag_K0_I[interface]= 1;
Functions.c:				pnt_config->MPI_intTransformation_Offset_I[interface]=
Functions.c:						pnt_config->MPI_intTransformation_IMax[interface]-1;
Functions.c:				pnt_config->MPI_intTransformation_IMax_Mesh[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve_WithGhosts[interface]-pnt_config->MPI_intKStartRecieve_WithGhosts[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_Offset_I_Ghosts[interface]=
Functions.c:						pnt_config->MPI_intTransformation_IMax_Mesh[interface]-1;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_x[interface]=-1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_y[interface]=-1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_z[interface]=-1.0;
Functions.c:				pnt_config->MPI_intTransformation_JMax[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve[interface]-pnt_config->MPI_intKStartRecieve[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_flag_K0_J[interface]= 1;
Functions.c:				pnt_config->MPI_intTransformation_Offset_J[interface]=
Functions.c:						pnt_config->MPI_intTransformation_JMax[interface]-1;
Functions.c:				pnt_config->MPI_intTransformation_JMax_Mesh[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve_WithGhosts[interface]-pnt_config->MPI_intKStartRecieve_WithGhosts[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_Offset_J_Ghosts[interface]=
Functions.c:						pnt_config->MPI_intTransformation_JMax_Mesh[interface]-1;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_x[interface]=-1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_y[interface]=-1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_z[interface]=-1.0;
Functions.c:				pnt_config->MPI_intTransformation_KMax[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve[interface]-pnt_config->MPI_intKStartRecieve[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_flag_K0_K[interface]= 1;
Functions.c:				pnt_config->MPI_intTransformation_Offset_K[interface]=
Functions.c:						pnt_config->MPI_intTransformation_KMax[interface]-1;
Functions.c:				pnt_config->MPI_intTransformation_KMax_Mesh[interface]=
Functions.c:						pnt_config->MPI_intKEndRecieve_WithGhosts[interface]-pnt_config->MPI_intKStartRecieve_WithGhosts[interface]+1;
Functions.c:				pnt_config->MPI_intTransformation_Offset_K_Ghosts[interface]=
Functions.c:						pnt_config->MPI_intTransformation_KMax_Mesh[interface]-1;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_x[interface]=-1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_y[interface]=-1.0;
Functions.c:				pnt_config->MPI_dblTransformation_zeta_z[interface]=-1.0;
Functions.c:		pnt_config->MPI_intTransformation_KMax[interface]=1;
Functions.c:		pnt_config->MPI_intTransformation_KMax_Mesh[interface]=1;
Functions.c:		pnt_config->MPI_dblTransformation_zeta_x[interface]=1.0;
Functions.c:		pnt_config->MPI_dblTransformation_zeta_y[interface]=1.0;
Functions.c:		pnt_config->MPI_dblTransformation_zeta_z[interface]=1.0;
Functions.c:	i_buffer=pnt_config->MPI_intTransformation_flag_I0_I[interface]*i+pnt_config->MPI_intTransformation_flag_J0_I[interface]*j+pnt_config->MPI_intTransformation_flag_K0_I[interface]*k;
Functions.c:	j_buffer=pnt_config->MPI_intTransformation_flag_I0_J[interface]*i+pnt_config->MPI_intTransformation_flag_J0_J[interface]*j+pnt_config->MPI_intTransformation_flag_K0_J[interface]*k;
Functions.c:	k_buffer=pnt_config->MPI_intTransformation_flag_I0_K[interface]*i+pnt_config->MPI_intTransformation_flag_J0_K[interface]*j+pnt_config->MPI_intTransformation_flag_K0_K[interface]*k;
Functions.c://	result=abs(i_buffer-pnt_config->MPI_intTransformation_Offset_I[interface])+
Functions.c://			abs(j_buffer-pnt_config->MPI_intTransformation_Offset_J[interface])*pnt_config->MPI_intTransformation_IMax[interface]+
Functions.c://			abs(k_buffer-pnt_config->MPI_intTransformation_Offset_K[interface])*pnt_config->MPI_intTransformation_IMax[interface]*pnt_config->MPI_intTransformation_JMax[interface]+
Functions.c://			c*pnt_config->MPI_intTransformation_IMax[interface]*pnt_config->MPI_intTransformation_JMax[interface]*pnt_config->MPI_intTransformation_KMax[interface];
Functions.c:	result=abs(i_buffer-pnt_config->MPI_intTransformation_Offset_I_Ghosts[interface])+
Functions.c:			abs(j_buffer-pnt_config->MPI_intTransformation_Offset_J_Ghosts[interface])*pnt_config->MPI_intTransformation_IMax_Mesh[interface]+
Functions.c:			abs(k_buffer-pnt_config->MPI_intTransformation_Offset_K_Ghosts[interface])*pnt_config->MPI_intTransformation_IMax_Mesh[interface]*pnt_config->MPI_intTransformation_JMax_Mesh[interface]+
Functions.c:			c*pnt_config->MPI_intTransformation_IMax_Mesh[interface]*pnt_config->MPI_intTransformation_JMax_Mesh[interface]*pnt_config->MPI_intTransformation_KMax_Mesh[interface];
Functions.c:	i_buffer=pnt_config->MPI_intTransformation_flag_I0_I[interface]*i+pnt_config->MPI_intTransformation_flag_J0_I[interface]*j+pnt_config->MPI_intTransformation_flag_K0_I[interface]*k;
Functions.c:	j_buffer=pnt_config->MPI_intTransformation_flag_I0_J[interface]*i+pnt_config->MPI_intTransformation_flag_J0_J[interface]*j+pnt_config->MPI_intTransformation_flag_K0_J[interface]*k;
Functions.c:	k_buffer=pnt_config->MPI_intTransformation_flag_I0_K[interface]*i+pnt_config->MPI_intTransformation_flag_J0_K[interface]*j+pnt_config->MPI_intTransformation_flag_K0_K[interface]*k;
Functions.c:		switch(pnt_config->TransformMatrixOfInterface[interface][0])
Functions.c:		switch(pnt_config->TransformMatrixOfInterface[interface][1])
Functions.c:		if (pnt_config->int_meshDimensions==3)
Functions.c:			switch(pnt_config->TransformMatrixOfInterface[interface][2])
Functions.c:	result=abs(i_buffer-pnt_config->MPI_intTransformation_Offset_I_Ghosts[interface])+
Functions.c:			abs(j_buffer-pnt_config->MPI_intTransformation_Offset_J_Ghosts[interface])*pnt_config->MPI_intTransformation_IMax_Mesh[interface]+
Functions.c:			abs(k_buffer-pnt_config->MPI_intTransformation_Offset_K_Ghosts[interface])*pnt_config->MPI_intTransformation_IMax_Mesh[interface]*pnt_config->MPI_intTransformation_JMax_Mesh[interface]+
Functions.c:			c*pnt_config->MPI_intTransformation_IMax_Mesh[interface]*pnt_config->MPI_intTransformation_JMax_Mesh[interface]*pnt_config->MPI_intTransformation_KMax_Mesh[interface];
Functions.c:	for(interface=0;interface<pnt_config->NumberInterfaces;interface++)
Functions.c:		if(interface==pnt_config->InterfaceNeighbourLeft)
Functions.c:			i=pnt_config->int_iStartReal;
Functions.c:			j=pnt_config->int_jMid;
Functions.c:			k=pnt_config->int_kMid;
Functions.c:			ghost=pnt_config->int_iStartReal-1;
Functions.c:			ijk_real=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:			ijk_ghost=ghost*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				pnt_config->MPI_intIStartSend[interface]=pnt_config->MPI_intIStartSend[interface]+1;
Functions.c:				pnt_config->MPI_intIEndSend[interface]=pnt_config->MPI_intIEndSend[interface]+1;
Functions.c:		if(interface==pnt_config->InterfaceNeighbourRight)
Functions.c:			i=pnt_config->int_iEndReal;
Functions.c:			j=pnt_config->int_jMid;
Functions.c:			k=pnt_config->int_kMid;
Functions.c:			ghost=pnt_config->int_iEndReal+1;
Functions.c:			ijk_real=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:			ijk_ghost=ghost*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				pnt_config->MPI_intIStartSend[interface]=pnt_config->MPI_intIStartSend[interface]-1;
Functions.c:				pnt_config->MPI_intIEndSend[interface]=pnt_config->MPI_intIEndSend[interface]-1;
Functions.c:		if(interface==pnt_config->InterfaceNeighbourBottom)
Functions.c:			j=pnt_config->int_jStartReal;
Functions.c:			i=pnt_config->int_iMid;
Functions.c:			k=pnt_config->int_kMid;
Functions.c:			ghost=pnt_config->int_jStartReal-1;
Functions.c:			ijk_real=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:			ijk_ghost=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+ghost*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				pnt_config->MPI_intJStartSend[interface]=pnt_config->MPI_intJStartSend[interface]+1;
Functions.c:				pnt_config->MPI_intJEndSend[interface]=pnt_config->MPI_intJEndSend[interface]+1;
Functions.c:		if(interface==pnt_config->InterfaceNeighbourTop)
Functions.c:			j=pnt_config->int_jEndReal;
Functions.c:			i=pnt_config->int_iMid;
Functions.c:			k=pnt_config->int_kMid;
Functions.c:			ghost=pnt_config->int_jEndReal+1;
Functions.c:			ijk_real=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:			ijk_ghost=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+ghost*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				pnt_config->MPI_intJStartSend[interface]=pnt_config->MPI_intJStartSend[interface]-1;
Functions.c:				pnt_config->MPI_intJEndSend[interface]=pnt_config->MPI_intJEndSend[interface]-1;
Functions.c:			if(interface==pnt_config->InterfaceNeighbourBehind)
Functions.c:				k=pnt_config->int_kStartReal;
Functions.c:				i=pnt_config->int_iMid;
Functions.c:				j=pnt_config->int_jMid;
Functions.c:				ghost=pnt_config->int_kStartReal-1;
Functions.c:				ijk_real=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijk_ghost=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+ghost;
Functions.c:					pnt_config->MPI_intKStartSend[interface]=pnt_config->MPI_intKStartSend[interface]+1;
Functions.c:					pnt_config->MPI_intKEndSend[interface]=pnt_config->MPI_intKEndSend[interface]+1;
Functions.c:			if(interface==pnt_config->InterfaceNeighbourInFront)
Functions.c:				k=pnt_config->int_kEndReal;
Functions.c:				i=pnt_config->int_iMid;
Functions.c:				j=pnt_config->int_jMid;
Functions.c:				ghost=pnt_config->int_kEndReal+1;
Functions.c:				ijk_real=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijk_ghost=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+ghost;
Functions.c:					pnt_config->MPI_intKStartSend[interface]=pnt_config->MPI_intKStartSend[interface]-1;
Functions.c:					pnt_config->MPI_intKEndSend[interface]=pnt_config->MPI_intKEndSend[interface]-1;
Functions.c:	datei=fopen(pnt_config->chr_MeshPath,"r");
Functions.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: CGNS-Datei '%s' wurde nicht gefunden.\n",pnt_config->chr_MeshPath);}
Functions.c:	datei=fopen(pnt_config->chr_configPath,"r");
Functions.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: Config-Datei '%s' wurde nicht gefunden.\n",pnt_config->chr_configPath);}
Functions.c:	for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	switch (pnt_config->IBC_Type)
Functions.c:		actual_x=pnt_config->IBC_MovingActualPosition;
Functions.c:		x_min=actual_x-pnt_config->IBC_SizeX/2.;
Functions.c:		x_max=actual_x+pnt_config->IBC_SizeX/2.;
Functions.c:		y_min=pnt_config->IBC_StartpositionY-pnt_config->IBC_SizeY/2.;
Functions.c:		y_max=pnt_config->IBC_StartpositionY+pnt_config->IBC_SizeY/2.;
Functions.c:		z_min=pnt_config->IBC_StartpositionZ-pnt_config->IBC_SizeZ/2.;
Functions.c:		z_max=pnt_config->IBC_StartpositionZ+pnt_config->IBC_SizeZ/2.;
Functions.c:		for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:			for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:				for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: IBC for VG is set.\n");}
Functions.c:		for (i=pnt_config->int_iStartGhosts+1; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:			j=pnt_config->int_jStartReal;
Functions.c:			k=pnt_config->int_kStartReal;
Functions.c:			ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:			iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				j=pnt_config->int_jStartGhosts-1;
Functions.c:					ijk_tmp=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				}while((distance<VG_height)&&(j<=pnt_config->int_jEndGhosts));
Functions.c:				if(j_max==pnt_config->int_jStartGhosts){break;}
Functions.c:				j=pnt_config->int_jStartReal;
Functions.c:					ijk_tmp=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				}while((distance<VG_length)&&(i<=pnt_config->int_iEndGhosts));
Functions.c:				ijk=i_min*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_jStartReal*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kStartReal;
Functions.c:				ijk_tmp=i_max*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j_max*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kStartReal;
Functions.c:					for (j=pnt_config->int_jStartGhosts; j < j_max; j++)
Functions.c:						for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:							ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:								ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:								ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:								ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		actual_x=pnt_config->IBC_MovingActualPosition;
Functions.c:		y_kolben=pnt_config->IBC_yKolben;
Functions.c:		alpha_kolben=pnt_config->IBC_alphaKolben;
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		actual_x=pnt_config->IBC_MovingActualPosition;
Functions.c:		y_kolben=pnt_config->IBC_yKolben;
Functions.c:		alpha_kolben=pnt_config->IBC_alphaKolben;
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					if(pnt_config->flag_IBC_Moving==1)
Functions.c:						pnt_U->u[ijk]=//pnt_config->IBC_MovingSpeed/pnt_config->u0_dim;}
Functions.c:							(pnt_config->IBC_MovingActualPosition-pnt_config->IBC_MovingLastPosition)/pnt_config->numericalTau;
Functions.c:												1.0/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:							sqrt(pnt_config->Upsilon*
Functions.c:							pnt_config->gammaNumber*pnt_U->p[ijk]/pnt_U->rho[ijk]);
Functions.c:					pnt_U->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U->p[ijk]/pnt_U->rho[ijk],1.5)/
Functions.c:							(pnt_U->p[ijk]/pnt_U->rho[ijk]+pnt_config->SutherlandConstant));
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					r=sqrt(pow((pnt_mesh->x[ijk]-pnt_config->pw_x1),2)+
Functions.c:							pow((pnt_mesh->y[ijk]-pnt_config->pw_y1),2));
Functions.c:					Ma_r=pnt_config->machNumber*(pnt_mesh->x[ijk]-pnt_config->pw_x1)/r
Functions.c:							+sqrt(1.-pnt_config->machNumber*pow((pnt_mesh->y[ijk]-pnt_config->pw_y1),2)/r);
Functions.c:					delta_t=(r-pnt_config->pw_r0*Ma_r)/(Ma_r*c)*pnt_config->L0_dim/pnt_config->u0_dim;
Functions.c:							pnt_config->pw_amplitude*sin(2.0*MY_PI*pnt_config->pw_frequency*(pnt_config->time_dim-delta_t))*sqrt(Ma_r*pnt_config->pw_r0/r);
Functions.c://					pnt_U_lastStep->p[ijk]=pnt_mesh->startPressure_PressureWaves[ijk]+pnt_config->pw_amplitude*sin(2.0*MY_PI*pnt_config->pw_frequency*(pnt_config->time_dim));
Functions.c:					pnt_U_lastStep->rho[ijk]=pow(pnt_U_lastStep->p[ijk],1.0/pnt_config->gammaNumber);
Functions.c:							pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:					pnt_U_lastStep->c[ijk]=sqrt(pnt_config->Upsilon*pnt_config->gammaNumber
Functions.c:					pnt_U_lastStep->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk],1.5)/
Functions.c:							(pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]+pnt_config->SutherlandConstant));
Functions.c:	f=pnt_config->pw_frequency/pnt_config->u0_dim*pnt_config->L0_dim;
Functions.c:	lambda=(1.0/pnt_config->machNumber)/f;
Functions.c:	r_quelle=pnt_config->pw_r0;
Functions.c:	x_Q=pnt_config->pw_x0-r_quelle*pnt_config->machNumber;
Functions.c:	y_Q=pnt_config->pw_y0;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					u_alpha=1.0*cos(alpha)+sqrt(pow(1.0/pnt_config->machNumber,2.)-pow(1.0*sin(alpha),2.));
Functions.c:							pnt_config->pw_amplitude
Functions.c:							*sin(2.0*MY_PI*(pnt_config->pw_frequency*(pnt_config->time_dim-pnt_config->start_Time)-r/lambda_alpha+r_quelle/lambda))
Functions.c://					pnt_U_lastStep->p[ijk]=pnt_mesh->startPressure_PressureWaves[ijk]+pnt_config->pw_amplitude*sin(2.0*MY_PI*pnt_config->pw_frequency*(pnt_config->time_dim));
Functions.c:					pnt_U_lastStep->rho[ijk]=pow(pnt_U_lastStep->p[ijk],1.0/pnt_config->gammaNumber);
Functions.c:							pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:					pnt_U_lastStep->c[ijk]=sqrt(pnt_config->Upsilon*pnt_config->gammaNumber
Functions.c:					pnt_U_lastStep->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk],1.5)/
Functions.c:							(pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]+pnt_config->SutherlandConstant));
Functions.c:	f_tmp=pnt_config->pw_frequency/pnt_config->u0_dim*pnt_config->L0_dim;
Functions.c:	c_tmp=(1.0/pnt_config->machNumber);
Functions.c:	pnt_config->pw_r0=c_tmp/f_tmp;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				if(pnt_config->pw_UseBC)
Functions.c:					(i<pnt_config->int_iStartReal)||(j<pnt_config->int_jStartReal)||(k<pnt_config->int_kStartReal)||
Functions.c:					(i>pnt_config->int_iEndReal)||(j>pnt_config->int_jEndReal)||(k>pnt_config->int_kEndReal))
Functions.c://						pow((pnt_mesh->x[ijk]-pnt_config->pw_x0),2)+
Functions.c://						pow((pnt_mesh->y[ijk]-pnt_config->pw_y0),2)+
Functions.c://						pow((pnt_mesh->z[ijk]-pnt_config->pw_z0),2));
Functions.c:						pow((pnt_mesh->x[ijk]-pnt_config->pw_x0),2)
Functions.c:						+pow((pnt_mesh->y[ijk]-pnt_config->pw_y0),2));
Functions.c:				if((distance<=pnt_config->pw_r0)&&(BC_check))
Functions.c:					if(pnt_config->pw_UseFlowAverage)
Functions.c:						pow((pnt_mesh->x[ijk]-pnt_config->pw_x1),2)+
Functions.c:						pow((pnt_mesh->y[ijk]-pnt_config->pw_y1),2)+
Functions.c:						pow((pnt_mesh->z[ijk]-pnt_config->pw_z1),2));
Functions.c:				if((distance<=pnt_config->pw_r0)&&(pnt_config->pw_numberSources==2)&&(BC_check))
Functions.c:					if(pnt_config->pw_UseFlowAverage)
Functions.c:	distance = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Functions.c:	distance_tmp = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Functions.c:	for (p=0;p<pnt_config->PressureHistory_No;p++)
Functions.c:	for (p=0;p<pnt_config->PressureHistory_No;p++)
Functions.c:		for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:			for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:				for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:									pow((pnt_mesh->x[ijk]-pnt_config->PressureHistory_x_P[p]),2.)+
Functions.c:									pow((pnt_mesh->y[ijk]-pnt_config->PressureHistory_y_P[p]),2.));
Functions.c:									pow((pnt_mesh->x[ijk]-pnt_config->PressureHistory_x_P[p]),2.)+
Functions.c:									pow((pnt_mesh->y[ijk]-pnt_config->PressureHistory_y_P[p]),2.)+
Functions.c:									pow((pnt_mesh->z[ijk]-pnt_config->PressureHistory_z_P[p]),2.));
Functions.c:						if((i>=pnt_config->int_iStartReal && i <= pnt_config->int_iEndReal)&&(j>=pnt_config->int_jStartReal && j <= pnt_config->int_jEndReal)&&(k>=pnt_config->int_kStartReal && k <= pnt_config->int_kEndReal))
Functions.c:							pnt_config->ijk_PressureHistory_P[p]=ijk;
Functions.c:							pnt_config->flag_PressureHistory_P[p]=1;
Functions.c:							pnt_config->PressureHistory_x_P_real[p]=pnt_mesh->x[ijk];
Functions.c:							pnt_config->PressureHistory_y_P_real[p]=pnt_mesh->y[ijk];
Functions.c:							pnt_config->PressureHistory_z_P_real[p]=pnt_mesh->z[ijk];
Functions.c:							pnt_config->flag_PressureHistory_P[p]=0;
Functions.c:	for (p=0;p<pnt_config->PressureHistory_No;p++)
Functions.c:		if(pnt_config->flag_PressureHistory_P[p]==1)
Functions.c:					(double)pnt_config->PressureHistory_x_P_real[p],
Functions.c:					(double)pnt_config->PressureHistory_y_P_real[p],
Functions.c:					(double)pnt_config->PressureHistory_z_P_real[p],
Functions.c:					(double)pnt_config->PressureHistory_x_P[p],
Functions.c:					(double)pnt_config->PressureHistory_y_P[p],
Functions.c:					(double)pnt_config->PressureHistory_z_P[p],
Functions.c:					pnt_config->MPI_rank);
Functions.c:	distance = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Functions.c:	distance_tmp = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Functions.c:	for (p=0;p<pnt_config->VelocityHistory_No;p++)
Functions.c:	for (p=0;p<pnt_config->VelocityHistory_No;p++)
Functions.c:		for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:			for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:				for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:									pow((pnt_mesh->x[ijk]-pnt_config->VelocityHistory_x_P[p]),2.)+
Functions.c:									pow((pnt_mesh->y[ijk]-pnt_config->VelocityHistory_y_P[p]),2.));
Functions.c:									pow((pnt_mesh->x[ijk]-pnt_config->VelocityHistory_x_P[p]),2.)+
Functions.c:									pow((pnt_mesh->y[ijk]-pnt_config->VelocityHistory_y_P[p]),2.)+
Functions.c:									pow((pnt_mesh->z[ijk]-pnt_config->VelocityHistory_z_P[p]),2.));
Functions.c:						if((i>=pnt_config->int_iStartReal && i <= pnt_config->int_iEndReal)&&(j>=pnt_config->int_jStartReal && j <= pnt_config->int_jEndReal)&&(k>=pnt_config->int_kStartReal && k <= pnt_config->int_kEndReal))
Functions.c:							pnt_config->ijk_VelocityHistory_P[p]=ijk;
Functions.c:							pnt_config->flag_VelocityHistory_P[p]=1;
Functions.c:							pnt_config->VelocityHistory_x_P_real[p]=pnt_mesh->x[ijk];
Functions.c:							pnt_config->VelocityHistory_y_P_real[p]=pnt_mesh->y[ijk];
Functions.c:							pnt_config->VelocityHistory_z_P_real[p]=pnt_mesh->z[ijk];
Functions.c:							pnt_config->flag_VelocityHistory_P[p]=0;
Functions.c:	for (p=0;p<pnt_config->VelocityHistory_No;p++)
Functions.c:		if(pnt_config->flag_VelocityHistory_P[p]==1)
Functions.c:					(double)pnt_config->VelocityHistory_x_P_real[p],
Functions.c:					(double)pnt_config->VelocityHistory_y_P_real[p],
Functions.c:					(double)pnt_config->VelocityHistory_z_P_real[p],
Functions.c:					(double)pnt_config->VelocityHistory_x_P[p],
Functions.c:					(double)pnt_config->VelocityHistory_y_P[p],
Functions.c:					(double)pnt_config->VelocityHistory_z_P[p],
Functions.c:					pnt_config->MPI_rank);
Functions.c:	x_wirb_zentr=pnt_config->Vortex_x_wirb_zentr;
Functions.c:	y_wirb_zentr=pnt_config->Vortex_y_wirb_zentr;
Functions.c:	faktor_quer=pnt_config->Vortex_faktor_quer;
Functions.c:	r_wirb_max=pnt_config->Vortex_r_wirb_max;
Functions.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					beta = pnt_config->Vortex_beta;
Functions.c:					- (pnt_config->gammaNumber - 1.)*beta*beta/
Functions.c:					(8.*pnt_config->gammaNumber*MY_PI*MY_PI)/pnt_config->Upsilon*exp(1. - radius)), (1./(pnt_config->gammaNumber - 1.)));
Functions.c:					pnt_U_lastStep->p[ijk] = pow(pnt_U_lastStep->rho[ijk], pnt_config->gammaNumber);
Functions.c:							pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:	int i=strlen(pnt_config->chr_MeshPath);
Functions.c:	while(pnt_config->chr_MeshPath[i] != '/' && i>-1)
Functions.c:	for(j=i;j<=strlen(pnt_config->chr_MeshPath);j++)
Functions.c:		if(pnt_config->chr_MeshPath[j] == '.')
Functions.c:		  pnt_config->chr_DivisionFile[k2]='.';
Functions.c:		  pnt_config->chr_DivisionFile[k2+1]='s';
Functions.c:		  pnt_config->chr_DivisionFile[k2+2]='d';
Functions.c:		  pnt_config->chr_DivisionFile[k2+3]='d';
Functions.c:		  pnt_config->chr_DivisionFile[k2+4]='c';
Functions.c:		  pnt_config->chr_DivisionFile[k2+5]='\0';
Functions.c:		pnt_config->chr_MeshFile[k]=pnt_config->chr_MeshPath[j];
Functions.c:		pnt_config->chr_DivisionFile[k2]=pnt_config->chr_MeshPath[j];
Functions.c:		pnt_config->chr_folder[k]=pnt_config->chr_MeshPath[j];
Functions.c:	pnt_config->chr_folder[k]=pnt_config->chr_MeshPath[strlen(pnt_config->chr_MeshPath)];
Functions.c:	if (i==0){strcpy(pnt_config->chr_folder,"./");}
Functions.c:	sprintf(pnt_config->chr_PressureHistoryFile,"PressureHistory_%s",pnt_config->chr_MeshFile);
Functions.c:	sprintf(pnt_config->chr_VelocityHistoryFile,"VelocityHistory_%s",pnt_config->chr_MeshFile);
Functions.c:	sprintf(pnt_config->chr_DivisionPath,"%s%s",pnt_config->chr_folder,pnt_config->chr_DivisionFile);
Functions.c:	sprintf(pnt_config->chr_PressureHistoryPath,"%s%s",pnt_config->chr_folder,pnt_config->chr_PressureHistoryFile);
Functions.c:	sprintf(pnt_config->chr_VelocityHistoryPath,"%s%s",pnt_config->chr_folder,pnt_config->chr_VelocityHistoryFile);
Functions.c:	strcpy(pnt_config->chr_MeshPathOriginal,pnt_config->chr_MeshPath);
Functions.c:	pnt_config->PressureHistory_time[pnt_config->int_actualIteration-(pnt_config->int_StartIteration+1)]=pnt_config->time_dim;
Functions.c:	for (p=0;p<pnt_config->PressureHistory_No;p++)
Functions.c:		if(pnt_config->flag_PressureHistory_P[p]==1)
Functions.c:			pnt_config->PressureHistory_pressure[p][pnt_config->int_actualIteration-(pnt_config->int_StartIteration+1)]=pnt_U_lastStep->p[pnt_config->ijk_PressureHistory_P[p]];
Functions.c:	pnt_config->VelocityHistory_time[pnt_config->int_actualIteration-(pnt_config->int_StartIteration+1)]=pnt_config->time_dim;
Functions.c:	for (p=0;p<pnt_config->VelocityHistory_No;p++)
Functions.c:		if(pnt_config->flag_VelocityHistory_P[p]==1)
Functions.c:			pnt_config->VelocityHistory_VelocityX[p][pnt_config->int_actualIteration-(pnt_config->int_StartIteration+1)]=pnt_U_lastStep->u[pnt_config->ijk_VelocityHistory_P[p]];
Functions.c:			pnt_config->VelocityHistory_VelocityY[p][pnt_config->int_actualIteration-(pnt_config->int_StartIteration+1)]=pnt_U_lastStep->v[pnt_config->ijk_VelocityHistory_P[p]];
Functions.c:			pnt_config->VelocityHistory_VelocityZ[p][pnt_config->int_actualIteration-(pnt_config->int_StartIteration+1)]=pnt_U_lastStep->w[pnt_config->ijk_VelocityHistory_P[p]];
Functions.c:	int *NANCounterArray = (int *)calloc(pnt_config->MPI_size,sizeof(int));
Functions.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c://					MPI_Abort(pnt_config->MPI_comm,13370);
Functions.c:					pnt_config->flag_NAN=1;
Functions.c:	MPI_Allgather(&NANCounter, 1, MPI_INT, NANCounterArray, 1, MPI_INT,pnt_config->MPI_comm);
Functions.c:	for(i=0;i<pnt_config->MPI_size;i++)
Functions.c://		if(pnt_config->MPI_rank==0){printf("\nSHOCK: ---->  NAN bei %d\n",pnt_config->int_actualIteration);}
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c://					pnt_U_RK->p[ijk]=pnt_config->InitializeValues_p1/20.;
Functions.c://					pnt_U_RK->rho[ijk]=pnt_config->InitializeValues_rho1/20.;
Functions.c:							pnt_U_RK->p[ijk]/pnt_U_RK->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
Functions.c:						sqrt(pnt_config->Upsilon*
Functions.c:						pnt_config->gammaNumber*pnt_U_RK->p[ijk]/pnt_U_RK->rho[ijk]);
Functions.c:					pnt_U_RK->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*pow(pnt_U_RK->p[ijk]/pnt_U_RK->rho[ijk],1.5)/
Functions.c:						(pnt_U_RK->p[ijk]/pnt_U_RK->rho[ijk]+pnt_config->SutherlandConstant));
Functions.c:	for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:	for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:		for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:			ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk3=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:            }else if (i==pnt_config->int_iEndGhosts){
Functions.c:					ijk2=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk2=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk3=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				for (int_symmetryIndex=1; int_symmetryIndex <=(pnt_config->int_SpaceOrder+1)/2 ; int_symmetryIndex++)
Functions.c:					ijk=(i+(int_symmetryIndex-1)*int_direction_corrector)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijkSymmetry=(i-int_symmetryIndex*int_direction_corrector)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:							((i+(int_symmetryIndex-1)*int_direction_corrector)<=pnt_config->int_iEndGhosts)&&
Functions.c:							((i+(int_symmetryIndex-1)*int_direction_corrector)>=pnt_config->int_iStartGhosts)&&
Functions.c:							((i-int_symmetryIndex*int_direction_corrector)<=pnt_config->int_iEndGhosts)&&
Functions.c:							((i-int_symmetryIndex*int_direction_corrector)>=pnt_config->int_iStartGhosts)
Functions.c:						if((pnt_config->flag_IBC_Moving==1) && (pnt_mesh->y[ijk] > 0.5))
Functions.c:						else if((pnt_config->flag_IBC_Moving==1) && (pnt_mesh->y[ijk] <= 0.5))
Functions.c:						/*else if(pnt_config->flag_Inviscid==1)
Functions.c:	for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:	for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:		for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:			ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:            }else if (j==pnt_config->int_jEndGhosts){
Functions.c:					ijk2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				for (int_symmetryIndex=1; int_symmetryIndex <=(pnt_config->int_SpaceOrder+1)/2 ; int_symmetryIndex++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+(int_symmetryIndex-1)*int_direction_corrector)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-int_symmetryIndex*int_direction_corrector)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:							((j+(int_symmetryIndex-1)*int_direction_corrector)<=pnt_config->int_jEndGhosts)&&
Functions.c:							((j+(int_symmetryIndex-1)*int_direction_corrector)>=pnt_config->int_jStartGhosts)&&
Functions.c:							((j-int_symmetryIndex*int_direction_corrector)<=pnt_config->int_jEndGhosts)&&
Functions.c:							((j-int_symmetryIndex*int_direction_corrector)>=pnt_config->int_jStartGhosts)
Functions.c:						if((pnt_config->flag_IBC_Moving==1) && (pnt_mesh->y[ijk] > 0.5))
Functions.c:						else if((pnt_config->flag_IBC_Moving==1) && (pnt_mesh->y[ijk] <= 0.5))
Functions.c:						/*else if(pnt_config->flag_Inviscid==1)
Functions.c:	for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:	for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:		for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:			ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
Functions.c:            }else if(k==pnt_config->int_kEndGhosts){
Functions.c:					ijk2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
Functions.c:					ijk3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:					ijk2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
Functions.c:					ijk3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
Functions.c:				for (int_symmetryIndex=1; int_symmetryIndex <= (pnt_config->int_SpaceOrder+1)/2; int_symmetryIndex++)
Functions.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(k+(int_symmetryIndex-1)*int_direction_corrector);
Functions.c:					ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(k-int_symmetryIndex*int_direction_corrector);
Functions.c:							((k+(int_symmetryIndex-1)*int_direction_corrector)<=pnt_config->int_kEndGhosts)&&
Functions.c:							((k+(int_symmetryIndex-1)*int_direction_corrector)>=pnt_config->int_kStartGhosts)&&
Functions.c:							((k-int_symmetryIndex*int_direction_corrector)<=pnt_config->int_kEndGhosts)&&
Functions.c:							((k-int_symmetryIndex*int_direction_corrector)>=pnt_config->int_kStartGhosts)
Functions.c:						if((pnt_config->flag_IBC_Moving==1) && (pnt_mesh->y[ijk] > 0.5))
Functions.c:						else if((pnt_config->flag_IBC_Moving==1) && (pnt_mesh->y[ijk] <= 0.5))
Functions.c:						/*else if(pnt_config->flag_Inviscid==1)
Functions.c:	pnt_config->int_kStartReal=pnt_config->int_kMid;
Functions.c:	pnt_config->int_kEndReal=pnt_config->int_kMid;
Functions.c:	pnt_config->int_kStartGhosts=pnt_config->int_kMid;
Functions.c:	pnt_config->int_kEndGhosts=pnt_config->int_kMid;
Functions.c:	pnt_config->int_kStartReal=pnt_config->int_kStartReal_original;
Functions.c:	pnt_config->int_kEndReal=pnt_config->int_kEndReal_original;
Functions.c:	pnt_config->int_kStartGhosts=pnt_config->int_kStartGhosts_original;
Functions.c:	pnt_config->int_kEndGhosts=pnt_config->int_kEndGhosts_original;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c: 				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c: 				ijk_0=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kMid;
Functions.c:	ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		index0_xi=(i+(m-(SPACEORDER+1)/2))*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		index1_xi=(i+(m-(SPACEORDER+1)/2)+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		index0_eta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+(m-(SPACEORDER+1)/2))*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		index1_eta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+(m-(SPACEORDER+1)/2+1))*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		index0_zeta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(k+(m-(SPACEORDER+1)/2));
Functions.c:		index1_zeta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(k+(m-(SPACEORDER+1)/2+1));
Functions.c:		u_iMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->u[index0_xi];		u_iPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->u[index1_xi];
Functions.c:		v_iMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->v[index0_xi];		v_iPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->v[index1_xi];
Functions.c:		w_iMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->w[index0_xi];		w_iPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->w[index1_xi];
Functions.c:		u_jMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->u[index0_eta];		u_jPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->u[index1_eta];
Functions.c:		v_jMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->v[index0_eta];		v_jPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->v[index1_eta];
Functions.c:		w_jMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->w[index0_eta];		w_jPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->w[index1_eta];
Functions.c:		u_kMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->u[index0_zeta];	u_kPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->u[index1_zeta];
Functions.c:		v_kMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->v[index0_zeta];	v_kPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->v[index1_zeta];
Functions.c:		w_kMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->w[index0_zeta];	w_kPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[m]*pnt_U_lastStep->w[index1_zeta];
Functions.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Functions.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:						(pnt_U_RK->e[ijk]+pnt_config->Upsilon*pnt_U_RK->p[ijk]/pnt_U_RK->rho[ijk])
Functions.c:	X=pnt_config->time_dim;
Functions.c:	if((pnt_config->int_actualIteration%pnt_config->IBC_MovingStepsize==0)||
Functions.c:			(pnt_config->int_actualIteration==pnt_config->int_StartIteration))
Functions.c:		if(pnt_config->IBC_MovingType==1)
Functions.c:			X=X*1000.*pnt_config->IBC_SpeedFactor;
Functions.c:			return (pnt_config->IBC_StartpositionX+Y);
Functions.c:		else if(pnt_config->IBC_MovingType==2)
Functions.c:			X=X*1000.*pnt_config->IBC_SpeedFactor;
Functions.c:			return (pnt_config->IBC_StartpositionX+Y);
Functions.c:			Y=pnt_config->time_dim*pnt_config->IBC_MovingSpeed/pnt_config->L0_dim;
Functions.c:			return (pnt_config->IBC_StartpositionX+Y);
Functions.c:		return (pnt_config->IBC_MovingActualPosition);
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:		j=pnt_config->int_jMid;
Functions.c:		j=pnt_config->int_jMid;
Functions.c:		k=pnt_config->int_kMid;
Functions.c:/*		printf("mid %d %d %d\n",pnt_config->int_iMid,pnt_config->int_jMid,pnt_config->int_kMid);
Functions.c:		printf("start real %d %d %d\n",pnt_config->int_iStartReal,pnt_config->int_jStartReal,pnt_config->int_kStartReal);
Functions.c:		printf("end real %d %d %d\n",pnt_config->int_iEndReal,pnt_config->int_jEndReal,pnt_config->int_kEndReal);
Functions.c:		printf("start ghosts %d %d %d\n",pnt_config->int_iStartGhosts,pnt_config->int_jStartGhosts,pnt_config->int_kStartGhosts);
Functions.c:		printf("end ghosts %d %d %d\n",pnt_config->int_iEndGhosts,pnt_config->int_jEndGhosts,pnt_config->int_kEndGhosts);
Functions.c:		ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k; */
Functions.c:				pnt_config->MPI_rank,
Functions.c:	ijkMAX=pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijk_extrapolate=i_extrapolate*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				iPlus1jk=(i_extrapolate+1)*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate;
Functions.c:				iMinus1jk=(i_extrapolate-1)*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate;
Functions.c:				ijPlus1k=i_extrapolate*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+(j_extrapolate+1)*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate;
Functions.c:				ijMinus1k=i_extrapolate*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+(j_extrapolate-1)*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate;
Functions.c:				ijkPlus1=i_extrapolate*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate+1;
Functions.c:				ijkMinus1=i_extrapolate*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate-1;
Functions.c:					x_xi=(-0.5*pnt_mesh->x_extrapolate[iMinus1jk]+0.5*pnt_mesh->x_extrapolate[iPlus1jk])/pnt_config->deltaXi;
Functions.c:					y_xi=(-0.5*pnt_mesh->y_extrapolate[iMinus1jk]+0.5*pnt_mesh->y_extrapolate[iPlus1jk])/pnt_config->deltaXi;
Functions.c:					x_eta=(-0.5*pnt_mesh->x_extrapolate[ijMinus1k]+0.5*pnt_mesh->x_extrapolate[ijPlus1k])/pnt_config->deltaEta;
Functions.c:					y_eta=(-0.5*pnt_mesh->y_extrapolate[ijMinus1k]+0.5*pnt_mesh->y_extrapolate[ijPlus1k])/pnt_config->deltaEta;
Functions.c:					x_xi=(-0.5*pnt_mesh->x_extrapolate[iMinus1jk]+0.5*pnt_mesh->x_extrapolate[iPlus1jk])/pnt_config->deltaXi;
Functions.c:					y_xi=(-0.5*pnt_mesh->y_extrapolate[iMinus1jk]+0.5*pnt_mesh->y_extrapolate[iPlus1jk])/pnt_config->deltaXi;
Functions.c:					z_xi=(-0.5*pnt_mesh->z_extrapolate[iMinus1jk]+0.5*pnt_mesh->z_extrapolate[iPlus1jk])/pnt_config->deltaXi;
Functions.c:					x_eta=(-0.5*pnt_mesh->x_extrapolate[ijMinus1k]+0.5*pnt_mesh->x_extrapolate[ijPlus1k])/pnt_config->deltaEta;
Functions.c:					y_eta=(-0.5*pnt_mesh->y_extrapolate[ijMinus1k]+0.5*pnt_mesh->y_extrapolate[ijPlus1k])/pnt_config->deltaEta;
Functions.c:					z_eta=(-0.5*pnt_mesh->z_extrapolate[ijMinus1k]+0.5*pnt_mesh->z_extrapolate[ijPlus1k])/pnt_config->deltaEta;
Functions.c:					x_zeta=(-0.5*pnt_mesh->x_extrapolate[ijkMinus1]+0.5*pnt_mesh->x_extrapolate[ijkPlus1])/pnt_config->deltaZeta;
Functions.c:					y_zeta=(-0.5*pnt_mesh->y_extrapolate[ijkMinus1]+0.5*pnt_mesh->y_extrapolate[ijkPlus1])/pnt_config->deltaZeta;
Functions.c:					z_zeta=(-0.5*pnt_mesh->z_extrapolate[ijkMinus1]+0.5*pnt_mesh->z_extrapolate[ijkPlus1])/pnt_config->deltaZeta;
Functions.c:	int_symmetryIndex=pnt_config->int_iStartReal;
Functions.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
Functions.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry2=(int_symmetryIndex+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	int_symmetryIndex=pnt_config->int_iEndReal;
Functions.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry2=(int_symmetryIndex-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		int_symmetryIndex=pnt_config->int_jStartReal;
Functions.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(int_symmetryIndex+1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		int_symmetryIndex=pnt_config->int_jEndReal;
Functions.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(int_symmetryIndex-1)*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			int_symmetryIndex=pnt_config->int_kStartReal;
Functions.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex+1;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			int_symmetryIndex=pnt_config->int_kEndReal;
Functions.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex-1;
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijk_extrapolate=i_extrapolate*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+k_extrapolate;
Functions.c:	int_symmetryIndex=pnt_config->int_iStartReal_extrapolate;
Functions.c:	for (i=pnt_config->int_iStartReal_extrapolate-1; i >= pnt_config->int_iStartGhosts_extrapolate; i--)
Functions.c:		for (j=pnt_config->int_jStartReal_extrapolate; j <= pnt_config->int_jEndReal_extrapolate; j++)
Functions.c:			for (k=pnt_config->int_kStartReal_extrapolate; k <= pnt_config->int_kEndReal_extrapolate; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry2=(int_symmetryIndex+1)*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:	int_symmetryIndex=pnt_config->int_iEndReal_extrapolate;
Functions.c:	for (i=pnt_config->int_iEndReal_extrapolate+1; i <= pnt_config->int_iEndGhosts_extrapolate; i++)
Functions.c:		for (j=pnt_config->int_jStartReal_extrapolate; j <= pnt_config->int_jEndReal_extrapolate; j++)
Functions.c:			for (k=pnt_config->int_kStartReal_extrapolate; k <= pnt_config->int_kEndReal_extrapolate; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry2=(int_symmetryIndex-1)*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts_extrapolate; i <= pnt_config->int_iEndGhosts_extrapolate; i++)
Functions.c:		int_symmetryIndex=pnt_config->int_jStartReal_extrapolate;
Functions.c:		for (j=pnt_config->int_jStartReal_extrapolate-1; j >= pnt_config->int_jStartGhosts_extrapolate; j--)
Functions.c:			for (k=pnt_config->int_kStartReal_extrapolate; k <= pnt_config->int_kEndReal_extrapolate; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+(j+1)*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+(int_symmetryIndex+1)*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts_extrapolate; i <= pnt_config->int_iEndGhosts_extrapolate; i++)
Functions.c:		int_symmetryIndex=pnt_config->int_jEndReal_extrapolate;
Functions.c:		for (j=pnt_config->int_jEndReal_extrapolate+1; j <= pnt_config->int_jEndGhosts_extrapolate; j++)
Functions.c:			for (k=pnt_config->int_kStartReal_extrapolate; k <= pnt_config->int_kEndReal_extrapolate; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+(j-1)*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+(int_symmetryIndex-1)*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:	for (i=pnt_config->int_iStartGhosts_extrapolate; i <= pnt_config->int_iEndGhosts_extrapolate; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts_extrapolate; j <= pnt_config->int_jEndGhosts_extrapolate; j++)
Functions.c:			int_symmetryIndex=pnt_config->int_kStartReal_extrapolate;
Functions.c:			for (k=pnt_config->int_kStartReal_extrapolate-1; k >= pnt_config->int_kStartGhosts_extrapolate; k--)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k+1;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+int_symmetryIndex;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+int_symmetryIndex+1;
Functions.c:	for (i=pnt_config->int_iStartGhosts_extrapolate; i <= pnt_config->int_iEndGhosts_extrapolate; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts_extrapolate; j <= pnt_config->int_jEndGhosts_extrapolate; j++)
Functions.c:			int_symmetryIndex=pnt_config->int_kEndReal_extrapolate;
Functions.c:			for (k=pnt_config->int_kEndReal_extrapolate+1; k <= pnt_config->int_kEndGhosts_extrapolate; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k;
Functions.c:				ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+k-1;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+int_symmetryIndex;
Functions.c:				ijkSymmetry2=i*pnt_config->int_jMeshPointsGhostCells_extrapolate*pnt_config->int_kMeshPointsGhostCells_extrapolate+j*pnt_config->int_kMeshPointsGhostCells_extrapolate+int_symmetryIndex-1;
Functions.c:	if((strcmp(pnt_config->BC_Left,pnt_config->BCWallInviscid)==0)
Functions.c:		(strcmp(pnt_config->BC_Left,pnt_config->BCWallViscous)==0)
Functions.c:		(strcmp(pnt_config->BC_Left,pnt_config->BCFarfield)==0)
Functions.c:		(strcmp(pnt_config->BC_Left,pnt_config->BCWallViscousIsothermal)==0))
Functions.c:	int_symmetryIndex=pnt_config->int_iStartReal;
Functions.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	if((strcmp(pnt_config->BC_Right,pnt_config->BCWallInviscid)==0)
Functions.c:		(strcmp(pnt_config->BC_Right,pnt_config->BCWallViscous)==0)
Functions.c:		(strcmp(pnt_config->BC_Right,pnt_config->BCFarfield)==0)
Functions.c:		(strcmp(pnt_config->BC_Right,pnt_config->BCWallViscousIsothermal)==0))
Functions.c:	int_symmetryIndex=pnt_config->int_iEndReal;
Functions.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=int_symmetryIndex*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	if((strcmp(pnt_config->BC_Bottom,pnt_config->BCWallInviscid)==0)
Functions.c:		(strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscous)==0)
Functions.c:		(strcmp(pnt_config->BC_Bottom,pnt_config->BCFarfield)==0)
Functions.c:		(strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscousIsothermal)==0))
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		int_symmetryIndex=pnt_config->int_jStartReal;
Functions.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	if((strcmp(pnt_config->BC_Top,pnt_config->BCWallInviscid)==0)
Functions.c:		(strcmp(pnt_config->BC_Top,pnt_config->BCWallViscous)==0)
Functions.c:		(strcmp(pnt_config->BC_Top,pnt_config->BCFarfield)==0)
Functions.c:		(strcmp(pnt_config->BC_Top,pnt_config->BCWallViscousIsothermal)==0))		
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		int_symmetryIndex=pnt_config->int_jEndReal;
Functions.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:	if((strcmp(pnt_config->BC_Behind,pnt_config->BCWallInviscid)==0)
Functions.c:		(strcmp(pnt_config->BC_Behind,pnt_config->BCWallViscous)==0)
Functions.c:		(strcmp(pnt_config->BC_Behind,pnt_config->BCFarfield)==0)
Functions.c:		(strcmp(pnt_config->BC_Behind,pnt_config->BCWallViscousIsothermal)==0))		
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			int_symmetryIndex=pnt_config->int_kStartReal;
Functions.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
Functions.c:	if((strcmp(pnt_config->BC_InFront,pnt_config->BCWallInviscid)==0)
Functions.c:		(strcmp(pnt_config->BC_InFront,pnt_config->BCWallViscous)==0)
Functions.c:		(strcmp(pnt_config->BC_InFront,pnt_config->BCFarfield)==0)
Functions.c:		(strcmp(pnt_config->BC_InFront,pnt_config->BCWallViscousIsothermal)==0))		
Functions.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
Functions.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
Functions.c:			int_symmetryIndex=pnt_config->int_kEndReal;
Functions.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
Functions.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Functions.c:				ijkSymmetry=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_symmetryIndex;
Import.c:    ini = iniparser_load(pnt_config->chr_configPath);
Import.c:        fprintf(stderr, "cannot parse config file: %s\n", pnt_config->chr_configPath);
Import.c:	pnt_config->int_initializeType = iniparser_getint(ini, "general:initializationtype", 1);
Import.c:	sprintf(pnt_config->chr_MeshPath, "%s", iniparser_getstring(ini, "general:meshpath", NULL));
Import.c:	pnt_config->int_TotalIterations= iniparser_getint(ini, "general:iterations", -1);
Import.c:	pnt_config->int_EndIteration=pnt_config->int_TotalIterations;
Import.c:	pnt_config->int_Samples = iniparser_getint(ini, "general:samples", -1);
Import.c:	pnt_config->int_StartSampling = iniparser_getint(ini, "general:StartSampling", 0);
Import.c:	pnt_config->int_NumberBackups = iniparser_getint(ini, "general:Backup-Exports", 0);
Import.c:	pnt_config->flag_TauAccelerator = iniparser_getboolean(ini, "general:TauAccelerator", 0);
Import.c:	pnt_config->flag_swapDivisionFile = iniparser_getint(ini, "general:SwapDivFile", 0);	
Import.c:	pnt_config->int_SpaceOrder=SPACEORDER;
Import.c:	pnt_config->int_TimeOrder = iniparser_getint(ini, "numerics:TimeOrder", 4);
Import.c:	pnt_config->numericalTau = iniparser_getdouble(ini, "numerics:tau", -1);
Import.c:	pnt_config->numericalTauStart=pnt_config->numericalTau;
Import.c:	pnt_config->TauAccelerator_factor = iniparser_getdouble(ini, "tau:tauaccelerator_factor", 1.1);
Import.c:	pnt_config->TauDecelerator_factor = iniparser_getdouble(ini, "tau:taudecelerator_factor", 0.7);
Import.c:	pnt_config->int_NumberResets = iniparser_getint(ini, "tau:NumberResets", 10);
Import.c:	pnt_config->int_distanceNAN = iniparser_getdouble(ini, "tau:DistanceNAN", 5000);
Import.c:	pnt_config->int_distanceForward = iniparser_getdouble(ini, "tau:DistanceForward", 1000);
Import.c:	pnt_config->int_distanceBackward = iniparser_getdouble(ini, "tau:DistanceBackward", 200);
Import.c:	pnt_config->int_distanceForwardStart=pnt_config->int_distanceForward;
Import.c:	pnt_config->flag_BC_option_inflow_normal_sub=iniparser_getboolean(ini, "boundaryconditions:Inflow-Normal-Subsonic", -1);
Import.c:	pnt_config->flag_BC_option_inflow_riemann_sub=iniparser_getboolean(ini, "boundaryconditions:Inflow-Riemann-Subsonic", -1);
Import.c:	pnt_config->flag_BC_option_inflow_isentrop_sub=iniparser_getboolean(ini, "boundaryconditions:Inflow-Isentrop-Subsonic", -1);
Import.c:	pnt_config->flag_BC_option_inflow_normal_super=iniparser_getboolean(ini, "boundaryconditions:Inflow-Normal-Supersonic", -1);
Import.c:	if((pnt_config->flag_BC_option_inflow_normal_sub+
Import.c:			pnt_config->flag_BC_option_inflow_riemann_sub+
Import.c:			pnt_config->flag_BC_option_inflow_isentrop_sub+
Import.c:			pnt_config->flag_BC_option_inflow_normal_super)!=1)
Import.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: ERROR: Fehlerhafte Eingabe fuer Inflow-Randbedingung\n");}
Import.c:		MPI_Barrier(pnt_config->MPI_comm);
Import.c:		MPI_Abort(pnt_config->MPI_comm,13371);
Import.c:	pnt_config->flag_BC_option_outflow_normal_sub=iniparser_getboolean(ini, "boundaryconditions:Outflow-Normal-Subsonic", -1);
Import.c:	pnt_config->flag_BC_option_outflow_riemann_sub=iniparser_getboolean(ini, "boundaryconditions:Outflow-Riemann-Subsonic", -1);
Import.c:	pnt_config->flag_BC_option_outflow_rudy_sub=iniparser_getboolean(ini, "boundaryconditions:Outflow-Rudy-Subsonic", -1);
Import.c:	if((pnt_config->flag_BC_option_outflow_normal_sub+
Import.c:			pnt_config->flag_BC_option_outflow_riemann_sub+
Import.c:			pnt_config->flag_BC_option_outflow_rudy_sub)!=1)
Import.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: ERROR: Fehlerhafte Eingabe fuer Outflow-Randbedingung\n");}
Import.c:		MPI_Barrier(pnt_config->MPI_comm);
Import.c:		MPI_Abort(pnt_config->MPI_comm,13372);
Import.c:	pnt_config->rho_inflow = iniparser_getdouble(ini, "boundaryconditions:rho_inflow", 1);
Import.c:	pnt_config->p_inflow = iniparser_getdouble(ini, "boundaryconditions:p_inflow", 1);
Import.c:	pnt_config->AoA = iniparser_getdouble(ini, "boundaryconditions:AoA", 0);
Import.c:	pnt_config->p_out = iniparser_getdouble(ini, "boundaryconditions:p_outflow", 1);
Import.c:	pnt_config->T_wall = iniparser_getdouble(ini, "boundaryconditions:T_wall", 1);
Import.c:	pnt_config->machNumber = iniparser_getdouble(ini, "fluidproperties:mach", -1);
Import.c:	pnt_config->reynoldsNumber = iniparser_getdouble(ini, "fluidproperties:reynolds", -1);
Import.c:	pnt_config->prandtlNumber = iniparser_getdouble(ini, "fluidproperties:Prandtl", -1);
Import.c:	pnt_config->gammaNumber = iniparser_getdouble(ini, "fluidproperties:Gamma", -1);
Import.c:	pnt_config->gasConstantNumber = iniparser_getdouble(ini, "fluidproperties:R", -1);
Import.c:	pnt_config->T0_dim = iniparser_getdouble(ini, "fluidproperties:T", -1);
Import.c:	pnt_config->L0_dim = iniparser_getdouble(ini, "fluidproperties:L", -1);
Import.c:	pnt_config->flag_exportMetric = iniparser_getboolean(ini, "export:metric", -1);
Import.c:	pnt_config->flag_ReducedExport = iniparser_getboolean(ini, "export:reduced", 0);
Import.c:	pnt_config->int_specialInitializeType = iniparser_getint(ini, "options:SpecialInitializeType", 0);
Import.c:	pnt_config->flag_constantZValues = iniparser_getboolean(ini, "options:3Dto2D", 0);
Import.c:	pnt_config->flag_IBC = iniparser_getboolean(ini, "options:IBC", 0);
Import.c:	pnt_config->flag_LaminarBoundary = iniparser_getboolean(ini, "options:LaminarBoundary", 0);
Import.c:	pnt_config->flag_PressureHistory = iniparser_getboolean(ini, "options:PressureHistory", 0);
Import.c:	pnt_config->flag_VelocityHistory = iniparser_getboolean(ini, "options:VelocityHistory", 0);
Import.c:	pnt_config->flag_PressureWaves = iniparser_getboolean(ini, "options:PressureWaves", 0);
Import.c:	pnt_config->flag_Inviscid = iniparser_getboolean(ini, "options:Inviscid", 0);
Import.c:	pnt_config->flag_Vortex = iniparser_getboolean(ini, "options:Vortex", 0);
Import.c:	pnt_config->flag_rotation_symmetric = iniparser_getboolean(ini, "options:2D-Rotation-Symmetric", 0);
Import.c:	pnt_config->flag_ManufacturedSolution = iniparser_getboolean(ini, "options:ManufacturedSolution", 0);
Import.c:	pnt_config->LaminarBoundary_xStart = iniparser_getdouble(ini, "LaminarBoundary:x-Startposition", -1);
Import.c:	pnt_config->pw_UseBC = iniparser_getboolean(ini, "PressureWaves:UseBC", 0);
Import.c:	pnt_config->pw_UseFlowAverage = iniparser_getboolean(ini, "PressureWaves:UseFlowAverage", 0);
Import.c:	pnt_config->pw_numberSources = iniparser_getint(ini, "PressureWaves:NumberSources", 1);
Import.c:	pnt_config->pw_x0 = iniparser_getdouble(ini, "PressureWaves:x0-Location", 0);
Import.c:	pnt_config->pw_y0 = iniparser_getdouble(ini, "PressureWaves:y0-Location", 0);
Import.c:	pnt_config->pw_z0 = iniparser_getdouble(ini, "PressureWaves:z0-Location", 0);
Import.c:	pnt_config->pw_x1 = iniparser_getdouble(ini, "PressureWaves:x1-Location", 0);
Import.c:	pnt_config->pw_y1 = iniparser_getdouble(ini, "PressureWaves:y1-Location", 0);
Import.c:	pnt_config->pw_z1 = iniparser_getdouble(ini, "PressureWaves:z1-Location", 0);
Import.c:	pnt_config->pw_r0 = iniparser_getdouble(ini, "PressureWaves:Radius", 1);
Import.c:	pnt_config->pw_amplitude = iniparser_getdouble(ini, "PressureWaves:Amplitude", 1);
Import.c:	pnt_config->pw_frequency = iniparser_getdouble(ini, "PressureWaves:Frequency", 1);
Import.c:	pnt_config->Vortex_x_wirb_zentr = iniparser_getdouble(ini, "Vortex:x-Location", -1);
Import.c:	pnt_config->Vortex_y_wirb_zentr = iniparser_getdouble(ini, "Vortex:y-Location", -1);
Import.c:	pnt_config->Vortex_r_wirb_max = iniparser_getdouble(ini, "Vortex:Radius", -1);
Import.c:	pnt_config->Vortex_faktor_quer = iniparser_getdouble(ini, "Vortex:f", -1);
Import.c:	pnt_config->Vortex_beta = iniparser_getdouble(ini, "Vortex:beta", -1);
Import.c:	if(pnt_config->flag_PressureHistory==1)
Import.c:		pnt_config->PressureHistory_No = iniparser_getint(ini, "PressureHistory:NumberLocations", 4);
Import.c:		pnt_config->PressureHistory_x_P = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Import.c:		pnt_config->PressureHistory_y_P = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Import.c:		pnt_config->PressureHistory_z_P = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Import.c:		pnt_config->PressureHistory_x_P_real = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Import.c:		pnt_config->PressureHistory_y_P_real = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Import.c:		pnt_config->PressureHistory_z_P_real = (FLT *)calloc(pnt_config->PressureHistory_No, sizeof(FLT ));
Import.c:		pnt_config->PressureHistory_time=(FLT *)calloc(pnt_config->int_TotalIterations, sizeof(FLT ));
Import.c:		pnt_config->PressureHistory_pressure=(FLT **)calloc(pnt_config->PressureHistory_No, sizeof(FLT *));
Import.c:		for(p=0;p<pnt_config->PressureHistory_No;p++)
Import.c:			pnt_config->PressureHistory_pressure[p]=(FLT *)calloc(pnt_config->int_TotalIterations, sizeof(FLT));
Import.c:		pnt_config->ijk_PressureHistory_P = (int *)calloc(pnt_config->PressureHistory_No, sizeof(int ));
Import.c:		pnt_config->flag_PressureHistory_P = (int *)calloc(pnt_config->PressureHistory_No, sizeof(int ));
Import.c:		for(i=0;i<pnt_config->PressureHistory_No;i++)
Import.c:			pnt_config->PressureHistory_x_P[i] = iniparser_getdouble(ini, pressureHistory_actualName, 0);
Import.c:			pnt_config->PressureHistory_y_P[i] = iniparser_getdouble(ini, pressureHistory_actualName, 0);
Import.c:			pnt_config->PressureHistory_z_P[i] = iniparser_getdouble(ini, pressureHistory_actualName, 0);
Import.c:	if(pnt_config->flag_VelocityHistory==1)
Import.c:		pnt_config->VelocityHistory_No = iniparser_getint(ini, "VelocityHistory:NumberLocations", 4);
Import.c:		pnt_config->VelocityHistory_x_P = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Import.c:		pnt_config->VelocityHistory_y_P = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Import.c:		pnt_config->VelocityHistory_z_P = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Import.c:		pnt_config->VelocityHistory_x_P_real = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Import.c:		pnt_config->VelocityHistory_y_P_real = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Import.c:		pnt_config->VelocityHistory_z_P_real = (FLT *)calloc(pnt_config->VelocityHistory_No, sizeof(FLT ));
Import.c:		pnt_config->VelocityHistory_time=(FLT *)calloc(pnt_config->int_TotalIterations, sizeof(FLT ));
Import.c:		pnt_config->VelocityHistory_VelocityX=(FLT **)calloc(pnt_config->VelocityHistory_No, sizeof(FLT *));
Import.c:		pnt_config->VelocityHistory_VelocityY=(FLT **)calloc(pnt_config->VelocityHistory_No, sizeof(FLT *));
Import.c:		pnt_config->VelocityHistory_VelocityZ=(FLT **)calloc(pnt_config->VelocityHistory_No, sizeof(FLT *));
Import.c:		for(p=0;p<pnt_config->VelocityHistory_No;p++)
Import.c:			pnt_config->VelocityHistory_VelocityX[p]=(FLT *)calloc(pnt_config->int_TotalIterations, sizeof(FLT));
Import.c:			pnt_config->VelocityHistory_VelocityY[p]=(FLT *)calloc(pnt_config->int_TotalIterations, sizeof(FLT));
Import.c:			pnt_config->VelocityHistory_VelocityZ[p]=(FLT *)calloc(pnt_config->int_TotalIterations, sizeof(FLT));
Import.c:		pnt_config->ijk_VelocityHistory_P = (int *)calloc(pnt_config->VelocityHistory_No, sizeof(int ));
Import.c:		pnt_config->flag_VelocityHistory_P = (int *)calloc(pnt_config->VelocityHistory_No, sizeof(int ));
Import.c:		for(i=0;i<pnt_config->VelocityHistory_No;i++)
Import.c:			pnt_config->VelocityHistory_x_P[i] = iniparser_getdouble(ini, velocityHistory_actualName, 0);
Import.c:			pnt_config->VelocityHistory_y_P[i] = iniparser_getdouble(ini, velocityHistory_actualName, 0);
Import.c:			pnt_config->VelocityHistory_z_P[i] = iniparser_getdouble(ini, velocityHistory_actualName, 0);
Import.c:	pnt_config->flag_IBC_Moving = iniparser_getboolean(ini, "IBC:MovingBC", 0);
Import.c:	pnt_config->IBC_Type = iniparser_getint(ini, "IBC:Type", 0);
Import.c:	pnt_config->IBC_StartpositionX = iniparser_getdouble(ini, "IBC:StartpositionX", 0);
Import.c:	pnt_config->IBC_StartpositionY = iniparser_getdouble(ini, "IBC:StartpositionY", 0);
Import.c:	pnt_config->IBC_StartpositionZ = iniparser_getdouble(ini, "IBC:StartpositionZ", 0);
Import.c:	pnt_config->IBC_SizeX = iniparser_getdouble(ini, "IBC:SizeX", 0);
Import.c:	pnt_config->IBC_SizeY = iniparser_getdouble(ini, "IBC:SizeY", 0);
Import.c:	pnt_config->IBC_SizeZ = iniparser_getdouble(ini, "IBC:SizeZ", 0);
Import.c:	pnt_config->IBC_MovingSpeed = iniparser_getdouble(ini, "IBC:Speed", 0);
Import.c:	pnt_config->IBC_MovingType = iniparser_getint(ini, "IBC:Movement", 0);
Import.c:	pnt_config->IBC_SpeedFactor = iniparser_getdouble(ini, "IBC:SpeedFactor", 1.0);
Import.c:	pnt_config->IBC_MovingStepsize = iniparser_getint(ini, "IBC:Stepsize", 100);
Import.c:	pnt_config->InitializeValues_u0 = iniparser_getdouble(ini, "InitializeValues:u0", 1);
Import.c:	pnt_config->InitializeValues_p0 = iniparser_getdouble(ini, "InitializeValues:p0", 1);
Import.c:	pnt_config->InitializeValues_rho0 = iniparser_getdouble(ini, "InitializeValues:rho0", 1);
Import.c:	pnt_config->InitializeValues_p1 = iniparser_getdouble(ini, "InitializeValues:p1", 1);
Import.c:	pnt_config->InitializeValues_rho1 = iniparser_getdouble(ini, "InitializeValues:rho1", 1);
Import.c:	pnt_config->InitializeValues_u1 = iniparser_getdouble(ini, "InitializeValues:u1", 1);
Import.c:	pnt_config->InitializeValues_xBorder = iniparser_getdouble(ini, "InitializeValues:xBorder", 0.);	
Import.c:	pnt_config->u_inflow = cos(pnt_config->AoA/360*2*MY_PI)*pnt_config->InitializeValues_u0;
Import.c:	pnt_config->v_inflow = sin(pnt_config->AoA/360*2*MY_PI)*pnt_config->InitializeValues_u0;
Import.c:	pnt_config->w_inflow = 0.0;
Import.c:	pnt_config->ManufacturedSolution_case = iniparser_getint(ini, "ManufacturedSolution:case", 1);
Import.c:	if((pnt_config->flag_rotation_symmetric==1)&&(pnt_config->int_meshDimensions==3))
Import.c:		if(pnt_config->MPI_rank==0){printf("SHOCK: ERROR: Rotationssymmetrisch und 3D schliesst sich aus\n");}
Import.c:		MPI_Barrier(pnt_config->MPI_comm);
Import.c:		MPI_Abort(pnt_config->MPI_comm,13373);
Import.c:	if(pnt_config->int_Samples>pnt_config->int_TotalIterations)
Import.c:		pnt_config->int_Samples=pnt_config->int_TotalIterations;
Import.c:	if(pnt_config->int_StartSampling>pnt_config->int_TotalIterations)
Import.c:		pnt_config->int_StartSampling=0;
Import.c:	if((pnt_config->int_TotalIterations==0)||(pnt_config->int_Samples==0))
Import.c:		pnt_config->int_Samples=1;
Import.c:		int celldim=pnt_config->int_meshDimensions;
Import.c:	    int buffer=pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints;
Import.c:	    cg_open(pnt_config->chr_MeshPath,CG_MODE_READ,&index_file);
Import.c:	    if(pnt_config->int_initializeType==1)
Import.c:	    	index_zone=pnt_config->MPI_rank+1;
Import.c:		    if (nzone != pnt_config->MPI_size)
Import.c:		      printf("SHOCK: Error. Es werden %d Zonen erwartet. %d sind vorhanden.\n",pnt_config->MPI_size,nzone);
Import.c://	    printf("My rank is %d and my zonename is %s\n",pnt_config->MPI_rank, zonename);
Import.c:	    if (pnt_config->int_meshDimensions==3)
Import.c:		for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
Import.c:			for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
Import.c:				for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
Import.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
Import.c:	//				ijk=k*pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells+j*pnt_config->int_iMeshPointsGhostCells+i;
Import.c:					i2=i-pnt_config->int_iStartReal;
Import.c:					j2=j-pnt_config->int_jStartReal;
Import.c:					k2=k-pnt_config->int_kStartReal;
Import.c:					ijk2=k2*pnt_config->int_jMeshPoints*pnt_config->int_iMeshPoints+j2*pnt_config->int_iMeshPoints+i2;
Import.c:	int dim=pnt_config->int_meshDimensions;
Import.c:	cg_open(pnt_config->chr_MeshPath,CG_MODE_READ,&index_file);
Import.c:    if(pnt_config->int_initializeType==1)
Import.c:    	index_zone=pnt_config->MPI_rank+1;
Import.c:	if (pnt_config->MPI_rank==0){printf("SHOCK: Folgende Randbedingungen wurden gesetzt: ");}
Import.c:			if (pnt_config->MPI_rank==0)
Import.c:	if (pnt_config->MPI_rank==0)
Import.c:			if((ipnts[0]==1)&&(ipnts[0+dim]==1)){strcpy(pnt_config->BC_Left,BCName[i]);}
Import.c:			if((ipnts[0]!=1)&&(ipnts[0+dim]!=1)){strcpy(pnt_config->BC_Right,BCName[i]);}
Import.c:			if((ipnts[1]==1)&&(ipnts[1+dim]==1)){strcpy(pnt_config->BC_Bottom,BCName[i]);}
Import.c:			if((ipnts[1]!=1)&&(ipnts[1+dim]!=1)){strcpy(pnt_config->BC_Top,BCName[i]);}
Import.c:				if((ipnts[2]==1)&&(ipnts[2+dim]==1)){strcpy(pnt_config->BC_Behind,BCName[i]);}
Import.c:				if((ipnts[2]!=1)&&(ipnts[2+dim]!=1)){strcpy(pnt_config->BC_InFront,BCName[i]);}
Import.c://	if(pnt_config->MPI_rank==0)
Import.c://				pnt_config->Zonename,
Import.c://				pnt_config->BC_Left,
Import.c://				pnt_config->BC_Right,
Import.c://				pnt_config->BC_Top,
Import.c://				pnt_config->BC_Bottom,
Import.c://				pnt_config->BC_Behind,
Import.c://				pnt_config->BC_InFront);
Load.c:#	define TM_END(msg) if(pnt_config->MPI_rank==0){printf(msg " took %g seconds\n",MPI_Wtime( )-ts );}
Load.c:		{ &pnt_config->InterfaceNeighbourLeft,&pnt_config->InterfaceNeighbourRight },
Load.c:		{ &pnt_config->InterfaceNeighbourBottom,&pnt_config->InterfaceNeighbourTop },
Load.c:		{ &pnt_config->InterfaceNeighbourBehind,&pnt_config->InterfaceNeighbourInFront }
Load.c:		{ &pnt_config->BC_Left,&pnt_config->BC_Right },
Load.c:		{ &pnt_config->BC_Bottom,&pnt_config->BC_Top }
Load.c:		DIM3( ,{ &pnt_config->BC_Behind,&pnt_config->BC_InFront } )
Load.c:	if (pnt_config->flag_swapDivisionFile==1) //force to stop swapping
Load.c:	if (pnt_config->flag_swapDivisionFile==2) //force to swap
Load.c:	char* zonename = pnt_config->Zonename;
Load.c:	CG( cgp_open( pnt_config->chr_MeshPath,CG_MODE_READ,&file ) );
Load.c:	if(pnt_config->MPI_rank==0)
Load.c:		if(pnt_config->flag_swapDivisionFile==1)
Load.c:		else if(pnt_config->flag_swapDivisionFile==2)
Load.c:	loadDivision( pnt_config,pnt_config->chr_DivisionPath,pnt_config->MPI_rank+1,zonename,corners,neighbours,&ni,pnt_config->MPI_size );
Load.c:			pnt_config->int_StartIteration = atol( dtext );
Load.c: * for( i = 0; i<pnt_config->NumberInterfaces; i++ ) {
Load.c: * 	free( pnt_config->TransformMatrixOfInterface[ i ] );
Load.c: * 	free( pnt_config->DonorRangeOfInterface[ i ] );
Load.c: * 	free( pnt_config->Translation[ i ] );
Load.c: * 	free( pnt_config->RotationCenter[ i ] );
Load.c: * 	free( pnt_config->RotationAngle[ i ] );
Load.c:	pnt_config->MPI_rankNeighbours = malloc( ni*sizeof( unsigned ) );
Load.c:	pnt_config->TransformMatrixOfInterface = malloc( ni*sizeof( int* ) );
Load.c:	pnt_config->DonorRangeOfInterface = malloc( ni*sizeof( cgsize_t* ) );
Load.c:	pnt_config->RangeOfInterface = malloc( ni*sizeof( cgsize_t* ) );
Load.c:	pnt_config->Translation = malloc( ni*sizeof( float* ) );
Load.c:	pnt_config->RotationCenter = malloc( ni*sizeof( float* ) );
Load.c:	pnt_config->RotationAngle = malloc( ni*sizeof( float* ) );
Load.c:	pnt_config->NumberInterfaces = ni;
Load.c:		pnt_config->zonesize[ i ]= corners[ 1 ][ i ]-corners[ 0 ][ i ]+1;
Load.c:		pnt_config->offset[ i ]= corners[ 0 ][ i ]-1;
Load.c:				pnt_config->TransformMatrixOfInterface[ ii ] = malloc( DIM*sizeof( int ) );
Load.c:				pnt_config->DonorRangeOfInterface[ ii ]= malloc( 2*DIM*sizeof( cgsize_t ) );
Load.c:				pnt_config->RangeOfInterface[ ii ]= malloc( 2*DIM*sizeof( cgsize_t ) );
Load.c:				pnt_config->Translation[ ii ]= malloc( PHYSDIM*sizeof( float ) );
Load.c:				pnt_config->RotationCenter[ ii ]= malloc( PHYSDIM*sizeof( float ) );
Load.c:				pnt_config->RotationAngle[ ii ]= malloc( PHYSDIM*sizeof( float ) );
Load.c:				pnt_config->MPI_rankNeighbours[ ii ]= neighbours[ i ][ j ].neighbour-1;
Load.c:				memcpy( pnt_config->TransformMatrixOfInterface[ ii ],neighbours[ i ][ j ].transform,DIM*sizeof( int ) );
Load.c:				memcpy( pnt_config->DonorRangeOfInterface[ ii ],neighbours[ i ][ j ].drange,2*DIM*sizeof( cgsize_t ) );
Load.c:				memcpy( pnt_config->RangeOfInterface[ ii ],neighbours[ i ][ j ].range,2*DIM*sizeof( cgsize_t ) );
Load.c:				memcpy( pnt_config->Translation[ ii ],neighbours[ i ][ j ].tr,PHYSDIM*sizeof( float ) );
Load.c:				memcpy( pnt_config->RotationCenter[ ii ],neighbours[ i ][ j ].rc,PHYSDIM*sizeof( float ) );
Load.c:				memcpy( pnt_config->RotationAngle[ ii ],neighbours[ i ][ j ].ra,PHYSDIM*sizeof( float ) );
Load.c:		pnt_config->MPI_rank,
Load.c:		(int)pnt_config->offset[ 0 ],(int)pnt_config->offset[ 1 ] DIM3( ,(int)pnt_config->offset[ 2 ] ),
Load.c:		(int)pnt_config->zonesize[ 0 ],(int)pnt_config->zonesize[ 1 ] DIM3( ,(int)pnt_config->zonesize[ 2 ] ),
Load.c:							cgsize_t low = 1+pnt_config->offset[ dir ];
Load.c:							cgsize_t high = 1+pnt_config->zonesize[ dir ]+pnt_config->offset[ dir ];
Load.c:								{ &pnt_config->BC_Left,&pnt_config->BC_Right },
Load.c:								{ &pnt_config->BC_Bottom,&pnt_config->BC_Top }
Load.c:								DIM3( ,{ &pnt_config->BC_Behind,&pnt_config->BC_InFront } )
Load.c:	const long long pointcount = pnt_config->zonesize[ 0 ]*pnt_config->zonesize[ 1 ] DIM3( *pnt_config->zonesize[ 2 ] );
Load.c:					pnt_config->time_dim =( (double*)timearray )[ dimv[ 0 ]-1 ];
Load.c:					pnt_config->time_dim =( (float*)timearray )[ dimv[ 0 ]-1 ];
Load.c:		pnt_config->time_dim = 0;
Load.c:	if(( sol<=nsols )&&(abs(pnt_config->int_initializeType)==1)) {
Load.c:						if(pnt_config->MPI_rank==0){printf("SHOCK:  Using command 'cgp_field_read_data'\n");}
Load.c:						if(pnt_config->MPI_rank==0){printf("SHOCK:  Using command 'cgp_field_read_data'\n");}
Load.c:			if(pnt_config->MPI_rank==0){printf("SHOCK:  Using command 'cgp_field_multi_read_data'\n");}
ManufacturedSolution.c:	long double u_ref=(long double)(pnt_config->machNumber*sqrtl(pnt_config->gammaNumber*pnt_config->gasConstantNumber*pnt_config->T0_dim));
ManufacturedSolution.c:	long double p_ref=(long double)rho_ref*u_ref*u_ref/(pnt_config->gammaNumber*pnt_config->machNumber*pnt_config->machNumber);
ManufacturedSolution.c:	if (pnt_config->ManufacturedSolution_case==1)
ManufacturedSolution.c:	else // (pnt_config->ManufacturedSolution_case==0)
ManufacturedSolution.c:	if(pnt_config->flag_Inviscid==1)
ManufacturedSolution.c:	Upsilon=(long double)pnt_config->Upsilon;
ManufacturedSolution.c:	Psi=(long double)pnt_config->Psi;
ManufacturedSolution.c:	Gamma=(long double)(1.0/((pnt_config->gammaNumber-1.0)*pow(pnt_config->machNumber,2.0)*pnt_config->reynoldsNumber*pnt_config->prandtlNumber));
ManufacturedSolution.c:	gammaNumber=(long double)pnt_config->gammaNumber;
ManufacturedSolution.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ManufacturedSolution.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ManufacturedSolution.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ManufacturedSolution.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:				if (pnt_config->flag_Inviscid==1)
ManufacturedSolution.c:				if (pnt_config->flag_Inviscid==1)
ManufacturedSolution.c:	/*if (pnt_config->MPI_rank==0){printf("SHOCK: Fehler durch PRECISION:\n "
ManufacturedSolution.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
ManufacturedSolution.c:			for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
ManufacturedSolution.c:				for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
ManufacturedSolution.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:	for (i=pnt_config->int_iStartReal-1; i >= pnt_config->int_iStartGhosts; i--)
ManufacturedSolution.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ManufacturedSolution.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ManufacturedSolution.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ManufacturedSolution.c:		for (j=pnt_config->int_jStartReal-1; j >= pnt_config->int_jStartGhosts; j--)
ManufacturedSolution.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ManufacturedSolution.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ManufacturedSolution.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ManufacturedSolution.c:			for (k=pnt_config->int_kStartReal-1; k >= pnt_config->int_kStartGhosts; k--)
ManufacturedSolution.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:	for (i=pnt_config->int_iEndReal+1; i <= pnt_config->int_iEndGhosts; i++)
ManufacturedSolution.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ManufacturedSolution.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ManufacturedSolution.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ManufacturedSolution.c:		for (j=pnt_config->int_jEndReal+1; j <= pnt_config->int_jEndGhosts; j++)
ManufacturedSolution.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ManufacturedSolution.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ManufacturedSolution.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ManufacturedSolution.c:			for (k=pnt_config->int_kEndReal+1; k <= pnt_config->int_kEndGhosts; k++)
ManufacturedSolution.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:	sprintf(pnt_config->BCManufacturedSolution,"BCManufacturedSolution");
ManufacturedSolution.c:	if (pnt_config->ManufacturedSolution_case==0)
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourLeft==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Left,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourBottom==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Bottom,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourTop==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Top,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourRight==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Right,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:	if (pnt_config->ManufacturedSolution_case==1)
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourLeft==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Left,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourBottom==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Bottom,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourTop==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Top,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourRight==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Right,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourBehind==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_Behind,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:		if (pnt_config->InterfaceNeighbourInFront==NO_NEIGHBOUR)
ManufacturedSolution.c:			{strcpy( pnt_config->BC_InFront,pnt_config->BCManufacturedSolution );}
ManufacturedSolution.c:	long double u_ref=(long double)(pnt_config->machNumber*sqrtl(pnt_config->gammaNumber*pnt_config->gasConstantNumber*pnt_config->T0_dim));
ManufacturedSolution.c:	long double p_ref=(long double)rho_ref*u_ref*u_ref/(pnt_config->gammaNumber*pnt_config->machNumber*pnt_config->machNumber);
ManufacturedSolution.c:	if (pnt_config->ManufacturedSolution_case==1)
ManufacturedSolution.c:	if(pnt_config->flag_Inviscid==1)
ManufacturedSolution.c:	else // (pnt_config->ManufacturedSolution_case==0)
ManufacturedSolution.c:	if(pnt_config->flag_Inviscid==1)
ManufacturedSolution.c:							pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]/(pnt_config->gammaNumber-1.0)*pnt_config->Upsilon);
ManufacturedSolution.c:			sqrt(pnt_config->Upsilon*
ManufacturedSolution.c:			pnt_config->gammaNumber*pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]);
ManufacturedSolution.c:	pnt_U_lastStep->mue[ijk]=((1.0+pnt_config->SutherlandConstant)*powl(pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk],1.5)/
ManufacturedSolution.c:			(pnt_U_lastStep->p[ijk]/pnt_U_lastStep->rho[ijk]+pnt_config->SutherlandConstant));
ManufacturedSolution.c:	if(pnt_config->flag_Inviscid==1)
ManufacturedSolution.c:	long double u_ref=(long double)(pnt_config->machNumber*sqrtl(pnt_config->gammaNumber*pnt_config->gasConstantNumber*pnt_config->T0_dim));
ManufacturedSolution.c:	long double p_ref=(long double)rho_ref*u_ref*u_ref/(pnt_config->gammaNumber*pnt_config->machNumber*pnt_config->machNumber);
ManufacturedSolution.c:	if(pnt_config->flag_Inviscid==1)
ManufacturedSolution.c:	long double N=pnt_config->int_iMeshPoints*pnt_config->int_jMeshPoints*pnt_config->int_kMeshPoints;
ManufacturedSolution.c:	ijk1=1*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+0*pnt_config->int_kMeshPointsGhostCells+0;
ManufacturedSolution.c:	ijk2=2*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+0*pnt_config->int_kMeshPointsGhostCells+0;
ManufacturedSolution.c:		if(pnt_config->MPI_rank==0)
ManufacturedSolution.c:					pnt_config->all_L2_norm_rho,
ManufacturedSolution.c:					pnt_config->all_L2_norm_pressure,
ManufacturedSolution.c:					pnt_config->all_Linf_norm_rho,
ManufacturedSolution.c:					pnt_config->all_Linf_norm_pressure);
ManufacturedSolution.c:		for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ManufacturedSolution.c:			for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ManufacturedSolution.c:				for (k=pnt_config->int_kEndReal; k <= pnt_config->int_kEndReal; k++)
ManufacturedSolution.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ManufacturedSolution.c:		MPI_Reduce( &L2_norm_rho, all_L2_norm_rho,1,MPI_LONG_DOUBLE,MPI_SUM,0,pnt_config->MPI_comm);
ManufacturedSolution.c:		MPI_Reduce( &L2_norm_pressure, all_L2_norm_pressure,1,MPI_LONG_DOUBLE,MPI_SUM,0,pnt_config->MPI_comm);
ManufacturedSolution.c:		MPI_Reduce( &Linf_norm_rho, all_Linf_norm_rho,1,MPI_LONG_DOUBLE,MPI_MAX,0,pnt_config->MPI_comm);
ManufacturedSolution.c:		MPI_Reduce( &Linf_norm_pressure, all_Linf_norm_pressure,1,MPI_LONG_DOUBLE,MPI_MAX,0,pnt_config->MPI_comm);
ManufacturedSolution.c:		//strcpy(pnt_config->ManufacturedSolution_L2_Delta_name,"Density");
ManufacturedSolution.c:		//pnt_config->ManufacturedSolution_L2_Delta=fabs(pnt_config->ManufacturedSolution_L2_last-all_L2_norm_rho[0]);
ManufacturedSolution.c:		//pnt_config->ManufacturedSolution_L2_last=all_L2_norm_rho[0];
ManufacturedSolution.c:		strcpy(pnt_config->ManufacturedSolution_L2_Delta_name,"Pressure");
ManufacturedSolution.c:		pnt_config->ManufacturedSolution_L2_Delta=fabs(pnt_config->ManufacturedSolution_L2_last-all_L2_norm_pressure[0]);
ManufacturedSolution.c:		pnt_config->ManufacturedSolution_L2_last=all_L2_norm_pressure[0];
ManufacturedSolution.c:		if(pnt_config->MPI_rank==0)
ManufacturedSolution.c:			if (pnt_config->int_actualIteration==1)
ManufacturedSolution.c:					pnt_config->int_actualIteration,
ManufacturedSolution.c:					pnt_config->ManufacturedSolution_L2_last,
ManufacturedSolution.c:					pnt_config->ManufacturedSolution_L2_Delta);
ManufacturedSolution.c:		/*if(pnt_config->MPI_rank==0){printf("SHOCK: L2_norm(rho):%.10Le (delta:%.8Le)\n",
ManufacturedSolution.c:		MPI_Bcast(&pnt_config->ManufacturedSolution_L2_Delta,1,MPI_LONG_DOUBLE,0,pnt_config->MPI_comm);
ManufacturedSolution.c:		if((pnt_config->ManufacturedSolution_L2_Delta<CONV_ERROR)&&(pnt_config->int_actualIteration>500))
ManufacturedSolution.c:			MPI_Bcast(all_L2_norm_rho,1,MPI_LONG_DOUBLE,0,pnt_config->MPI_comm);
ManufacturedSolution.c:			MPI_Bcast(all_L2_norm_pressure,1,MPI_LONG_DOUBLE,0,pnt_config->MPI_comm);
ManufacturedSolution.c:			MPI_Bcast(all_Linf_norm_rho,1,MPI_LONG_DOUBLE,0,pnt_config->MPI_comm);
ManufacturedSolution.c:			MPI_Bcast(all_Linf_norm_pressure,1,MPI_LONG_DOUBLE,0,pnt_config->MPI_comm);
ManufacturedSolution.c:			pnt_config->all_L2_norm_rho+=all_L2_norm_rho[0]/15.L;
ManufacturedSolution.c:			pnt_config->all_L2_norm_pressure+=all_L2_norm_pressure[0]/15.L;
ManufacturedSolution.c:			pnt_config->all_Linf_norm_rho+=all_Linf_norm_rho[0]/15.L;
ManufacturedSolution.c:			pnt_config->all_Linf_norm_pressure+=all_Linf_norm_pressure[0]/15.L;
ManufacturedSolution.c:			pnt_config->all_L2_norm_rho=all_L2_norm_rho[0];
ManufacturedSolution.c:			pnt_config->all_L2_norm_pressure=all_L2_norm_pressure[0];
ManufacturedSolution.c:			pnt_config->all_Linf_norm_rho=all_Linf_norm_rho[0];
ManufacturedSolution.c:			pnt_config->all_Linf_norm_pressure=all_Linf_norm_pressure[0];
ManufacturedSolution.c:			pnt_config->ManufacturedSolution_L2_counter++;
ManufacturedSolution.c:			if(pnt_config->ManufacturedSolution_L2_counter==1)
ManufacturedSolution.c:				if(pnt_config->MPI_rank==0){printf("SHOCK: %d. time: Convergence limit (%.8Le) of L2_norm(last Delta:%.8Le) reached. Exit!\n",
ManufacturedSolution.c:						pnt_config->ManufacturedSolution_L2_counter,
ManufacturedSolution.c:						pnt_config->ManufacturedSolution_L2_Delta);}
ManufacturedSolution.c:				pnt_config->int_actualIteration=pnt_config->int_EndIteration+100;
Save.c:#	define TM_END(msg) if(pnt_config->MPI_rank==0){printf(msg " took %g seconds\n",MPI_Wtime( )-ts );}
Save.c:	bool worldleader = nprocs==1 || pnt_config->MPI_rank==0;
Save.c:	char* zonename = pnt_config->Zonename;
Save.c:		CG( cg_open( pnt_config->chr_MeshPath,CG_MODE_MODIFY,&file ) );
Save.c:		if( abs(pnt_config->int_initializeType)!=1 ) {
Save.c:		snprintf( iterationstr,255,"%i",pnt_config->int_actualIteration-1 );
Save.c:			CG( cg_biter_write( file,base,"BaseIterativeData",pnt_config->int_Samples ) );
Save.c:			timearray = malloc( pnt_config->int_Samples*sizeof( float ) );
Save.c:			timearray = malloc( ( pnt_config->int_Samples+nsteps )*sizeof( float ) );
Save.c:			CG( cg_biter_write( file,base,"BaseIterativeData",nsteps+pnt_config->int_Samples ) );
Save.c:		for( i = 0; i<pnt_config->int_Samples; i++ )
Save.c:		CG( cg_array_write( "TimeValues",RealSingle,1,( cgsize_t[ ] ){ nsteps+pnt_config->int_Samples },timearray ) );
Save.c:				solnames = malloc( 32*( pnt_config->int_Samples ) );
Save.c:						solnames = malloc( 32*( dimv[ 1 ]+pnt_config->int_Samples ) );
Save.c:					solnames = malloc( 32*( pnt_config->int_Samples ) );
Save.c:			if (pnt_config->flag_ReducedExport==0){n_check = 8;}
Save.c:			for( sol = 0; sol<pnt_config->int_Samples; sol++ ) {
Save.c:				if(pnt_config->flag_ReducedExport==0)
Save.c:			CG( cg_array_write( "FlowSolutionPointers",Character,2,(cgsize_t[ ]){ 32,prepends+pnt_config->int_Samples },solnames ) );
Save.c:	CG( cgp_open( pnt_config->chr_MeshPath,CG_MODE_MODIFY,&file ) );
Save.c:	const int imax = pnt_config->zonesize[ 0 ];
Save.c:	const int jmax = pnt_config->zonesize[ 1 ];
Save.c:	const int kmax = pnt_config->zonesize[ 2 ];
Save.c:		for( t = tcount-pnt_config->int_Samples; t<tcount; t++ )
Save.c:		tindex = t-( tcount-pnt_config->int_Samples );
Save.c:		for( i = 0; i<pnt_config->zonesize[ 0 ]; i++ ) {
Save.c:			for( j = 0; j<pnt_config->zonesize[ 1 ]; j++ ) {
Save.c:				for( k = 0; k<pnt_config->zonesize[ 2 ]; k++ ) {
Save.c:		cgsize_t from[ ]={ pnt_config->offset[ 0 ]+1,pnt_config->offset[ 1 ]+1 DIM3( ,pnt_config->offset[ 2 ]+1 ) };
Save.c:		if (pnt_config->flag_ReducedExport==0){nfields = 8;}
Save.c:				if((pnt_config->MPI_rank==0)&&(field==1)&&(sol==1)){printf("SHOCK:  using cgp_field_write_data (2D).\n");}
Save.c:				if((pnt_config->MPI_rank==0)&&(field==1)&&(sol==1)){printf("SHOCK:  using cgp_field_write_data (3D-Hdf5<1.8.14).\n");}
Save.c:			if((pnt_config->MPI_rank==0)&&(field==1)){printf("SHOCK:  using cgp_field_multi_write_data.\n");}
SHOCK.c:////		printf("SHOCK: Rank: %d (%s)",pnt_config->MPI_rank,pnt_config->Zonename);
SHOCK.c:////		printf(": Left: %d",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourLeft]);
SHOCK.c:////		printf(": Right: %d ",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourRight]);
SHOCK.c:////		printf(": Bottom: %d",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourBottom]);
SHOCK.c:////		printf(": Top: %d",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourTop]);
SHOCK.c:////		printf(": Behind: %d ",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourBehind]);
SHOCK.c:////		printf(": InFront: %d\n",pnt_config->MPI_rankNeighbours[pnt_config->InterfaceNeighbourInFront]);
SHOCK.c://		for (i=0;i<pnt_config->NumberInterfaces;i++)
SHOCK.c://					pnt_config->MPI_rank,
SHOCK.c://					 pnt_config->MPI_rankNeighbours[i],i,
SHOCK.c://					pnt_config->TransformMatrixOfInterface[i][0],
SHOCK.c://					pnt_config->TransformMatrixOfInterface[i][1],
SHOCK.c://					(int)pnt_config->RangeOfInterface[i][0],
SHOCK.c://					(int)pnt_config->RangeOfInterface[i][1],
SHOCK.c://					(int)pnt_config->DonorRangeOfInterface[i][0],
SHOCK.c://					(int)pnt_config->DonorRangeOfInterface[i][1]);
SHOCK.c://		if(pnt_config->MPI_rank==0)
SHOCK.c://					pnt_config->Zonename,
SHOCK.c://					pnt_config->BC_Left,
SHOCK.c://					pnt_config->BC_Right,
SHOCK.c://					pnt_config->BC_Top,
SHOCK.c://					pnt_config->BC_Bottom,
SHOCK.c://					pnt_config->BC_Behind,tec
SHOCK.c://					pnt_config->BC_InFront);
SHOCK.c:	pnt_config->time_dim_backup1=pnt_config->time_dim;
SHOCK.c:	pnt_config->int_actualIteration_backup1=1;
SHOCK.c:	pnt_config->int_actualIteration_backup2=999999;
SHOCK.c:	pnt_config->int_actualSample_backup1=pnt_config->int_actualSample;
SHOCK.c:	pnt_config->int_iterationCounterSamples_backup1=int_iterationCounterSamples;
SHOCK.c:	pnt_config->int_iterationCounterBackupOut_backup1=int_iterationCounterBackupOut;
SHOCK.c:	pnt_config->int_iterationCounterStdOut_backup1=int_iterationCounterStdOut;
SHOCK.c:	for(pnt_config->int_actualIteration=pnt_config->int_StartIteration+1;
SHOCK.c:			pnt_config->int_actualIteration<=pnt_config->int_EndIteration;
SHOCK.c:			pnt_config->int_actualIteration++)
SHOCK.c:		pnt_config->time_dim+=
SHOCK.c:				pnt_config->numericalTau
SHOCK.c:				*pnt_config->L0_dim
SHOCK.c:				/pnt_config->u0_dim;
SHOCK.c:			if(int_ResetCounter>=pnt_config->int_NumberResets)
SHOCK.c:				pnt_config->int_actualIteration=pnt_config->int_EndIteration;
SHOCK.c:				if(pnt_config->MPI_rank==0){printf("SHOCK: Maximal Number of Resets reached. Aborting Simulation!\n");}
SHOCK.c:				if(pnt_config->flag_NAN==1){NANExport( pnt_config,pnt_mesh,pnt_U_RK);}
SHOCK.c://				MPI_Abort(pnt_config->MPI_comm,1337);
SHOCK.c:			pnt_config->numericalTau*=pnt_config->TauDecelerator_factor;
SHOCK.c:			pnt_config->int_distanceForward=pnt_config->int_distanceForwardStart;
SHOCK.c:			if(pnt_config->int_actualIteration_backup1<pnt_config->int_actualIteration_backup2)
SHOCK.c:				if(pnt_config->MPI_rank==0){printf("SHOCK: ----> Backup von Iterationsschritt %d wird geladen (Neues Tau = %g).\n",
SHOCK.c:						pnt_config->int_actualIteration_backup1,
SHOCK.c:						(double)pnt_config->numericalTau);}
SHOCK.c:				pnt_config->time_dim_lastAction=pnt_config->time_dim;
SHOCK.c:				pnt_config->time_dim=pnt_config->time_dim_backup1;
SHOCK.c:				pnt_config->int_actualIteration=pnt_config->int_actualIteration_backup1;
SHOCK.c:				pnt_config->int_actualSample=pnt_config->int_actualSample_backup1;
SHOCK.c:				int_iterationCounterSamples=pnt_config->int_iterationCounterSamples_backup1;
SHOCK.c:				int_iterationCounterBackupOut=pnt_config->int_iterationCounterBackupOut_backup1;
SHOCK.c:				int_iterationCounterStdOut=pnt_config->int_iterationCounterStdOut_backup1;
SHOCK.c:				if(pnt_config->MPI_rank==0){printf("SHOCK: ----> Backup von Iterationsschritt %d wird geladen (Neues Tau = %g).\n",
SHOCK.c:						pnt_config->int_actualIteration_backup2,
SHOCK.c:						(double)pnt_config->numericalTau);}
SHOCK.c:				pnt_config->time_dim_lastAction=pnt_config->time_dim;
SHOCK.c:				pnt_config->time_dim=pnt_config->time_dim_backup2;
SHOCK.c:				pnt_config->int_actualIteration=pnt_config->int_actualIteration_backup2;
SHOCK.c:				pnt_config->int_actualSample=pnt_config->int_actualSample_backup2;
SHOCK.c:				int_iterationCounterSamples=pnt_config->int_iterationCounterSamples_backup2;
SHOCK.c:				int_iterationCounterBackupOut=pnt_config->int_iterationCounterBackupOut_backup2;
SHOCK.c:				int_iterationCounterStdOut=pnt_config->int_iterationCounterStdOut_backup2;
SHOCK.c:			((pnt_config->time_dim-pnt_config->time_dim_lastAction)>
SHOCK.c:		pnt_config->int_distanceNAN*pnt_config->numericalTau*pnt_config->L0_dim/pnt_config->u0_dim)
SHOCK.c:			&&(pnt_config->flag_TauAccelerator!=0)
SHOCK.c:			&&(pnt_config->int_actualIteration+pnt_config->int_distanceBackward<pnt_config->int_EndIteration)
SHOCK.c:			&&(pnt_config->numericalTau<pnt_config->numericalTauStart)
SHOCK.c:			pnt_config->int_distanceForward=pnt_config->int_distanceForwardStart;
SHOCK.c:			pnt_config->numericalTau=pnt_config->numericalTauStart;
SHOCK.c:			pnt_config->time_dim_lastAction=pnt_config->time_dim;
SHOCK.c:			if(pnt_config->MPI_rank==0){printf("SHOCK: ----> Tau-Resetting bei Iterationsschritt %d (Neues Tau = %g)\n",
SHOCK.c:					pnt_config->int_actualIteration,
SHOCK.c:					(double)pnt_config->numericalTau);}
SHOCK.c:			((pnt_config->time_dim-pnt_config->time_dim_lastAction)>
SHOCK.c:		pnt_config->int_distanceForward*pnt_config->numericalTau*pnt_config->L0_dim/pnt_config->u0_dim)
SHOCK.c:			&&(pnt_config->flag_TauAccelerator!=0)
SHOCK.c:			&&(pnt_config->int_actualIteration+pnt_config->int_distanceBackward<pnt_config->int_EndIteration)
SHOCK.c:			&&(pnt_config->numericalTau>=pnt_config->numericalTauStart)
SHOCK.c:			pnt_config->int_distanceForward*=4.;
SHOCK.c:			pnt_config->numericalTau*=pnt_config->TauAccelerator_factor;
SHOCK.c:			pnt_config->time_dim_lastAction=pnt_config->time_dim;
SHOCK.c:			if(pnt_config->MPI_rank==0){printf("SHOCK: Tau-Erhoehung bei Iterationsschritt %d (Tau = %g)\n",
SHOCK.c:					pnt_config->int_actualIteration,
SHOCK.c:					(double)pnt_config->numericalTau);}
SHOCK.c:		if((pnt_config->int_actualIteration)%pnt_config->int_distanceBackward==0)
SHOCK.c:			pnt_config->time_dim_backup1=pnt_config->time_dim;
SHOCK.c:			pnt_config->int_actualIteration_backup1=pnt_config->int_actualIteration;
SHOCK.c:			pnt_config->int_actualSample_backup1=pnt_config->int_actualSample;
SHOCK.c:			pnt_config->int_iterationCounterSamples_backup1=int_iterationCounterSamples;
SHOCK.c:			pnt_config->int_iterationCounterBackupOut_backup1=int_iterationCounterBackupOut;
SHOCK.c:			pnt_config->int_iterationCounterStdOut_backup1=int_iterationCounterStdOut;
SHOCK.c:		}else if((pnt_config->int_actualIteration+pnt_config->int_distanceBackward/2)%pnt_config->int_distanceBackward==0)
SHOCK.c:			pnt_config->time_dim_backup2=pnt_config->time_dim;
SHOCK.c:			pnt_config->int_actualIteration_backup2=pnt_config->int_actualIteration;
SHOCK.c:			pnt_config->int_actualSample_backup2=pnt_config->int_actualSample;
SHOCK.c:			pnt_config->int_iterationCounterSamples_backup2=int_iterationCounterSamples;
SHOCK.c:			pnt_config->int_iterationCounterBackupOut_backup2=int_iterationCounterBackupOut;
SHOCK.c:			pnt_config->int_iterationCounterStdOut_backup2=int_iterationCounterStdOut;
SHOCK.c:		if((int_iterationCounterSamples%pnt_config->int_IterationsBetweenSamples==0)&&(pnt_config->int_actualSample<pnt_config->int_Samples)&&(pnt_config->int_actualIteration>=(pnt_config->int_StartSampling)))
SHOCK.c:			if((pnt_config->MPI_rank==0)&&(pnt_config->int_actualSample==0)){printf("SHOCK: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");}
SHOCK.c:			if((pnt_config->MPI_rank==0)&&(pnt_config->int_actualSample==0)){printf("SHOCK:           Start Sampling.\n");}
SHOCK.c:			if((pnt_config->MPI_rank==0)&&(pnt_config->int_actualSample==0)){printf("SHOCK: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");}
SHOCK.c:			pnt_config->int_actualSample++;
SHOCK.c:		if(pnt_config->flag_PressureHistory==1)
SHOCK.c:		if(pnt_config->flag_VelocityHistory==1)
SHOCK.c:		if(int_iterationCounterStdOut==(pnt_config->int_TotalIterations/100)||(pnt_config->int_EndIteration<100))
SHOCK.c:			if(pnt_config->MPI_rank==0){printf("SHOCK: Iteration: %d von %d (Zeit: %g [sec])\n",pnt_config->int_actualIteration,pnt_config->int_EndIteration,(double)pnt_config->time_dim);}
SHOCK.c:			if(pnt_config->MPI_rank==0){printf("\t rho[x=%g, y=%g, z=%g] = %g \n",
SHOCK.c:					(double)pnt_mesh->x[pnt_config->int_iMid*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_jMid*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kMid],
SHOCK.c:					(double)pnt_mesh->y[pnt_config->int_iMid*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_jMid*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kMid],
SHOCK.c:					(double)pnt_mesh->z[pnt_config->int_iMid*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_jMid*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kMid],
SHOCK.c:					(double)pnt_U_lastStep->rho[pnt_config->int_iMid*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_jMid*pnt_config->int_kMeshPointsGhostCells+pnt_config->int_kMid]);}
SHOCK.c:			if((pnt_config->flag_IBC_Moving==1)&&(pnt_config->flag_IBC==1))
SHOCK.c:				if(pnt_config->MPI_rank==0){printf("SHOCK: MovingWall at x-Position %g!\n",
SHOCK.c:						(double)pnt_config->IBC_MovingActualPosition);}
SHOCK.c:			if(pnt_config->flag_ManufacturedSolution==1)
SHOCK.c:				if(pnt_config->MPI_rank==0){printf("SHOCK: Recent L2-Delta(%s): %.8Le)\n",
SHOCK.c:						pnt_config->ManufacturedSolution_L2_Delta_name,
SHOCK.c:						pnt_config->ManufacturedSolution_L2_Delta);}
SHOCK.c:			if(pnt_config->MPI_rank==0){printf("SHOCK: --------\n");}
SHOCK.c:		if(pnt_config->flag_ManufacturedSolution==1)
SHOCK.c:	if(pnt_config->flag_Inviscid==1){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: Inviscid (Euler)\n");}}
SHOCK.c:	if(pnt_config->flag_PressureWaves==1){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: Druckwellen werden bei x=%f,y=%f,z=%f mit einem Radius von %f induziert\n",
SHOCK.c:				(double)pnt_config->pw_x0,
SHOCK.c:				(double)pnt_config->pw_y0,
SHOCK.c:				(double)pnt_config->pw_z0,
SHOCK.c:				(double)pnt_config->pw_r0);}}
SHOCK.c:	if(pnt_config->flag_PressureHistory==1)	{
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: PressureHistory (%d locations)\n",pnt_config->PressureHistory_No);}
SHOCK.c:		MPI_Barrier(pnt_config->MPI_comm);
SHOCK.c:		MPI_Barrier(pnt_config->MPI_comm);	}
SHOCK.c:	if(pnt_config->flag_VelocityHistory==1)	{
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: VelocityHistory (%d locations)\n",pnt_config->VelocityHistory_No);}
SHOCK.c:		MPI_Barrier(pnt_config->MPI_comm);
SHOCK.c:		MPI_Barrier(pnt_config->MPI_comm);	}
SHOCK.c:	if((pnt_config->int_specialInitializeType>0)&&(pnt_config->int_initializeType==0)){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: SpecialInitialisation: %d aktiviert.\n",pnt_config->int_specialInitializeType);}}
SHOCK.c:	if(pnt_config->flag_LaminarBoundary==1){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: Laminare Grenzschicht wurd ab x=%f generiert.\n",(double)pnt_config->LaminarBoundary_xStart);}}
SHOCK.c:	if(pnt_config->flag_Vortex==1){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: Vortex wurde generiert (x=%lf, y=%lf, r=%lf, f=%lf, beta=%lf).\n",
SHOCK.c:				(double)pnt_config->Vortex_x_wirb_zentr,(double)pnt_config->Vortex_y_wirb_zentr,(double)pnt_config->Vortex_r_wirb_max,(double)pnt_config->Vortex_faktor_quer,(double)pnt_config->Vortex_beta);}
SHOCK.c:	if((pnt_config->flag_IBC_Moving==1)&&(pnt_config->flag_IBC==1)){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: Moving Wall wurde eingestellt.\n");}
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: Start: %g %g %g, Speed: %g, Movement: %d, SpeedFactor: %g.\n",(double)pnt_config->IBC_StartpositionX,(double)pnt_config->IBC_StartpositionY,(double)pnt_config->IBC_StartpositionZ,(double)pnt_config->IBC_MovingSpeed,pnt_config->IBC_MovingType, (double)pnt_config->IBC_SpeedFactor);}
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: Aktuelle Position %g\n",(double)pnt_config->IBC_MovingActualPosition);}
SHOCK.c:	if(pnt_config->flag_rotation_symmetric==1){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: 2D-Rotationssymmetrisch\n");}}
SHOCK.c:	if(pnt_config->flag_ManufacturedSolution==1){
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: ManufacturedSolution konfiguriert.\n");}
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: ManufacturedSolution-Case: %d (0: sub-, 1: supersonic).\n",
SHOCK.c:				pnt_config->ManufacturedSolution_case);}
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: ManufacturedSolution initialisiert.\n");}
SHOCK.c:		if(pnt_config->MPI_rank==0){printf(">>>>> Options: ManufacturedSolution BoundaryConditions aktualisiert.\n");}
WENO.c://    if (is0>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is0;
WENO.c://    if (is1>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is1;
WENO.c://    if (is2>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is2;
WENO.c://    if (is3>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is3;
WENO.c://    if (is4>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is4;
WENO.c://    if (is0<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is0;
WENO.c://    if (is1<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is1;
WENO.c://    if (is2<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is2;
WENO.c://    if (is3<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is3;
WENO.c://    if (is4<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is4;
WENO.c://    pnt_config->is_avrg=pnt_config->is_avrg+is0+is1+is2+is3+is4;
WENO.c://    pnt_config->is_avrg_counter+=5;
WENO.c://    omegaTmp0 = pnt_config->wenoOptimalerKoeffizient[0]/pow((is0 + pnt_config->wenoEpsilon),pnt_config->wenoP);
WENO.c://    omegaTmp1 = pnt_config->wenoOptimalerKoeffizient[1]/pow((is1 + pnt_config->wenoEpsilon),pnt_config->wenoP);
WENO.c://    omegaTmp2 = pnt_config->wenoOptimalerKoeffizient[2]/pow((is2 + pnt_config->wenoEpsilon),pnt_config->wenoP);
WENO.c://    omegaTmp3 = pnt_config->wenoOptimalerKoeffizient[3]/pow((is3 + pnt_config->wenoEpsilon),pnt_config->wenoP);
WENO.c://    omegaTmp4 = pnt_config->wenoOptimalerKoeffizient[4]/pow((is4 + pnt_config->wenoEpsilon),pnt_config->wenoP);
WENO.c:    omegaTmp0 = pnt_config->wenoOptimalerKoeffizient_W9[0]/((is0 + pnt_config->wenoEpsilon)*(is0 + pnt_config->wenoEpsilon));
WENO.c:    omegaTmp1 = pnt_config->wenoOptimalerKoeffizient_W9[1]/((is1 + pnt_config->wenoEpsilon)*(is1 + pnt_config->wenoEpsilon));
WENO.c:    omegaTmp2 = pnt_config->wenoOptimalerKoeffizient_W9[2]/((is2 + pnt_config->wenoEpsilon)*(is2 + pnt_config->wenoEpsilon));
WENO.c:    omegaTmp3 = pnt_config->wenoOptimalerKoeffizient_W9[3]/((is3 + pnt_config->wenoEpsilon)*(is3 + pnt_config->wenoEpsilon));
WENO.c:    omegaTmp4 = pnt_config->wenoOptimalerKoeffizient_W9[4]/((is4 + pnt_config->wenoEpsilon)*(is4 + pnt_config->wenoEpsilon));
WENO.c://    if (is0>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is0;
WENO.c://    if (is1>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is1;
WENO.c://    if (is2>pnt_config->is_maximum)
WENO.c://    	pnt_config->is_maximum=is2;
WENO.c://    if (is0<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is0;
WENO.c://    if (is1<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is1;
WENO.c://    if (is2<pnt_config->is_minimum)
WENO.c://    	pnt_config->is_minimum=is2;
WENO.c://    pnt_config->is_avrg=pnt_config->is_avrg+is0+is1+is2;
WENO.c://    pnt_config->is_avrg_counter+=3;
WENO.c://    omegaTmp0 = pnt_config->wenoOptimalerKoeffizient[0]/pow((is0 + pnt_config->wenoEpsilon),pnt_config->wenoP);
WENO.c://    omegaTmp1 = pnt_config->wenoOptimalerKoeffizient[1]/pow((is1 + pnt_config->wenoEpsilon),pnt_config->wenoP);
WENO.c:    omegaTmp0 = 1./((is0 + pnt_config->wenoEpsilon)*(is0 + pnt_config->wenoEpsilon));
WENO.c:    omegaTmp1 = 6./((is1 + pnt_config->wenoEpsilon)*(is1 + pnt_config->wenoEpsilon));
WENO.c:    omegaTmp2 = 3./((is2 + pnt_config->wenoEpsilon)*(is2 + pnt_config->wenoEpsilon));
WENO.c:    fluxPlus = (FLT *)calloc(pnt_config->int_SpaceOrder, sizeof(FLT));
WENO.c:    fluxMinus = (FLT *)calloc(pnt_config->int_SpaceOrder, sizeof(FLT));
WENO.c:    deltaFluxPlus = (FLT *)calloc((pnt_config->int_SpaceOrder-1), sizeof(FLT));
WENO.c:    deltaFluxMinus = (FLT *)calloc((pnt_config->int_SpaceOrder-1), sizeof(FLT));
WENO.c:    Phi_FunctionSum = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    Phi_FunctionSumRightEigen = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    Theta_Function = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
WENO.c:        for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:                                pnt_config->Upsilon);
WENO.c:                                pnt_config->Upsilon);
WENO.c:                                pnt_config->Upsilon);
WENO.c: pnt_config->Upsilon));
WENO.c:    for (i=pnt_config->int_iStartReal-1; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iPlus2jk=(i+2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iPlus3jk=(i+3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iPlus4jk=(i+4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iMinus2jk=(i-2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iMinus3jk=(i-3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:                for (int_c=0; int_c < pnt_config->int_conservationEquations; int_c++)
WENO.c: int_iStencilStart=i-(pnt_config->int_SpaceOrder-1)/2;
WENO.c: int_iStencilEnd=i+(pnt_config->int_SpaceOrder-1)/2;
WENO.c: ijk_StencilPlus=int_iStencilPlus*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijk_StencilMinus=int_iStencilMinus*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:                    for (int_iStencil=0; int_iStencil <= pnt_config->int_SpaceOrder-2; int_iStencil++)
WENO.c:                for (int_c=0; int_c < pnt_config->int_conservationEquations; int_c++)
WENO.c:    for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:    fluxPlus = (FLT *)calloc(pnt_config->int_SpaceOrder, sizeof(FLT));
WENO.c:    fluxMinus = (FLT *)calloc(pnt_config->int_SpaceOrder, sizeof(FLT));
WENO.c:    deltaFluxPlus = (FLT *)calloc((pnt_config->int_SpaceOrder-1), sizeof(FLT));
WENO.c:    deltaFluxMinus = (FLT *)calloc((pnt_config->int_SpaceOrder-1), sizeof(FLT));
WENO.c:    Phi_FunctionSum = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    Phi_FunctionSumRightEigen = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    Theta_Function = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
WENO.c:            for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:                                pnt_config->Upsilon);
WENO.c:                                pnt_config->Upsilon);
WENO.c:                                pnt_config->Upsilon);
WENO.c: pnt_config->Upsilon));
WENO.c:    for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartReal-1; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijPlus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+2)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijPlus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+3)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijPlus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+4)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijMinus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-2)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijMinus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-3)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:                for (int_c=0; int_c < pnt_config->int_conservationEquations; int_c++)
WENO.c: int_jStencilStart=j-(pnt_config->int_SpaceOrder-1)/2;
WENO.c: int_jStencilEnd=j+(pnt_config->int_SpaceOrder-1)/2;
WENO.c: ijk_StencilPlus=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_jStencilPlus*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijk_StencilMinus=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+int_jStencilMinus*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:                    for (int_jStencil=0; int_jStencil <= pnt_config->int_SpaceOrder-2; int_jStencil++)
WENO.c:                for (int_c=0; int_c < pnt_config->int_conservationEquations; int_c++)
WENO.c:    for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c://	if(strcmp(pnt_config->BC_Bottom,pnt_config->BCWallViscous)==0)
WENO.c://	k=pnt_config->int_kStartReal;
WENO.c://	for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jStartReal+2; j++){
WENO.c://	ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c://	for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jStartReal+2; j++){
WENO.c://	ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:    fluxPlus = (FLT *)calloc(pnt_config->int_SpaceOrder, sizeof(FLT));
WENO.c:    fluxMinus = (FLT *)calloc(pnt_config->int_SpaceOrder, sizeof(FLT));
WENO.c:    deltaFluxPlus = (FLT *)calloc((pnt_config->int_SpaceOrder-1), sizeof(FLT));
WENO.c:    deltaFluxMinus = (FLT *)calloc((pnt_config->int_SpaceOrder-1), sizeof(FLT));
WENO.c:    Phi_FunctionSum = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    Phi_FunctionSumRightEigen = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    Theta_Function = (FLT *)calloc(pnt_config->int_conservationEquations, sizeof(FLT));
WENO.c:    for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:                                pnt_config->Upsilon);
WENO.c:                                pnt_config->Upsilon);
WENO.c:                                pnt_config->Upsilon);
WENO.c: pnt_config->Upsilon));
WENO.c:    for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartReal-1; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
WENO.c: ijkPlus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+2;
WENO.c: ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
WENO.c: ijkPlus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+3;
WENO.c:  ijkPlus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+4;
WENO.c: ijkMinus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-2;
WENO.c: ijkMinus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-3;
WENO.c:                for (int_c=0; int_c < pnt_config->int_conservationEquations; int_c++)
WENO.c: int_kStencilStart=k-(pnt_config->int_SpaceOrder-1)/2;
WENO.c: int_kStencilEnd=k+(pnt_config->int_SpaceOrder-1)/2;
WENO.c: ijk_StencilPlus=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_kStencilPlus;
WENO.c: ijk_StencilMinus=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+int_kStencilMinus;
WENO.c:                    for (int_kStencil=0; int_kStencil <= pnt_config->int_SpaceOrder-2; int_kStencil++)
WENO.c:                for (int_c=0; int_c < pnt_config->int_conservationEquations; int_c++)
WENO.c:    for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
WENO.c:        for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
WENO.c:            for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c: ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
WENO.c:    gamma=pnt_config->gammaNumber;
WENO.c:    gamma=pnt_config->gammaNumber;
WENO.c:    gamma=pnt_config->gammaNumber;
WENO.c:    i_start=int_acutalI-(pnt_config->int_SpaceOrder-1)/2;
WENO.c:    i_end=int_acutalI+(pnt_config->int_SpaceOrder-1)/2+1;
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:    j_start=int_acutalJ-(pnt_config->int_SpaceOrder-1)/2;
WENO.c:    j_end=int_acutalJ+(pnt_config->int_SpaceOrder-1)/2+1;
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
WENO.c:    k_start=int_acutalK-(pnt_config->int_SpaceOrder-1)/2;
WENO.c:    k_end=int_acutalK+(pnt_config->int_SpaceOrder-1)/2+1;
WENO.c: ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:	ijkMAX=pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					indexMinus_xi=(i+l-(SPACEORDER+1)/2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					indexPlus_xi=(i+l-(SPACEORDER+1)/2+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					u_iMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u[indexMinus_xi];		u_iPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u[indexPlus_xi];
ZD.c:					v_iMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v[indexMinus_xi];		v_iPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v[indexPlus_xi];
ZD.c:					T_iMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T[indexMinus_xi];		T_iPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T[indexPlus_xi];
ZD.c:					u_xi_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->u[indexMinus_xi];	u_xi_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->u[indexPlus_xi];
ZD.c:					v_xi_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->v[indexMinus_xi];	v_xi_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->v[indexPlus_xi];
ZD.c:					T_xi_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->T[indexMinus_xi];	T_xi_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->T[indexPlus_xi];
ZD.c:					u_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_eta[indexMinus_xi];	u_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_eta[indexPlus_xi];
ZD.c:					v_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_eta[indexMinus_xi];	v_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_eta[indexPlus_xi];
ZD.c:					T_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_eta[indexMinus_xi];	T_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_eta[indexPlus_xi];
ZD.c:						w_iMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w[indexMinus_xi];		w_iPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w[indexPlus_xi];
ZD.c:						w_xi_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->w[indexMinus_xi];	w_xi_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->w[indexPlus_xi];
ZD.c:						w_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_eta[indexMinus_xi];	w_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_eta[indexPlus_xi];
ZD.c:						u_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_zeta[indexMinus_xi];	u_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_zeta[indexPlus_xi];
ZD.c:						v_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_zeta[indexMinus_xi];	v_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_zeta[indexPlus_xi];
ZD.c:						w_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_zeta[indexMinus_xi];	w_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_zeta[indexPlus_xi];
ZD.c:						T_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_zeta[indexMinus_xi];	T_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_zeta[indexPlus_xi];
ZD.c:				if(pnt_config->flag_rotation_symmetric==1)
ZD.c:									*pnt_config->Psi*pnt_U_RK->mue[ijk]/pnt_mesh->y[ijk];
ZD.c:									*pnt_config->Psi*pnt_U_RK->mue[ijk]/pnt_mesh->y[ijk];
ZD.c:									*pnt_config->Psi*pnt_U_RK->mue[ijk]/pnt_mesh->y[ijk]
ZD.c:									+0.5*(pnt_config->Gamma[iPlus1jk]+pnt_config->Gamma[ijk])*pnt_mesh->xi_y[ijk]*0.5*(T_xi_MinusHalf+T_xi_PlusHalf)/pnt_mesh->y[ijk];
ZD.c:						pnt_config->Psi*(
ZD.c:					pnt_config->flag_rotation_symmetric*XiMomRotSymm;
ZD.c:						pnt_config->Psi*(
ZD.c:					pnt_config->flag_rotation_symmetric*EtaMomRotSymm;
ZD.c:							pnt_config->Psi*(
ZD.c:						0.5*(pnt_config->Gamma[iPlus1jk]+pnt_config->Gamma[ijk])*(
ZD.c:						pnt_config->Psi*(
ZD.c:					pnt_config->flag_rotation_symmetric*EnergyRotSymm;
ZD.c:	ijkMAX=pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					indexMinus_eta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+l-(SPACEORDER+1)/2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					indexPlus_eta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+l-(SPACEORDER+1)/2+1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					u_jMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u[indexMinus_eta];		u_jPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u[indexPlus_eta];
ZD.c:					v_jMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v[indexMinus_eta];		v_jPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v[indexPlus_eta];
ZD.c:					T_jMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T[indexMinus_eta];		T_jPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T[indexPlus_eta];
ZD.c:					u_eta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->u[indexMinus_eta];	u_eta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->u[indexPlus_eta];
ZD.c:					v_eta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->v[indexMinus_eta];	v_eta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->v[indexPlus_eta];
ZD.c:					T_eta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->T[indexMinus_eta];	T_eta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->T[indexPlus_eta];
ZD.c:					u_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_xi[indexMinus_eta];	u_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_xi[indexPlus_eta];
ZD.c:					v_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_xi[indexMinus_eta];	v_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_xi[indexPlus_eta];
ZD.c:					T_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_xi[indexMinus_eta];	T_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_xi[indexPlus_eta];
ZD.c:						w_jMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w[indexMinus_eta];		w_jPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w[indexPlus_eta];
ZD.c:						w_eta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->w[indexMinus_eta];	w_eta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->w[indexPlus_eta];
ZD.c:						w_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_xi[indexMinus_eta];	w_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_xi[indexPlus_eta];
ZD.c:						u_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_zeta[indexMinus_eta];	u_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_zeta[indexPlus_eta];
ZD.c:						v_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_zeta[indexMinus_eta];	v_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_zeta[indexPlus_eta];
ZD.c:						w_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_zeta[indexMinus_eta];	w_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_zeta[indexPlus_eta];
ZD.c:						T_zeta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_zeta[indexMinus_eta];	T_zeta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_zeta[indexPlus_eta];
ZD.c:				if(pnt_config->flag_rotation_symmetric==1)
ZD.c:							-pnt_mesh->xi_y[ijk]*0.5*(u_eta_MinusHalf+u_eta_PlusHalf))*pnt_config->Psi*pnt_U_RK->mue[ijk]/pnt_mesh->y[ijk];
ZD.c:							-pnt_mesh->eta_x[ijk]*0.5*(u_eta_MinusHalf+u_eta_PlusHalf))*pnt_config->Psi*pnt_U_RK->mue[ijk]/pnt_mesh->y[ijk];
ZD.c:							*pnt_config->Psi*pnt_U_RK->mue[ijk]/pnt_mesh->y[ijk]
ZD.c:							-0.5*(pnt_config->Gamma[ijPlus1k]+pnt_config->Gamma[ijk])*pnt_mesh->xi_y[ijk]*0.5*(T_eta_MinusHalf+T_eta_PlusHalf)/pnt_mesh->y[ijk];
ZD.c:						pnt_config->Psi*(
ZD.c:					pnt_config->flag_rotation_symmetric*XiMomRotSymm;
ZD.c:						pnt_config->Psi*(
ZD.c:					pnt_config->flag_rotation_symmetric*EtaMomRotSymm;
ZD.c:							pnt_config->Psi*(
ZD.c:						0.5*(pnt_config->Gamma[ijPlus1k]+pnt_config->Gamma[ijk])*(
ZD.c:						pnt_config->Psi*(
ZD.c:					pnt_config->flag_rotation_symmetric*EnergyRotSymm;
ZD.c:	ijkMAX=pnt_config->int_iMeshPointsGhostCells*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells;
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
ZD.c:				ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
ZD.c:					indexMinus_zeta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(j+l-(SPACEORDER+1)/2);
ZD.c:					indexPlus_zeta=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+(j+l-(SPACEORDER+1)/2)+1;
ZD.c:					u_kMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u[indexMinus_zeta];		u_kPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u[indexPlus_zeta];
ZD.c:					v_kMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v[indexMinus_zeta];		v_kPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v[indexPlus_zeta];
ZD.c:					w_kMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w[indexMinus_zeta];		w_kPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w[indexPlus_zeta];
ZD.c:					T_kMinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T[indexMinus_zeta];		T_kPlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T[indexPlus_zeta];
ZD.c:					u_zeta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->u[indexMinus_zeta];	u_zeta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->u[indexPlus_zeta];
ZD.c:					v_zeta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->v[indexMinus_zeta];	v_zeta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->v[indexPlus_zeta];
ZD.c:					w_zeta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->w[indexMinus_zeta];	w_zeta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->w[indexPlus_zeta];
ZD.c:					T_zeta_MinusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->T[indexMinus_zeta];	T_zeta_PlusHalf+=pnt_config->ZD_ZweiteAbleitungZwischenPunkt_Koeffizient[l]*pnt_U_RK->T[indexPlus_zeta];
ZD.c:					u_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_xi[indexMinus_zeta];	u_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_xi[indexPlus_zeta];
ZD.c:					v_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_xi[indexMinus_zeta];	v_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_xi[indexPlus_zeta];
ZD.c:					w_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_xi[indexMinus_zeta];	w_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_xi[indexPlus_zeta];
ZD.c:					T_xi_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_xi[indexMinus_zeta];	T_xi_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_xi[indexPlus_zeta];
ZD.c:					u_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_eta[indexMinus_zeta];	u_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->u_eta[indexPlus_zeta];
ZD.c:					v_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_eta[indexMinus_zeta];	v_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->v_eta[indexPlus_zeta];
ZD.c:					w_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_eta[indexMinus_zeta];	w_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->w_eta[indexPlus_zeta];
ZD.c:					T_eta_MinusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_eta[indexMinus_zeta];	T_eta_PlusHalf+=pnt_config->ZD_Interpolation_Koeffizient[l]*pnt_U_RK->T_eta[indexPlus_zeta];
ZD.c:						pnt_config->Psi*(
ZD.c:						pnt_config->Psi*(
ZD.c:						pnt_config->Psi*(
ZD.c:						0.5*(pnt_config->Gamma[ijkPlus1]+pnt_config->Gamma[ijk])*(
ZD.c:						pnt_config->Psi*(
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus2jk=(i+2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus3jk=(i+3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus2jk=(i-2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus3jk=(i-3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
ZD.c:				ijkPlus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+2;
ZD.c:				ijkPlus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+3;
ZD.c:				ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
ZD.c:				ijkMinus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-2;
ZD.c:				ijkMinus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-3;
ZD.c:					iPlus4jk=(i+4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iPlus5jk=(i+5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iMinus4jk=(i-4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iMinus5jk=(i-5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijPlus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijPlus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijMinus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijMinus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijkPlus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+4;
ZD.c:					ijkPlus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+5;
ZD.c:					ijkMinus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-4;
ZD.c:					ijkMinus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-5;
ZD.c:					pnt_ZD->u_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->u[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[iPlus3jk]);
ZD.c:					pnt_ZD->v_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->v[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[iPlus3jk]);
ZD.c:					pnt_ZD->T_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->T[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[iPlus3jk]);
ZD.c:					pnt_ZD->u_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->u[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijPlus3k]);
ZD.c:					pnt_ZD->v_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->v[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijPlus3k]);
ZD.c:					pnt_ZD->T_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->T[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijPlus3k]);
ZD.c:						pnt_ZD->w_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->w[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[iPlus3jk]);
ZD.c:						pnt_ZD->w_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->w[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijPlus3k]);
ZD.c:						pnt_ZD->u_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->u[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijkPlus3]);
ZD.c:						pnt_ZD->v_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->v[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijkPlus3]);
ZD.c:						pnt_ZD->w_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->w[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijkPlus3]);
ZD.c:						pnt_ZD->T_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->T[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijkPlus3]);
ZD.c:					pnt_ZD->u_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->u[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->u[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->u[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->u[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->u[iPlus5jk]);
ZD.c:					pnt_ZD->v_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->v[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->v[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->v[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->v[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->v[iPlus5jk]);
ZD.c:					pnt_ZD->T_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->T[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->T[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->T[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->T[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->T[iPlus5jk]);
ZD.c:					pnt_ZD->u_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->u[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->u[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->u[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->u[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->u[ijPlus5k]);
ZD.c:					pnt_ZD->v_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->v[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->v[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->v[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->v[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->v[ijPlus5k]);
ZD.c:					pnt_ZD->T_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->T[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->T[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->T[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->T[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->T[ijPlus5k]);
ZD.c:						pnt_ZD->w_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->w[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->w[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->w[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->w[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->w[iPlus5jk]);
ZD.c:						pnt_ZD->w_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->w[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->w[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->w[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->w[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->w[ijPlus5k]);
ZD.c:						pnt_ZD->u_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->u[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->u[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->u[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->u[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->u[ijkPlus5]);
ZD.c:						pnt_ZD->v_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->v[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->v[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->v[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->v[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->v[ijkPlus5]);
ZD.c:						pnt_ZD->w_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->w[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->w[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->w[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->w[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->w[ijkPlus5]);
ZD.c:						pnt_ZD->T_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->T[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->T[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->T[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->T[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->T[ijkPlus5]);
ZD.c:	if(pnt_config->flag_IBC==1)
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
ZD.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus2jk=(i+2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus3jk=(i+3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus2jk=(i-2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus3jk=(i-3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iPlus4jk=(i+4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iPlus5jk=(i+5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iMinus4jk=(i-4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iMinus5jk=(i-5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					pnt_U_RK->u_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->u[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[iPlus3jk]);
ZD.c:					pnt_U_RK->v_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->v[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[iPlus3jk]);
ZD.c:					pnt_U_RK->T_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->T[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[iPlus3jk]);
ZD.c:						pnt_U_RK->w_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->w[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[iPlus3jk]);
ZD.c:					pnt_U_RK->u_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->u[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->u[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->u[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->u[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->u[iPlus5jk]);
ZD.c:					pnt_U_RK->v_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->v[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->v[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->v[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->v[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->v[iPlus5jk]);
ZD.c:					pnt_U_RK->T_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->T[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->T[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->T[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->T[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->T[iPlus5jk]);
ZD.c:						pnt_U_RK->w_xi[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[iMinus5jk]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[iMinus4jk]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[iMinus3jk]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->w[iMinus2jk]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[iMinus1jk]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[iPlus1jk]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->w[iPlus2jk]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->w[iPlus3jk]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->w[iPlus4jk]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->w[iPlus5jk]);
ZD.c:	if(pnt_config->flag_IBC==1)
ZD.c:	for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartGhosts; k <= pnt_config->int_kEndGhosts; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijPlus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijPlus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijMinus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijMinus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					pnt_U_RK->u_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->u[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijPlus3k]);
ZD.c:					pnt_U_RK->v_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->v[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijPlus3k]);
ZD.c:					pnt_U_RK->T_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->T[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijPlus3k]);
ZD.c:						pnt_U_RK->w_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->w[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijPlus3k]);
ZD.c:					pnt_U_RK->u_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->u[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->u[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->u[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->u[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->u[ijPlus5k]);
ZD.c:					pnt_U_RK->v_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->v[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->v[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->v[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->v[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->v[ijPlus5k]);
ZD.c:					pnt_U_RK->T_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->T[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->T[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->T[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->T[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->T[ijPlus5k]);
ZD.c:						pnt_U_RK->w_eta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijMinus5k]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijMinus4k]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijMinus3k]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->w[ijMinus2k]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijMinus1k]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijPlus1k]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->w[ijPlus2k]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->w[ijPlus3k]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->w[ijPlus4k]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->w[ijPlus5k]);
ZD.c:	if(pnt_config->flag_IBC==1)
ZD.c:		for (i=pnt_config->int_iStartGhosts; i <= pnt_config->int_iEndGhosts; i++)
ZD.c:			for (j=pnt_config->int_jStartGhosts; j <= pnt_config->int_jEndGhosts; j++)
ZD.c:				for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:					ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
ZD.c:					ijkPlus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+2;
ZD.c:					ijkPlus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+3;
ZD.c:					ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
ZD.c:					ijkMinus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-2;
ZD.c:					ijkMinus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-3;
ZD.c:						ijkPlus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+4;
ZD.c:						ijkPlus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+5;
ZD.c:						ijkMinus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-4;
ZD.c:						ijkMinus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-5;
ZD.c:						pnt_U_RK->u_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->u[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijkPlus3]);
ZD.c:						pnt_U_RK->v_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->v[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijkPlus3]);
ZD.c:						pnt_U_RK->w_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->w[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijkPlus3]);
ZD.c:						pnt_U_RK->T_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[5]*pnt_U_RK->T[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijkPlus3]);
ZD.c:						pnt_U_RK->u_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->u[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->u[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->u[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->u[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->u[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->u[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->u[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->u[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->u[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->u[ijkPlus5]);
ZD.c:						pnt_U_RK->v_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->v[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->v[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->v[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->v[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->v[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->v[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->v[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->v[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->v[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->v[ijkPlus5]);
ZD.c:						pnt_U_RK->w_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->w[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->w[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->w[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->w[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->w[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->w[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->w[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->w[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->w[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->w[ijkPlus5]);
ZD.c:						pnt_U_RK->T_zeta[ijk]=(pnt_config->ZD_Ableitung_Koeffizient[0]*pnt_U_RK->T[ijkMinus5]+pnt_config->ZD_Ableitung_Koeffizient[1]*pnt_U_RK->T[ijkMinus4]+pnt_config->ZD_Ableitung_Koeffizient[2]*pnt_U_RK->T[ijkMinus3]+pnt_config->ZD_Ableitung_Koeffizient[3]*pnt_U_RK->T[ijkMinus2]+pnt_config->ZD_Ableitung_Koeffizient[4]*pnt_U_RK->T[ijkMinus1]+pnt_config->ZD_Ableitung_Koeffizient[6]*pnt_U_RK->T[ijkPlus1]+pnt_config->ZD_Ableitung_Koeffizient[7]*pnt_U_RK->T[ijkPlus2]+pnt_config->ZD_Ableitung_Koeffizient[8]*pnt_U_RK->T[ijkPlus3]+pnt_config->ZD_Ableitung_Koeffizient[9]*pnt_U_RK->T[ijkPlus4]+pnt_config->ZD_Ableitung_Koeffizient[10]*pnt_U_RK->T[ijkPlus5]);
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iPlus2jk=(i+2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iPlus3jk=(i+3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iMinus2jk=(i-2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iMinus3jk=(i-3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijPlus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijPlus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijMinus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijMinus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
ZD.c:				ijkPlus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+2;
ZD.c:				ijkPlus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+3;
ZD.c:				ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
ZD.c:				ijkMinus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-2;
ZD.c:				ijkMinus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-3;
ZD.c://					iPlus4jk=(i+4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					iPlus5jk=(i+5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					iMinus4jk=(i-4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					iMinus5jk=(i-5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijPlus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijPlus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijMinus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijMinus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijkPlus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+4;
ZD.c:					ijkPlus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+5;
ZD.c:					ijkMinus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-4;
ZD.c:					ijkMinus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-5;
ZD.c:					xImpuls_zeta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*xImpuls_zeta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*xImpuls_zeta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*xImpuls_zeta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*xImpuls_zeta_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*xImpuls_zeta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*xImpuls_zeta_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*xImpuls_zeta_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*xImpuls_zeta_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*xImpuls_zeta_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*xImpuls_zeta_help[10]);
ZD.c:					yImpuls_zeta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*yImpuls_zeta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*yImpuls_zeta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*yImpuls_zeta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*yImpuls_zeta_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*yImpuls_zeta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*yImpuls_zeta_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*yImpuls_zeta_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*yImpuls_zeta_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*yImpuls_zeta_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*yImpuls_zeta_help[10]);
ZD.c:						zImpuls_zeta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*zImpuls_zeta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*zImpuls_zeta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*zImpuls_zeta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*zImpuls_zeta_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*zImpuls_zeta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*zImpuls_zeta_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*zImpuls_zeta_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*zImpuls_zeta_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*zImpuls_zeta_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*zImpuls_zeta_help[10]);
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[0]*(Energie_zeta_help[0]*pnt_config->Gamma[ijkMinus5]+pnt_config->Psi*(xImpuls_zeta_help[0]*pnt_U_RK->u[ijkMinus5]+yImpuls_zeta_help[0]*pnt_U_RK->v[ijkMinus5]+zImpuls_zeta_help[0]*pnt_U_RK->w[ijkMinus5]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[1]*(Energie_zeta_help[1]*pnt_config->Gamma[ijkMinus4]+pnt_config->Psi*(xImpuls_zeta_help[1]*pnt_U_RK->u[ijkMinus4]+yImpuls_zeta_help[1]*pnt_U_RK->v[ijkMinus4]+zImpuls_zeta_help[1]*pnt_U_RK->w[ijkMinus4]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[2]*(Energie_zeta_help[2]*pnt_config->Gamma[ijkMinus3]+pnt_config->Psi*(xImpuls_zeta_help[2]*pnt_U_RK->u[ijkMinus3]+yImpuls_zeta_help[2]*pnt_U_RK->v[ijkMinus3]+zImpuls_zeta_help[2]*pnt_U_RK->w[ijkMinus3]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[3]*(Energie_zeta_help[3]*pnt_config->Gamma[ijkMinus2]+pnt_config->Psi*(xImpuls_zeta_help[3]*pnt_U_RK->u[ijkMinus2]+yImpuls_zeta_help[3]*pnt_U_RK->v[ijkMinus2]+zImpuls_zeta_help[3]*pnt_U_RK->w[ijkMinus2]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[4]*(Energie_zeta_help[4]*pnt_config->Gamma[ijkMinus1]+pnt_config->Psi*(xImpuls_zeta_help[4]*pnt_U_RK->u[ijkMinus1]+yImpuls_zeta_help[4]*pnt_U_RK->v[ijkMinus1]+zImpuls_zeta_help[4]*pnt_U_RK->w[ijkMinus1]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[6]*(Energie_zeta_help[6]*pnt_config->Gamma[ijkPlus1]+pnt_config->Psi*(xImpuls_zeta_help[6]*pnt_U_RK->u[ijkPlus1]+yImpuls_zeta_help[6]*pnt_U_RK->v[ijkPlus1]+zImpuls_zeta_help[6]*pnt_U_RK->w[ijkPlus1]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[7]*(Energie_zeta_help[7]*pnt_config->Gamma[ijkPlus2]+pnt_config->Psi*(xImpuls_zeta_help[7]*pnt_U_RK->u[ijkPlus2]+yImpuls_zeta_help[7]*pnt_U_RK->v[ijkPlus2]+zImpuls_zeta_help[7]*pnt_U_RK->w[ijkPlus2]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[8]*(Energie_zeta_help[8]*pnt_config->Gamma[ijkPlus3]+pnt_config->Psi*(xImpuls_zeta_help[8]*pnt_U_RK->u[ijkPlus3]+yImpuls_zeta_help[8]*pnt_U_RK->v[ijkPlus3]+zImpuls_zeta_help[8]*pnt_U_RK->w[ijkPlus3]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[9]*(Energie_zeta_help[9]*pnt_config->Gamma[ijkPlus4]+pnt_config->Psi*(xImpuls_zeta_help[9]*pnt_U_RK->u[ijkPlus4]+yImpuls_zeta_help[9]*pnt_U_RK->v[ijkPlus4]+zImpuls_zeta_help[9]*pnt_U_RK->w[ijkPlus4]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[10]*(Energie_zeta_help[10]*pnt_config->Gamma[ijkPlus5]+pnt_config->Psi*(xImpuls_zeta_help[10]*pnt_U_RK->u[ijkPlus5]+yImpuls_zeta_help[10]*pnt_U_RK->v[ijkPlus5]+zImpuls_zeta_help[10]*pnt_U_RK->w[ijkPlus5]));
ZD.c:					xImpuls_zeta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*xImpuls_zeta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*xImpuls_zeta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*xImpuls_zeta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*xImpuls_zeta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*xImpuls_zeta_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*xImpuls_zeta_help[6]);
ZD.c:					yImpuls_zeta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*yImpuls_zeta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*yImpuls_zeta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*yImpuls_zeta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*yImpuls_zeta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*yImpuls_zeta_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*yImpuls_zeta_help[6]);
ZD.c:						zImpuls_zeta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*zImpuls_zeta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*zImpuls_zeta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*zImpuls_zeta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*zImpuls_zeta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*zImpuls_zeta_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*zImpuls_zeta_help[6]);
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[0]*(Energie_zeta_help[0]*pnt_config->Gamma[ijkMinus3]+pnt_config->Psi*(xImpuls_zeta_help[0]*pnt_U_RK->u[ijkMinus3]+yImpuls_zeta_help[0]*pnt_U_RK->v[ijkMinus3]+zImpuls_zeta_help[0]*pnt_U_RK->w[ijkMinus3]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[1]*(Energie_zeta_help[1]*pnt_config->Gamma[ijkMinus2]+pnt_config->Psi*(xImpuls_zeta_help[1]*pnt_U_RK->u[ijkMinus2]+yImpuls_zeta_help[1]*pnt_U_RK->v[ijkMinus2]+zImpuls_zeta_help[1]*pnt_U_RK->w[ijkMinus2]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[2]*(Energie_zeta_help[2]*pnt_config->Gamma[ijkMinus1]+pnt_config->Psi*(xImpuls_zeta_help[2]*pnt_U_RK->u[ijkMinus1]+yImpuls_zeta_help[2]*pnt_U_RK->v[ijkMinus1]+zImpuls_zeta_help[2]*pnt_U_RK->w[ijkMinus1]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[4]*(Energie_zeta_help[4]*pnt_config->Gamma[ijkPlus1]+pnt_config->Psi*(xImpuls_zeta_help[4]*pnt_U_RK->u[ijkPlus1]+yImpuls_zeta_help[4]*pnt_U_RK->v[ijkPlus1]+zImpuls_zeta_help[4]*pnt_U_RK->w[ijkPlus1]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[5]*(Energie_zeta_help[5]*pnt_config->Gamma[ijkPlus2]+pnt_config->Psi*(xImpuls_zeta_help[5]*pnt_U_RK->u[ijkPlus2]+yImpuls_zeta_help[5]*pnt_U_RK->v[ijkPlus2]+zImpuls_zeta_help[5]*pnt_U_RK->w[ijkPlus2]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[6]*(Energie_zeta_help[6]*pnt_config->Gamma[ijkPlus3]+pnt_config->Psi*(xImpuls_zeta_help[6]*pnt_U_RK->u[ijkPlus3]+yImpuls_zeta_help[6]*pnt_U_RK->v[ijkPlus3]+zImpuls_zeta_help[6]*pnt_U_RK->w[ijkPlus3]));
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iPlus2jk=(i+2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iPlus3jk=(i+3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iMinus2jk=(i-2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				iMinus3jk=(i-3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijPlus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				ijMinus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
ZD.c://				ijkPlus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+2;
ZD.c://				ijkPlus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+3;
ZD.c://				ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
ZD.c://				ijkMinus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-2;
ZD.c://				ijkMinus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-3;
ZD.c://					iPlus4jk=(i+4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					iPlus5jk=(i+5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					iMinus4jk=(i-4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					iMinus5jk=(i-5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijPlus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijPlus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijMinus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					ijMinus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijkPlus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+4;
ZD.c://					ijkPlus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+5;
ZD.c://					ijkMinus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-4;
ZD.c://					ijkMinus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-5;
ZD.c:					xImpuls_eta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*xImpuls_eta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*xImpuls_eta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*xImpuls_eta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*xImpuls_eta_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*xImpuls_eta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*xImpuls_eta_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*xImpuls_eta_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*xImpuls_eta_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*xImpuls_eta_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*xImpuls_eta_help[10]);
ZD.c:					yImpuls_eta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*yImpuls_eta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*yImpuls_eta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*yImpuls_eta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*yImpuls_eta_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*yImpuls_eta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*yImpuls_eta_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*yImpuls_eta_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*yImpuls_eta_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*yImpuls_eta_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*yImpuls_eta_help[10]);
ZD.c:						zImpuls_eta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*zImpuls_eta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*zImpuls_eta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*zImpuls_eta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*zImpuls_eta_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*zImpuls_eta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*zImpuls_eta_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*zImpuls_eta_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*zImpuls_eta_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*zImpuls_eta_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*zImpuls_eta_help[10]);
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[0]*(Energie_eta_help[0]*pnt_config->Gamma[ijMinus5k]+pnt_config->Psi*(xImpuls_eta_help[0]*pnt_U_RK->u[ijMinus5k]+yImpuls_eta_help[0]*pnt_U_RK->v[ijMinus5k]+zImpuls_eta_help[0]*pnt_U_RK->w[ijMinus5k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[1]*(Energie_eta_help[1]*pnt_config->Gamma[ijMinus4k]+pnt_config->Psi*(xImpuls_eta_help[1]*pnt_U_RK->u[ijMinus4k]+yImpuls_eta_help[1]*pnt_U_RK->v[ijMinus4k]+zImpuls_eta_help[1]*pnt_U_RK->w[ijMinus4k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[2]*(Energie_eta_help[2]*pnt_config->Gamma[ijMinus3k]+pnt_config->Psi*(xImpuls_eta_help[2]*pnt_U_RK->u[ijMinus3k]+yImpuls_eta_help[2]*pnt_U_RK->v[ijMinus3k]+zImpuls_eta_help[2]*pnt_U_RK->w[ijMinus3k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[3]*(Energie_eta_help[3]*pnt_config->Gamma[ijMinus2k]+pnt_config->Psi*(xImpuls_eta_help[3]*pnt_U_RK->u[ijMinus2k]+yImpuls_eta_help[3]*pnt_U_RK->v[ijMinus2k]+zImpuls_eta_help[3]*pnt_U_RK->w[ijMinus2k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[4]*(Energie_eta_help[4]*pnt_config->Gamma[ijMinus1k]+pnt_config->Psi*(xImpuls_eta_help[4]*pnt_U_RK->u[ijMinus1k]+yImpuls_eta_help[4]*pnt_U_RK->v[ijMinus1k]+zImpuls_eta_help[4]*pnt_U_RK->w[ijMinus1k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[6]*(Energie_eta_help[6]*pnt_config->Gamma[ijPlus1k]+pnt_config->Psi*(xImpuls_eta_help[6]*pnt_U_RK->u[ijPlus1k]+yImpuls_eta_help[6]*pnt_U_RK->v[ijPlus1k]+zImpuls_eta_help[6]*pnt_U_RK->w[ijPlus1k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[7]*(Energie_eta_help[7]*pnt_config->Gamma[ijPlus2k]+pnt_config->Psi*(xImpuls_eta_help[7]*pnt_U_RK->u[ijPlus2k]+yImpuls_eta_help[7]*pnt_U_RK->v[ijPlus2k]+zImpuls_eta_help[7]*pnt_U_RK->w[ijPlus2k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[8]*(Energie_eta_help[8]*pnt_config->Gamma[ijPlus3k]+pnt_config->Psi*(xImpuls_eta_help[8]*pnt_U_RK->u[ijPlus3k]+yImpuls_eta_help[8]*pnt_U_RK->v[ijPlus3k]+zImpuls_eta_help[8]*pnt_U_RK->w[ijPlus3k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[9]*(Energie_eta_help[9]*pnt_config->Gamma[ijPlus4k]+pnt_config->Psi*(xImpuls_eta_help[9]*pnt_U_RK->u[ijPlus4k]+yImpuls_eta_help[9]*pnt_U_RK->v[ijPlus4k]+zImpuls_eta_help[9]*pnt_U_RK->w[ijPlus4k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[10]*(Energie_eta_help[10]*pnt_config->Gamma[ijPlus5k]+pnt_config->Psi*(xImpuls_eta_help[10]*pnt_U_RK->u[ijPlus5k]+yImpuls_eta_help[10]*pnt_U_RK->v[ijPlus5k]+zImpuls_eta_help[10]*pnt_U_RK->w[ijPlus5k]));
ZD.c:					xImpuls_eta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*xImpuls_eta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*xImpuls_eta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*xImpuls_eta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*xImpuls_eta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*xImpuls_eta_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*xImpuls_eta_help[6]);
ZD.c:					yImpuls_eta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*yImpuls_eta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*yImpuls_eta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*yImpuls_eta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*yImpuls_eta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*yImpuls_eta_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*yImpuls_eta_help[6]);
ZD.c:						zImpuls_eta=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*zImpuls_eta_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*zImpuls_eta_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*zImpuls_eta_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*zImpuls_eta_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*zImpuls_eta_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*zImpuls_eta_help[6]);
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[0]*(Energie_eta_help[0]*pnt_config->Gamma[ijMinus3k]+pnt_config->Psi*(xImpuls_eta_help[0]*pnt_U_RK->u[ijMinus3k]+yImpuls_eta_help[0]*pnt_U_RK->v[ijMinus3k]+zImpuls_eta_help[0]*pnt_U_RK->w[ijMinus3k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[1]*(Energie_eta_help[1]*pnt_config->Gamma[ijMinus2k]+pnt_config->Psi*(xImpuls_eta_help[1]*pnt_U_RK->u[ijMinus2k]+yImpuls_eta_help[1]*pnt_U_RK->v[ijMinus2k]+zImpuls_eta_help[1]*pnt_U_RK->w[ijMinus2k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[2]*(Energie_eta_help[2]*pnt_config->Gamma[ijMinus1k]+pnt_config->Psi*(xImpuls_eta_help[2]*pnt_U_RK->u[ijMinus1k]+yImpuls_eta_help[2]*pnt_U_RK->v[ijMinus1k]+zImpuls_eta_help[2]*pnt_U_RK->w[ijMinus1k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[4]*(Energie_eta_help[4]*pnt_config->Gamma[ijPlus1k]+pnt_config->Psi*(xImpuls_eta_help[4]*pnt_U_RK->u[ijPlus1k]+yImpuls_eta_help[4]*pnt_U_RK->v[ijPlus1k]+zImpuls_eta_help[4]*pnt_U_RK->w[ijPlus1k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[5]*(Energie_eta_help[5]*pnt_config->Gamma[ijPlus2k]+pnt_config->Psi*(xImpuls_eta_help[5]*pnt_U_RK->u[ijPlus2k]+yImpuls_eta_help[5]*pnt_U_RK->v[ijPlus2k]+zImpuls_eta_help[5]*pnt_U_RK->w[ijPlus2k]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[6]*(Energie_eta_help[6]*pnt_config->Gamma[ijPlus3k]+pnt_config->Psi*(xImpuls_eta_help[6]*pnt_U_RK->u[ijPlus3k]+yImpuls_eta_help[6]*pnt_U_RK->v[ijPlus3k]+zImpuls_eta_help[6]*pnt_U_RK->w[ijPlus3k]));
ZD.c:	for (i=pnt_config->int_iStartReal; i <= pnt_config->int_iEndReal; i++)
ZD.c:		for (j=pnt_config->int_jStartReal; j <= pnt_config->int_jEndReal; j++)
ZD.c:			for (k=pnt_config->int_kStartReal; k <= pnt_config->int_kEndReal; k++)
ZD.c:				ijk=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus1jk=(i+1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus2jk=(i+2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iPlus3jk=(i+3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus1jk=(i-1)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus2jk=(i-2)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:				iMinus3jk=(i-3)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijPlus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijPlus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijPlus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijMinus1k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-1)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijMinus2k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-2)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijMinus3k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-3)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://				ijkPlus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+1;
ZD.c://				ijkPlus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+2;
ZD.c://				ijkPlus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+3;
ZD.c://				ijkMinus1=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-1;
ZD.c://				ijkMinus2=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-2;
ZD.c://				ijkMinus3=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-3;
ZD.c:					iPlus4jk=(i+4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iPlus5jk=(i+5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iMinus4jk=(i-4)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c:					iMinus5jk=(i-5)*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijPlus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijPlus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j+5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijMinus4k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-4)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijMinus5k=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+(j-5)*pnt_config->int_kMeshPointsGhostCells+k;
ZD.c://					ijkPlus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+4;
ZD.c://					ijkPlus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k+5;
ZD.c://					ijkMinus4=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-4;
ZD.c://					ijkMinus5=i*pnt_config->int_jMeshPointsGhostCells*pnt_config->int_kMeshPointsGhostCells+j*pnt_config->int_kMeshPointsGhostCells+k-5;
ZD.c:					xImpuls_xi=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*xImpuls_xi_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*xImpuls_xi_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*xImpuls_xi_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*xImpuls_xi_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*xImpuls_xi_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*xImpuls_xi_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*xImpuls_xi_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*xImpuls_xi_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*xImpuls_xi_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*xImpuls_xi_help[10]);
ZD.c:					yImpuls_xi=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*yImpuls_xi_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*yImpuls_xi_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*yImpuls_xi_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*yImpuls_xi_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*yImpuls_xi_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*yImpuls_xi_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*yImpuls_xi_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*yImpuls_xi_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*yImpuls_xi_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*yImpuls_xi_help[10]);
ZD.c:						zImpuls_xi=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*zImpuls_xi_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*zImpuls_xi_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*zImpuls_xi_help[2]+pnt_config->ZD_Ableitung_Koeffizient[3]*zImpuls_xi_help[3]+pnt_config->ZD_Ableitung_Koeffizient[4]*zImpuls_xi_help[4]+pnt_config->ZD_Ableitung_Koeffizient[6]*zImpuls_xi_help[6]+pnt_config->ZD_Ableitung_Koeffizient[7]*zImpuls_xi_help[7]+pnt_config->ZD_Ableitung_Koeffizient[8]*zImpuls_xi_help[8]+pnt_config->ZD_Ableitung_Koeffizient[9]*zImpuls_xi_help[9]+pnt_config->ZD_Ableitung_Koeffizient[10]*zImpuls_xi_help[10]);
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[0]*(Energie_xi_help[0]*pnt_config->Gamma[iMinus5jk]+pnt_config->Psi*(xImpuls_xi_help[0]*pnt_U_RK->u[iMinus5jk]+yImpuls_xi_help[0]*pnt_U_RK->v[iMinus5jk]+zImpuls_xi_help[0]*pnt_U_RK->w[iMinus5jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[1]*(Energie_xi_help[1]*pnt_config->Gamma[iMinus4jk]+pnt_config->Psi*(xImpuls_xi_help[1]*pnt_U_RK->u[iMinus4jk]+yImpuls_xi_help[1]*pnt_U_RK->v[iMinus4jk]+zImpuls_xi_help[1]*pnt_U_RK->w[iMinus4jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[2]*(Energie_xi_help[2]*pnt_config->Gamma[iMinus3jk]+pnt_config->Psi*(xImpuls_xi_help[2]*pnt_U_RK->u[iMinus3jk]+yImpuls_xi_help[2]*pnt_U_RK->v[iMinus3jk]+zImpuls_xi_help[2]*pnt_U_RK->w[iMinus3jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[3]*(Energie_xi_help[3]*pnt_config->Gamma[iMinus2jk]+pnt_config->Psi*(xImpuls_xi_help[3]*pnt_U_RK->u[iMinus2jk]+yImpuls_xi_help[3]*pnt_U_RK->v[iMinus2jk]+zImpuls_xi_help[3]*pnt_U_RK->w[iMinus2jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[4]*(Energie_xi_help[4]*pnt_config->Gamma[iMinus1jk]+pnt_config->Psi*(xImpuls_xi_help[4]*pnt_U_RK->u[iMinus1jk]+yImpuls_xi_help[4]*pnt_U_RK->v[iMinus1jk]+zImpuls_xi_help[4]*pnt_U_RK->w[iMinus1jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[6]*(Energie_xi_help[6]*pnt_config->Gamma[iPlus1jk]+pnt_config->Psi*(xImpuls_xi_help[6]*pnt_U_RK->u[iPlus1jk]+yImpuls_xi_help[6]*pnt_U_RK->v[iPlus1jk]+zImpuls_xi_help[6]*pnt_U_RK->w[iPlus1jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[7]*(Energie_xi_help[7]*pnt_config->Gamma[iPlus2jk]+pnt_config->Psi*(xImpuls_xi_help[7]*pnt_U_RK->u[iPlus2jk]+yImpuls_xi_help[7]*pnt_U_RK->v[iPlus2jk]+zImpuls_xi_help[7]*pnt_U_RK->w[iPlus2jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[8]*(Energie_xi_help[8]*pnt_config->Gamma[iPlus3jk]+pnt_config->Psi*(xImpuls_xi_help[8]*pnt_U_RK->u[iPlus3jk]+yImpuls_xi_help[8]*pnt_U_RK->v[iPlus3jk]+zImpuls_xi_help[8]*pnt_U_RK->w[iPlus3jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[9]*(Energie_xi_help[9]*pnt_config->Gamma[iPlus4jk]+pnt_config->Psi*(xImpuls_xi_help[9]*pnt_U_RK->u[iPlus4jk]+yImpuls_xi_help[9]*pnt_U_RK->v[iPlus4jk]+zImpuls_xi_help[9]*pnt_U_RK->w[iPlus4jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[10]*(Energie_xi_help[10]*pnt_config->Gamma[iPlus5jk]+pnt_config->Psi*(xImpuls_xi_help[10]*pnt_U_RK->u[iPlus5jk]+yImpuls_xi_help[10]*pnt_U_RK->v[iPlus5jk]+zImpuls_xi_help[10]*pnt_U_RK->w[iPlus5jk]));
ZD.c:					xImpuls_xi=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*xImpuls_xi_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*xImpuls_xi_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*xImpuls_xi_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*xImpuls_xi_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*xImpuls_xi_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*xImpuls_xi_help[6]);
ZD.c:					yImpuls_xi=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*yImpuls_xi_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*yImpuls_xi_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*yImpuls_xi_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*yImpuls_xi_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*yImpuls_xi_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*yImpuls_xi_help[6]);
ZD.c:						zImpuls_xi=pnt_config->Psi*(pnt_config->ZD_Ableitung_Koeffizient[0]*zImpuls_xi_help[0]+pnt_config->ZD_Ableitung_Koeffizient[1]*zImpuls_xi_help[1]+pnt_config->ZD_Ableitung_Koeffizient[2]*zImpuls_xi_help[2]+pnt_config->ZD_Ableitung_Koeffizient[4]*zImpuls_xi_help[4]+pnt_config->ZD_Ableitung_Koeffizient[5]*zImpuls_xi_help[5]+pnt_config->ZD_Ableitung_Koeffizient[6]*zImpuls_xi_help[6]);
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[0]*(Energie_xi_help[0]*pnt_config->Gamma[iMinus3jk]+pnt_config->Psi*(xImpuls_xi_help[0]*pnt_U_RK->u[iMinus3jk]+yImpuls_xi_help[0]*pnt_U_RK->v[iMinus3jk]+zImpuls_xi_help[0]*pnt_U_RK->w[iMinus3jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[1]*(Energie_xi_help[1]*pnt_config->Gamma[iMinus2jk]+pnt_config->Psi*(xImpuls_xi_help[1]*pnt_U_RK->u[iMinus2jk]+yImpuls_xi_help[1]*pnt_U_RK->v[iMinus2jk]+zImpuls_xi_help[1]*pnt_U_RK->w[iMinus2jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[2]*(Energie_xi_help[2]*pnt_config->Gamma[iMinus1jk]+pnt_config->Psi*(xImpuls_xi_help[2]*pnt_U_RK->u[iMinus1jk]+yImpuls_xi_help[2]*pnt_U_RK->v[iMinus1jk]+zImpuls_xi_help[2]*pnt_U_RK->w[iMinus1jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[4]*(Energie_xi_help[4]*pnt_config->Gamma[iPlus1jk]+pnt_config->Psi*(xImpuls_xi_help[4]*pnt_U_RK->u[iPlus1jk]+yImpuls_xi_help[4]*pnt_U_RK->v[iPlus1jk]+zImpuls_xi_help[4]*pnt_U_RK->w[iPlus1jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[5]*(Energie_xi_help[5]*pnt_config->Gamma[iPlus2jk]+pnt_config->Psi*(xImpuls_xi_help[5]*pnt_U_RK->u[iPlus2jk]+yImpuls_xi_help[5]*pnt_U_RK->v[iPlus2jk]+zImpuls_xi_help[5]*pnt_U_RK->w[iPlus2jk]))+
ZD.c:							pnt_config->ZD_Ableitung_Koeffizient[6]*(Energie_xi_help[6]*pnt_config->Gamma[iPlus3jk]+pnt_config->Psi*(xImpuls_xi_help[6]*pnt_U_RK->u[iPlus3jk]+yImpuls_xi_help[6]*pnt_U_RK->v[iPlus3jk]+zImpuls_xi_help[6]*pnt_U_RK->w[iPlus3jk]));
ZD.c:				+pnt_config->flag_rotation_symmetric*pnt_U_RK->v[ijk]/(pnt_mesh->y[ijk]+pnt_config->wenoEpsilon))); //Zusatzterm, der nur fuer rotationssymmetrische Simulationen beruecksichtigt wird
ZD.c:				+pnt_config->flag_rotation_symmetric*pnt_U_RK->v[ijk]/(pnt_mesh->y[ijk]+pnt_config->wenoEpsilon))); //Zusatzterm, der nur fuer rotationssymmetrische Simulationen beruecksichtigt wird
